
Smart-Home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed8  0800cf30  0800cf30  0001cf30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de08  0800de08  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800de08  0800de08  0001de08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de10  0800de10  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de10  0800de10  0001de10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de14  0800de14  0001de14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800de18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd0  2000020c  0800e024  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fdc  0800e024  00020fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e30  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f0  00000000  00000000  00037064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  0003b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001644e  00000000  00000000  0003cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162b1  00000000  00000000  00052efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085c89  00000000  00000000  000691af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eee38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005860  00000000  00000000  000eee8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000020c 	.word	0x2000020c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cf14 	.word	0x0800cf14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000210 	.word	0x20000210
 8000104:	0800cf14 	.word	0x0800cf14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa8b 	bl	8001958 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9d5 	bl	80017fc <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa7d 	bl	8001958 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa73 	bl	8001958 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9f7 	bl	8001874 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9ed 	bl	8001874 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 fa2c 	bl	8002964 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 fa27 	bl	8002964 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	469b      	mov	fp, r3
 800051e:	d433      	bmi.n	8000588 <__udivmoddi4+0xa0>
 8000520:	465a      	mov	r2, fp
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83a      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e078      	b.n	800062c <__udivmoddi4+0x144>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e075      	b.n	8000632 <__udivmoddi4+0x14a>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e028      	b.n	80005b2 <__udivmoddi4+0xca>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	2320      	movs	r3, #32
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	4652      	mov	r2, sl
 8000590:	40da      	lsrs	r2, r3
 8000592:	4641      	mov	r1, r8
 8000594:	0013      	movs	r3, r2
 8000596:	464a      	mov	r2, r9
 8000598:	408a      	lsls	r2, r1
 800059a:	0017      	movs	r7, r2
 800059c:	4642      	mov	r2, r8
 800059e:	431f      	orrs	r7, r3
 80005a0:	4653      	mov	r3, sl
 80005a2:	4093      	lsls	r3, r2
 80005a4:	001e      	movs	r6, r3
 80005a6:	42af      	cmp	r7, r5
 80005a8:	d9c4      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	4643      	mov	r3, r8
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0d9      	beq.n	800056c <__udivmoddi4+0x84>
 80005b8:	07fb      	lsls	r3, r7, #31
 80005ba:	0872      	lsrs	r2, r6, #1
 80005bc:	431a      	orrs	r2, r3
 80005be:	4646      	mov	r6, r8
 80005c0:	087b      	lsrs	r3, r7, #1
 80005c2:	e00e      	b.n	80005e2 <__udivmoddi4+0xfa>
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d101      	bne.n	80005cc <__udivmoddi4+0xe4>
 80005c8:	42a2      	cmp	r2, r4
 80005ca:	d80c      	bhi.n	80005e6 <__udivmoddi4+0xfe>
 80005cc:	1aa4      	subs	r4, r4, r2
 80005ce:	419d      	sbcs	r5, r3
 80005d0:	2001      	movs	r0, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2100      	movs	r1, #0
 80005d8:	3e01      	subs	r6, #1
 80005da:	1824      	adds	r4, r4, r0
 80005dc:	414d      	adcs	r5, r1
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d006      	beq.n	80005f0 <__udivmoddi4+0x108>
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	d9ee      	bls.n	80005c4 <__udivmoddi4+0xdc>
 80005e6:	3e01      	subs	r6, #1
 80005e8:	1924      	adds	r4, r4, r4
 80005ea:	416d      	adcs	r5, r5
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d1f8      	bne.n	80005e2 <__udivmoddi4+0xfa>
 80005f0:	9800      	ldr	r0, [sp, #0]
 80005f2:	9901      	ldr	r1, [sp, #4]
 80005f4:	465b      	mov	r3, fp
 80005f6:	1900      	adds	r0, r0, r4
 80005f8:	4169      	adcs	r1, r5
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db24      	blt.n	8000648 <__udivmoddi4+0x160>
 80005fe:	002b      	movs	r3, r5
 8000600:	465a      	mov	r2, fp
 8000602:	4644      	mov	r4, r8
 8000604:	40d3      	lsrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	db2a      	blt.n	800066a <__udivmoddi4+0x182>
 8000614:	0026      	movs	r6, r4
 8000616:	409e      	lsls	r6, r3
 8000618:	0033      	movs	r3, r6
 800061a:	0026      	movs	r6, r4
 800061c:	4647      	mov	r7, r8
 800061e:	40be      	lsls	r6, r7
 8000620:	0032      	movs	r2, r6
 8000622:	1a80      	subs	r0, r0, r2
 8000624:	4199      	sbcs	r1, r3
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	9101      	str	r1, [sp, #4]
 800062a:	e79f      	b.n	800056c <__udivmoddi4+0x84>
 800062c:	42a3      	cmp	r3, r4
 800062e:	d8bc      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000630:	e783      	b.n	800053a <__udivmoddi4+0x52>
 8000632:	4642      	mov	r2, r8
 8000634:	2320      	movs	r3, #32
 8000636:	2100      	movs	r1, #0
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	9100      	str	r1, [sp, #0]
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	40da      	lsrs	r2, r3
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	e786      	b.n	8000556 <__udivmoddi4+0x6e>
 8000648:	4642      	mov	r2, r8
 800064a:	2320      	movs	r3, #32
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	002a      	movs	r2, r5
 8000650:	4646      	mov	r6, r8
 8000652:	409a      	lsls	r2, r3
 8000654:	0023      	movs	r3, r4
 8000656:	40f3      	lsrs	r3, r6
 8000658:	4644      	mov	r4, r8
 800065a:	4313      	orrs	r3, r2
 800065c:	002a      	movs	r2, r5
 800065e:	40e2      	lsrs	r2, r4
 8000660:	001c      	movs	r4, r3
 8000662:	465b      	mov	r3, fp
 8000664:	0015      	movs	r5, r2
 8000666:	2b00      	cmp	r3, #0
 8000668:	dad4      	bge.n	8000614 <__udivmoddi4+0x12c>
 800066a:	4642      	mov	r2, r8
 800066c:	002f      	movs	r7, r5
 800066e:	2320      	movs	r3, #32
 8000670:	0026      	movs	r6, r4
 8000672:	4097      	lsls	r7, r2
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	40de      	lsrs	r6, r3
 8000678:	003b      	movs	r3, r7
 800067a:	4333      	orrs	r3, r6
 800067c:	e7cd      	b.n	800061a <__udivmoddi4+0x132>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_fdiv>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	0245      	lsls	r5, r0, #9
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0047      	lsls	r7, r0, #1
 800068e:	1c0c      	adds	r4, r1, #0
 8000690:	0a6d      	lsrs	r5, r5, #9
 8000692:	0e3f      	lsrs	r7, r7, #24
 8000694:	0fc6      	lsrs	r6, r0, #31
 8000696:	2f00      	cmp	r7, #0
 8000698:	d066      	beq.n	8000768 <__aeabi_fdiv+0xe8>
 800069a:	2fff      	cmp	r7, #255	; 0xff
 800069c:	d06c      	beq.n	8000778 <__aeabi_fdiv+0xf8>
 800069e:	2300      	movs	r3, #0
 80006a0:	00ea      	lsls	r2, r5, #3
 80006a2:	2580      	movs	r5, #128	; 0x80
 80006a4:	4699      	mov	r9, r3
 80006a6:	469a      	mov	sl, r3
 80006a8:	04ed      	lsls	r5, r5, #19
 80006aa:	4315      	orrs	r5, r2
 80006ac:	3f7f      	subs	r7, #127	; 0x7f
 80006ae:	0260      	lsls	r0, r4, #9
 80006b0:	0061      	lsls	r1, r4, #1
 80006b2:	0a43      	lsrs	r3, r0, #9
 80006b4:	4698      	mov	r8, r3
 80006b6:	0e09      	lsrs	r1, r1, #24
 80006b8:	0fe4      	lsrs	r4, r4, #31
 80006ba:	2900      	cmp	r1, #0
 80006bc:	d048      	beq.n	8000750 <__aeabi_fdiv+0xd0>
 80006be:	29ff      	cmp	r1, #255	; 0xff
 80006c0:	d010      	beq.n	80006e4 <__aeabi_fdiv+0x64>
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	00d8      	lsls	r0, r3, #3
 80006c6:	04d2      	lsls	r2, r2, #19
 80006c8:	4302      	orrs	r2, r0
 80006ca:	4690      	mov	r8, r2
 80006cc:	2000      	movs	r0, #0
 80006ce:	397f      	subs	r1, #127	; 0x7f
 80006d0:	464a      	mov	r2, r9
 80006d2:	0033      	movs	r3, r6
 80006d4:	1a7f      	subs	r7, r7, r1
 80006d6:	4302      	orrs	r2, r0
 80006d8:	496c      	ldr	r1, [pc, #432]	; (800088c <__aeabi_fdiv+0x20c>)
 80006da:	0092      	lsls	r2, r2, #2
 80006dc:	588a      	ldr	r2, [r1, r2]
 80006de:	4063      	eors	r3, r4
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4697      	mov	pc, r2
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d16d      	bne.n	80007c4 <__aeabi_fdiv+0x144>
 80006e8:	2002      	movs	r0, #2
 80006ea:	3fff      	subs	r7, #255	; 0xff
 80006ec:	e033      	b.n	8000756 <__aeabi_fdiv+0xd6>
 80006ee:	2300      	movs	r3, #0
 80006f0:	4698      	mov	r8, r3
 80006f2:	0026      	movs	r6, r4
 80006f4:	4645      	mov	r5, r8
 80006f6:	4682      	mov	sl, r0
 80006f8:	4653      	mov	r3, sl
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d100      	bne.n	8000700 <__aeabi_fdiv+0x80>
 80006fe:	e07f      	b.n	8000800 <__aeabi_fdiv+0x180>
 8000700:	2b03      	cmp	r3, #3
 8000702:	d100      	bne.n	8000706 <__aeabi_fdiv+0x86>
 8000704:	e094      	b.n	8000830 <__aeabi_fdiv+0x1b0>
 8000706:	2b01      	cmp	r3, #1
 8000708:	d017      	beq.n	800073a <__aeabi_fdiv+0xba>
 800070a:	0038      	movs	r0, r7
 800070c:	307f      	adds	r0, #127	; 0x7f
 800070e:	2800      	cmp	r0, #0
 8000710:	dd5f      	ble.n	80007d2 <__aeabi_fdiv+0x152>
 8000712:	076b      	lsls	r3, r5, #29
 8000714:	d004      	beq.n	8000720 <__aeabi_fdiv+0xa0>
 8000716:	230f      	movs	r3, #15
 8000718:	402b      	ands	r3, r5
 800071a:	2b04      	cmp	r3, #4
 800071c:	d000      	beq.n	8000720 <__aeabi_fdiv+0xa0>
 800071e:	3504      	adds	r5, #4
 8000720:	012b      	lsls	r3, r5, #4
 8000722:	d503      	bpl.n	800072c <__aeabi_fdiv+0xac>
 8000724:	0038      	movs	r0, r7
 8000726:	4b5a      	ldr	r3, [pc, #360]	; (8000890 <__aeabi_fdiv+0x210>)
 8000728:	3080      	adds	r0, #128	; 0x80
 800072a:	401d      	ands	r5, r3
 800072c:	28fe      	cmp	r0, #254	; 0xfe
 800072e:	dc67      	bgt.n	8000800 <__aeabi_fdiv+0x180>
 8000730:	01ad      	lsls	r5, r5, #6
 8000732:	0a6d      	lsrs	r5, r5, #9
 8000734:	b2c0      	uxtb	r0, r0
 8000736:	e002      	b.n	800073e <__aeabi_fdiv+0xbe>
 8000738:	001e      	movs	r6, r3
 800073a:	2000      	movs	r0, #0
 800073c:	2500      	movs	r5, #0
 800073e:	05c0      	lsls	r0, r0, #23
 8000740:	4328      	orrs	r0, r5
 8000742:	07f6      	lsls	r6, r6, #31
 8000744:	4330      	orrs	r0, r6
 8000746:	bce0      	pop	{r5, r6, r7}
 8000748:	46ba      	mov	sl, r7
 800074a:	46b1      	mov	r9, r6
 800074c:	46a8      	mov	r8, r5
 800074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000750:	2b00      	cmp	r3, #0
 8000752:	d12b      	bne.n	80007ac <__aeabi_fdiv+0x12c>
 8000754:	2001      	movs	r0, #1
 8000756:	464a      	mov	r2, r9
 8000758:	0033      	movs	r3, r6
 800075a:	494e      	ldr	r1, [pc, #312]	; (8000894 <__aeabi_fdiv+0x214>)
 800075c:	4302      	orrs	r2, r0
 800075e:	0092      	lsls	r2, r2, #2
 8000760:	588a      	ldr	r2, [r1, r2]
 8000762:	4063      	eors	r3, r4
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4697      	mov	pc, r2
 8000768:	2d00      	cmp	r5, #0
 800076a:	d113      	bne.n	8000794 <__aeabi_fdiv+0x114>
 800076c:	2304      	movs	r3, #4
 800076e:	4699      	mov	r9, r3
 8000770:	3b03      	subs	r3, #3
 8000772:	2700      	movs	r7, #0
 8000774:	469a      	mov	sl, r3
 8000776:	e79a      	b.n	80006ae <__aeabi_fdiv+0x2e>
 8000778:	2d00      	cmp	r5, #0
 800077a:	d105      	bne.n	8000788 <__aeabi_fdiv+0x108>
 800077c:	2308      	movs	r3, #8
 800077e:	4699      	mov	r9, r3
 8000780:	3b06      	subs	r3, #6
 8000782:	27ff      	movs	r7, #255	; 0xff
 8000784:	469a      	mov	sl, r3
 8000786:	e792      	b.n	80006ae <__aeabi_fdiv+0x2e>
 8000788:	230c      	movs	r3, #12
 800078a:	4699      	mov	r9, r3
 800078c:	3b09      	subs	r3, #9
 800078e:	27ff      	movs	r7, #255	; 0xff
 8000790:	469a      	mov	sl, r3
 8000792:	e78c      	b.n	80006ae <__aeabi_fdiv+0x2e>
 8000794:	0028      	movs	r0, r5
 8000796:	f002 f8c7 	bl	8002928 <__clzsi2>
 800079a:	2776      	movs	r7, #118	; 0x76
 800079c:	1f43      	subs	r3, r0, #5
 800079e:	409d      	lsls	r5, r3
 80007a0:	2300      	movs	r3, #0
 80007a2:	427f      	negs	r7, r7
 80007a4:	4699      	mov	r9, r3
 80007a6:	469a      	mov	sl, r3
 80007a8:	1a3f      	subs	r7, r7, r0
 80007aa:	e780      	b.n	80006ae <__aeabi_fdiv+0x2e>
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 f8bb 	bl	8002928 <__clzsi2>
 80007b2:	4642      	mov	r2, r8
 80007b4:	1f43      	subs	r3, r0, #5
 80007b6:	2176      	movs	r1, #118	; 0x76
 80007b8:	409a      	lsls	r2, r3
 80007ba:	4249      	negs	r1, r1
 80007bc:	1a09      	subs	r1, r1, r0
 80007be:	4690      	mov	r8, r2
 80007c0:	2000      	movs	r0, #0
 80007c2:	e785      	b.n	80006d0 <__aeabi_fdiv+0x50>
 80007c4:	21ff      	movs	r1, #255	; 0xff
 80007c6:	2003      	movs	r0, #3
 80007c8:	e782      	b.n	80006d0 <__aeabi_fdiv+0x50>
 80007ca:	001e      	movs	r6, r3
 80007cc:	20ff      	movs	r0, #255	; 0xff
 80007ce:	2500      	movs	r5, #0
 80007d0:	e7b5      	b.n	800073e <__aeabi_fdiv+0xbe>
 80007d2:	2301      	movs	r3, #1
 80007d4:	1a1b      	subs	r3, r3, r0
 80007d6:	2b1b      	cmp	r3, #27
 80007d8:	dcaf      	bgt.n	800073a <__aeabi_fdiv+0xba>
 80007da:	379e      	adds	r7, #158	; 0x9e
 80007dc:	0029      	movs	r1, r5
 80007de:	40bd      	lsls	r5, r7
 80007e0:	40d9      	lsrs	r1, r3
 80007e2:	1e6a      	subs	r2, r5, #1
 80007e4:	4195      	sbcs	r5, r2
 80007e6:	430d      	orrs	r5, r1
 80007e8:	076b      	lsls	r3, r5, #29
 80007ea:	d004      	beq.n	80007f6 <__aeabi_fdiv+0x176>
 80007ec:	230f      	movs	r3, #15
 80007ee:	402b      	ands	r3, r5
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fdiv+0x176>
 80007f4:	3504      	adds	r5, #4
 80007f6:	016b      	lsls	r3, r5, #5
 80007f8:	d544      	bpl.n	8000884 <__aeabi_fdiv+0x204>
 80007fa:	2001      	movs	r0, #1
 80007fc:	2500      	movs	r5, #0
 80007fe:	e79e      	b.n	800073e <__aeabi_fdiv+0xbe>
 8000800:	20ff      	movs	r0, #255	; 0xff
 8000802:	2500      	movs	r5, #0
 8000804:	e79b      	b.n	800073e <__aeabi_fdiv+0xbe>
 8000806:	2580      	movs	r5, #128	; 0x80
 8000808:	2600      	movs	r6, #0
 800080a:	20ff      	movs	r0, #255	; 0xff
 800080c:	03ed      	lsls	r5, r5, #15
 800080e:	e796      	b.n	800073e <__aeabi_fdiv+0xbe>
 8000810:	2300      	movs	r3, #0
 8000812:	4698      	mov	r8, r3
 8000814:	2080      	movs	r0, #128	; 0x80
 8000816:	03c0      	lsls	r0, r0, #15
 8000818:	4205      	tst	r5, r0
 800081a:	d009      	beq.n	8000830 <__aeabi_fdiv+0x1b0>
 800081c:	4643      	mov	r3, r8
 800081e:	4203      	tst	r3, r0
 8000820:	d106      	bne.n	8000830 <__aeabi_fdiv+0x1b0>
 8000822:	4645      	mov	r5, r8
 8000824:	4305      	orrs	r5, r0
 8000826:	026d      	lsls	r5, r5, #9
 8000828:	0026      	movs	r6, r4
 800082a:	20ff      	movs	r0, #255	; 0xff
 800082c:	0a6d      	lsrs	r5, r5, #9
 800082e:	e786      	b.n	800073e <__aeabi_fdiv+0xbe>
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	03c0      	lsls	r0, r0, #15
 8000834:	4305      	orrs	r5, r0
 8000836:	026d      	lsls	r5, r5, #9
 8000838:	20ff      	movs	r0, #255	; 0xff
 800083a:	0a6d      	lsrs	r5, r5, #9
 800083c:	e77f      	b.n	800073e <__aeabi_fdiv+0xbe>
 800083e:	4641      	mov	r1, r8
 8000840:	016a      	lsls	r2, r5, #5
 8000842:	0148      	lsls	r0, r1, #5
 8000844:	4282      	cmp	r2, r0
 8000846:	d219      	bcs.n	800087c <__aeabi_fdiv+0x1fc>
 8000848:	211b      	movs	r1, #27
 800084a:	2500      	movs	r5, #0
 800084c:	3f01      	subs	r7, #1
 800084e:	2601      	movs	r6, #1
 8000850:	0014      	movs	r4, r2
 8000852:	006d      	lsls	r5, r5, #1
 8000854:	0052      	lsls	r2, r2, #1
 8000856:	2c00      	cmp	r4, #0
 8000858:	db01      	blt.n	800085e <__aeabi_fdiv+0x1de>
 800085a:	4290      	cmp	r0, r2
 800085c:	d801      	bhi.n	8000862 <__aeabi_fdiv+0x1e2>
 800085e:	1a12      	subs	r2, r2, r0
 8000860:	4335      	orrs	r5, r6
 8000862:	3901      	subs	r1, #1
 8000864:	2900      	cmp	r1, #0
 8000866:	d1f3      	bne.n	8000850 <__aeabi_fdiv+0x1d0>
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	0038      	movs	r0, r7
 800086e:	307f      	adds	r0, #127	; 0x7f
 8000870:	001e      	movs	r6, r3
 8000872:	4315      	orrs	r5, r2
 8000874:	2800      	cmp	r0, #0
 8000876:	dd00      	ble.n	800087a <__aeabi_fdiv+0x1fa>
 8000878:	e74b      	b.n	8000712 <__aeabi_fdiv+0x92>
 800087a:	e7aa      	b.n	80007d2 <__aeabi_fdiv+0x152>
 800087c:	211a      	movs	r1, #26
 800087e:	2501      	movs	r5, #1
 8000880:	1a12      	subs	r2, r2, r0
 8000882:	e7e4      	b.n	800084e <__aeabi_fdiv+0x1ce>
 8000884:	01ad      	lsls	r5, r5, #6
 8000886:	2000      	movs	r0, #0
 8000888:	0a6d      	lsrs	r5, r5, #9
 800088a:	e758      	b.n	800073e <__aeabi_fdiv+0xbe>
 800088c:	0800d710 	.word	0x0800d710
 8000890:	f7ffffff 	.word	0xf7ffffff
 8000894:	0800d750 	.word	0x0800d750

08000898 <__aeabi_fmul>:
 8000898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089a:	4657      	mov	r7, sl
 800089c:	464e      	mov	r6, r9
 800089e:	4645      	mov	r5, r8
 80008a0:	46de      	mov	lr, fp
 80008a2:	0244      	lsls	r4, r0, #9
 80008a4:	b5e0      	push	{r5, r6, r7, lr}
 80008a6:	0045      	lsls	r5, r0, #1
 80008a8:	1c0f      	adds	r7, r1, #0
 80008aa:	0a64      	lsrs	r4, r4, #9
 80008ac:	0e2d      	lsrs	r5, r5, #24
 80008ae:	0fc6      	lsrs	r6, r0, #31
 80008b0:	2d00      	cmp	r5, #0
 80008b2:	d047      	beq.n	8000944 <__aeabi_fmul+0xac>
 80008b4:	2dff      	cmp	r5, #255	; 0xff
 80008b6:	d04d      	beq.n	8000954 <__aeabi_fmul+0xbc>
 80008b8:	2300      	movs	r3, #0
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	469a      	mov	sl, r3
 80008be:	469b      	mov	fp, r3
 80008c0:	00e4      	lsls	r4, r4, #3
 80008c2:	04c0      	lsls	r0, r0, #19
 80008c4:	4304      	orrs	r4, r0
 80008c6:	3d7f      	subs	r5, #127	; 0x7f
 80008c8:	0278      	lsls	r0, r7, #9
 80008ca:	0a43      	lsrs	r3, r0, #9
 80008cc:	4699      	mov	r9, r3
 80008ce:	007a      	lsls	r2, r7, #1
 80008d0:	0ffb      	lsrs	r3, r7, #31
 80008d2:	4698      	mov	r8, r3
 80008d4:	0e12      	lsrs	r2, r2, #24
 80008d6:	464b      	mov	r3, r9
 80008d8:	d044      	beq.n	8000964 <__aeabi_fmul+0xcc>
 80008da:	2aff      	cmp	r2, #255	; 0xff
 80008dc:	d011      	beq.n	8000902 <__aeabi_fmul+0x6a>
 80008de:	00d8      	lsls	r0, r3, #3
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	04db      	lsls	r3, r3, #19
 80008e4:	4303      	orrs	r3, r0
 80008e6:	4699      	mov	r9, r3
 80008e8:	2000      	movs	r0, #0
 80008ea:	3a7f      	subs	r2, #127	; 0x7f
 80008ec:	18ad      	adds	r5, r5, r2
 80008ee:	4647      	mov	r7, r8
 80008f0:	4653      	mov	r3, sl
 80008f2:	4077      	eors	r7, r6
 80008f4:	1c69      	adds	r1, r5, #1
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	d83f      	bhi.n	800097a <__aeabi_fmul+0xe2>
 80008fa:	4a72      	ldr	r2, [pc, #456]	; (8000ac4 <__aeabi_fmul+0x22c>)
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	58d3      	ldr	r3, [r2, r3]
 8000900:	469f      	mov	pc, r3
 8000902:	35ff      	adds	r5, #255	; 0xff
 8000904:	2b00      	cmp	r3, #0
 8000906:	d000      	beq.n	800090a <__aeabi_fmul+0x72>
 8000908:	e079      	b.n	80009fe <__aeabi_fmul+0x166>
 800090a:	4652      	mov	r2, sl
 800090c:	2302      	movs	r3, #2
 800090e:	431a      	orrs	r2, r3
 8000910:	4692      	mov	sl, r2
 8000912:	2002      	movs	r0, #2
 8000914:	e7eb      	b.n	80008ee <__aeabi_fmul+0x56>
 8000916:	4647      	mov	r7, r8
 8000918:	464c      	mov	r4, r9
 800091a:	4683      	mov	fp, r0
 800091c:	465b      	mov	r3, fp
 800091e:	2b02      	cmp	r3, #2
 8000920:	d028      	beq.n	8000974 <__aeabi_fmul+0xdc>
 8000922:	2b03      	cmp	r3, #3
 8000924:	d100      	bne.n	8000928 <__aeabi_fmul+0x90>
 8000926:	e0c6      	b.n	8000ab6 <__aeabi_fmul+0x21e>
 8000928:	2b01      	cmp	r3, #1
 800092a:	d14f      	bne.n	80009cc <__aeabi_fmul+0x134>
 800092c:	2000      	movs	r0, #0
 800092e:	2400      	movs	r4, #0
 8000930:	05c0      	lsls	r0, r0, #23
 8000932:	07ff      	lsls	r7, r7, #31
 8000934:	4320      	orrs	r0, r4
 8000936:	4338      	orrs	r0, r7
 8000938:	bcf0      	pop	{r4, r5, r6, r7}
 800093a:	46bb      	mov	fp, r7
 800093c:	46b2      	mov	sl, r6
 800093e:	46a9      	mov	r9, r5
 8000940:	46a0      	mov	r8, r4
 8000942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000944:	2c00      	cmp	r4, #0
 8000946:	d171      	bne.n	8000a2c <__aeabi_fmul+0x194>
 8000948:	2304      	movs	r3, #4
 800094a:	469a      	mov	sl, r3
 800094c:	3b03      	subs	r3, #3
 800094e:	2500      	movs	r5, #0
 8000950:	469b      	mov	fp, r3
 8000952:	e7b9      	b.n	80008c8 <__aeabi_fmul+0x30>
 8000954:	2c00      	cmp	r4, #0
 8000956:	d163      	bne.n	8000a20 <__aeabi_fmul+0x188>
 8000958:	2308      	movs	r3, #8
 800095a:	469a      	mov	sl, r3
 800095c:	3b06      	subs	r3, #6
 800095e:	25ff      	movs	r5, #255	; 0xff
 8000960:	469b      	mov	fp, r3
 8000962:	e7b1      	b.n	80008c8 <__aeabi_fmul+0x30>
 8000964:	2b00      	cmp	r3, #0
 8000966:	d150      	bne.n	8000a0a <__aeabi_fmul+0x172>
 8000968:	4652      	mov	r2, sl
 800096a:	3301      	adds	r3, #1
 800096c:	431a      	orrs	r2, r3
 800096e:	4692      	mov	sl, r2
 8000970:	2001      	movs	r0, #1
 8000972:	e7bc      	b.n	80008ee <__aeabi_fmul+0x56>
 8000974:	20ff      	movs	r0, #255	; 0xff
 8000976:	2400      	movs	r4, #0
 8000978:	e7da      	b.n	8000930 <__aeabi_fmul+0x98>
 800097a:	4648      	mov	r0, r9
 800097c:	0c26      	lsrs	r6, r4, #16
 800097e:	0424      	lsls	r4, r4, #16
 8000980:	0c22      	lsrs	r2, r4, #16
 8000982:	0404      	lsls	r4, r0, #16
 8000984:	0c24      	lsrs	r4, r4, #16
 8000986:	464b      	mov	r3, r9
 8000988:	0020      	movs	r0, r4
 800098a:	0c1b      	lsrs	r3, r3, #16
 800098c:	4350      	muls	r0, r2
 800098e:	4374      	muls	r4, r6
 8000990:	435a      	muls	r2, r3
 8000992:	435e      	muls	r6, r3
 8000994:	1912      	adds	r2, r2, r4
 8000996:	0c03      	lsrs	r3, r0, #16
 8000998:	189b      	adds	r3, r3, r2
 800099a:	429c      	cmp	r4, r3
 800099c:	d903      	bls.n	80009a6 <__aeabi_fmul+0x10e>
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	0252      	lsls	r2, r2, #9
 80009a2:	4694      	mov	ip, r2
 80009a4:	4466      	add	r6, ip
 80009a6:	0400      	lsls	r0, r0, #16
 80009a8:	041a      	lsls	r2, r3, #16
 80009aa:	0c00      	lsrs	r0, r0, #16
 80009ac:	1812      	adds	r2, r2, r0
 80009ae:	0194      	lsls	r4, r2, #6
 80009b0:	1e60      	subs	r0, r4, #1
 80009b2:	4184      	sbcs	r4, r0
 80009b4:	0c1b      	lsrs	r3, r3, #16
 80009b6:	0e92      	lsrs	r2, r2, #26
 80009b8:	199b      	adds	r3, r3, r6
 80009ba:	4314      	orrs	r4, r2
 80009bc:	019b      	lsls	r3, r3, #6
 80009be:	431c      	orrs	r4, r3
 80009c0:	011b      	lsls	r3, r3, #4
 80009c2:	d572      	bpl.n	8000aaa <__aeabi_fmul+0x212>
 80009c4:	2001      	movs	r0, #1
 80009c6:	0863      	lsrs	r3, r4, #1
 80009c8:	4004      	ands	r4, r0
 80009ca:	431c      	orrs	r4, r3
 80009cc:	0008      	movs	r0, r1
 80009ce:	307f      	adds	r0, #127	; 0x7f
 80009d0:	2800      	cmp	r0, #0
 80009d2:	dd3c      	ble.n	8000a4e <__aeabi_fmul+0x1b6>
 80009d4:	0763      	lsls	r3, r4, #29
 80009d6:	d004      	beq.n	80009e2 <__aeabi_fmul+0x14a>
 80009d8:	230f      	movs	r3, #15
 80009da:	4023      	ands	r3, r4
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d000      	beq.n	80009e2 <__aeabi_fmul+0x14a>
 80009e0:	3404      	adds	r4, #4
 80009e2:	0123      	lsls	r3, r4, #4
 80009e4:	d503      	bpl.n	80009ee <__aeabi_fmul+0x156>
 80009e6:	3180      	adds	r1, #128	; 0x80
 80009e8:	0008      	movs	r0, r1
 80009ea:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <__aeabi_fmul+0x230>)
 80009ec:	401c      	ands	r4, r3
 80009ee:	28fe      	cmp	r0, #254	; 0xfe
 80009f0:	dcc0      	bgt.n	8000974 <__aeabi_fmul+0xdc>
 80009f2:	01a4      	lsls	r4, r4, #6
 80009f4:	0a64      	lsrs	r4, r4, #9
 80009f6:	b2c0      	uxtb	r0, r0
 80009f8:	e79a      	b.n	8000930 <__aeabi_fmul+0x98>
 80009fa:	0037      	movs	r7, r6
 80009fc:	e78e      	b.n	800091c <__aeabi_fmul+0x84>
 80009fe:	4652      	mov	r2, sl
 8000a00:	2303      	movs	r3, #3
 8000a02:	431a      	orrs	r2, r3
 8000a04:	4692      	mov	sl, r2
 8000a06:	2003      	movs	r0, #3
 8000a08:	e771      	b.n	80008ee <__aeabi_fmul+0x56>
 8000a0a:	4648      	mov	r0, r9
 8000a0c:	f001 ff8c 	bl	8002928 <__clzsi2>
 8000a10:	464a      	mov	r2, r9
 8000a12:	1f43      	subs	r3, r0, #5
 8000a14:	409a      	lsls	r2, r3
 8000a16:	1a2d      	subs	r5, r5, r0
 8000a18:	4691      	mov	r9, r2
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	3d76      	subs	r5, #118	; 0x76
 8000a1e:	e766      	b.n	80008ee <__aeabi_fmul+0x56>
 8000a20:	230c      	movs	r3, #12
 8000a22:	469a      	mov	sl, r3
 8000a24:	3b09      	subs	r3, #9
 8000a26:	25ff      	movs	r5, #255	; 0xff
 8000a28:	469b      	mov	fp, r3
 8000a2a:	e74d      	b.n	80008c8 <__aeabi_fmul+0x30>
 8000a2c:	0020      	movs	r0, r4
 8000a2e:	f001 ff7b 	bl	8002928 <__clzsi2>
 8000a32:	2576      	movs	r5, #118	; 0x76
 8000a34:	1f43      	subs	r3, r0, #5
 8000a36:	409c      	lsls	r4, r3
 8000a38:	2300      	movs	r3, #0
 8000a3a:	426d      	negs	r5, r5
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	469b      	mov	fp, r3
 8000a40:	1a2d      	subs	r5, r5, r0
 8000a42:	e741      	b.n	80008c8 <__aeabi_fmul+0x30>
 8000a44:	2480      	movs	r4, #128	; 0x80
 8000a46:	2700      	movs	r7, #0
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	03e4      	lsls	r4, r4, #15
 8000a4c:	e770      	b.n	8000930 <__aeabi_fmul+0x98>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	1a1b      	subs	r3, r3, r0
 8000a52:	2b1b      	cmp	r3, #27
 8000a54:	dd00      	ble.n	8000a58 <__aeabi_fmul+0x1c0>
 8000a56:	e769      	b.n	800092c <__aeabi_fmul+0x94>
 8000a58:	319e      	adds	r1, #158	; 0x9e
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	408c      	lsls	r4, r1
 8000a5e:	40d8      	lsrs	r0, r3
 8000a60:	1e63      	subs	r3, r4, #1
 8000a62:	419c      	sbcs	r4, r3
 8000a64:	4304      	orrs	r4, r0
 8000a66:	0763      	lsls	r3, r4, #29
 8000a68:	d004      	beq.n	8000a74 <__aeabi_fmul+0x1dc>
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	4023      	ands	r3, r4
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	d000      	beq.n	8000a74 <__aeabi_fmul+0x1dc>
 8000a72:	3404      	adds	r4, #4
 8000a74:	0163      	lsls	r3, r4, #5
 8000a76:	d51a      	bpl.n	8000aae <__aeabi_fmul+0x216>
 8000a78:	2001      	movs	r0, #1
 8000a7a:	2400      	movs	r4, #0
 8000a7c:	e758      	b.n	8000930 <__aeabi_fmul+0x98>
 8000a7e:	2080      	movs	r0, #128	; 0x80
 8000a80:	03c0      	lsls	r0, r0, #15
 8000a82:	4204      	tst	r4, r0
 8000a84:	d009      	beq.n	8000a9a <__aeabi_fmul+0x202>
 8000a86:	464b      	mov	r3, r9
 8000a88:	4203      	tst	r3, r0
 8000a8a:	d106      	bne.n	8000a9a <__aeabi_fmul+0x202>
 8000a8c:	464c      	mov	r4, r9
 8000a8e:	4304      	orrs	r4, r0
 8000a90:	0264      	lsls	r4, r4, #9
 8000a92:	4647      	mov	r7, r8
 8000a94:	20ff      	movs	r0, #255	; 0xff
 8000a96:	0a64      	lsrs	r4, r4, #9
 8000a98:	e74a      	b.n	8000930 <__aeabi_fmul+0x98>
 8000a9a:	2080      	movs	r0, #128	; 0x80
 8000a9c:	03c0      	lsls	r0, r0, #15
 8000a9e:	4304      	orrs	r4, r0
 8000aa0:	0264      	lsls	r4, r4, #9
 8000aa2:	0037      	movs	r7, r6
 8000aa4:	20ff      	movs	r0, #255	; 0xff
 8000aa6:	0a64      	lsrs	r4, r4, #9
 8000aa8:	e742      	b.n	8000930 <__aeabi_fmul+0x98>
 8000aaa:	0029      	movs	r1, r5
 8000aac:	e78e      	b.n	80009cc <__aeabi_fmul+0x134>
 8000aae:	01a4      	lsls	r4, r4, #6
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	0a64      	lsrs	r4, r4, #9
 8000ab4:	e73c      	b.n	8000930 <__aeabi_fmul+0x98>
 8000ab6:	2080      	movs	r0, #128	; 0x80
 8000ab8:	03c0      	lsls	r0, r0, #15
 8000aba:	4304      	orrs	r4, r0
 8000abc:	0264      	lsls	r4, r4, #9
 8000abe:	20ff      	movs	r0, #255	; 0xff
 8000ac0:	0a64      	lsrs	r4, r4, #9
 8000ac2:	e735      	b.n	8000930 <__aeabi_fmul+0x98>
 8000ac4:	0800d790 	.word	0x0800d790
 8000ac8:	f7ffffff 	.word	0xf7ffffff

08000acc <__aeabi_i2f>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d013      	beq.n	8000afa <__aeabi_i2f+0x2e>
 8000ad2:	17c3      	asrs	r3, r0, #31
 8000ad4:	18c5      	adds	r5, r0, r3
 8000ad6:	405d      	eors	r5, r3
 8000ad8:	0fc4      	lsrs	r4, r0, #31
 8000ada:	0028      	movs	r0, r5
 8000adc:	f001 ff24 	bl	8002928 <__clzsi2>
 8000ae0:	239e      	movs	r3, #158	; 0x9e
 8000ae2:	0001      	movs	r1, r0
 8000ae4:	1a1b      	subs	r3, r3, r0
 8000ae6:	2b96      	cmp	r3, #150	; 0x96
 8000ae8:	dc0f      	bgt.n	8000b0a <__aeabi_i2f+0x3e>
 8000aea:	2808      	cmp	r0, #8
 8000aec:	dd01      	ble.n	8000af2 <__aeabi_i2f+0x26>
 8000aee:	3908      	subs	r1, #8
 8000af0:	408d      	lsls	r5, r1
 8000af2:	026d      	lsls	r5, r5, #9
 8000af4:	0a6d      	lsrs	r5, r5, #9
 8000af6:	b2d8      	uxtb	r0, r3
 8000af8:	e002      	b.n	8000b00 <__aeabi_i2f+0x34>
 8000afa:	2400      	movs	r4, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	2500      	movs	r5, #0
 8000b00:	05c0      	lsls	r0, r0, #23
 8000b02:	4328      	orrs	r0, r5
 8000b04:	07e4      	lsls	r4, r4, #31
 8000b06:	4320      	orrs	r0, r4
 8000b08:	bd70      	pop	{r4, r5, r6, pc}
 8000b0a:	2b99      	cmp	r3, #153	; 0x99
 8000b0c:	dd0b      	ble.n	8000b26 <__aeabi_i2f+0x5a>
 8000b0e:	2205      	movs	r2, #5
 8000b10:	002e      	movs	r6, r5
 8000b12:	1a12      	subs	r2, r2, r0
 8000b14:	40d6      	lsrs	r6, r2
 8000b16:	0002      	movs	r2, r0
 8000b18:	321b      	adds	r2, #27
 8000b1a:	4095      	lsls	r5, r2
 8000b1c:	0028      	movs	r0, r5
 8000b1e:	1e45      	subs	r5, r0, #1
 8000b20:	41a8      	sbcs	r0, r5
 8000b22:	0035      	movs	r5, r6
 8000b24:	4305      	orrs	r5, r0
 8000b26:	2905      	cmp	r1, #5
 8000b28:	dd01      	ble.n	8000b2e <__aeabi_i2f+0x62>
 8000b2a:	1f4a      	subs	r2, r1, #5
 8000b2c:	4095      	lsls	r5, r2
 8000b2e:	002a      	movs	r2, r5
 8000b30:	4e08      	ldr	r6, [pc, #32]	; (8000b54 <__aeabi_i2f+0x88>)
 8000b32:	4032      	ands	r2, r6
 8000b34:	0768      	lsls	r0, r5, #29
 8000b36:	d009      	beq.n	8000b4c <__aeabi_i2f+0x80>
 8000b38:	200f      	movs	r0, #15
 8000b3a:	4028      	ands	r0, r5
 8000b3c:	2804      	cmp	r0, #4
 8000b3e:	d005      	beq.n	8000b4c <__aeabi_i2f+0x80>
 8000b40:	3204      	adds	r2, #4
 8000b42:	0150      	lsls	r0, r2, #5
 8000b44:	d502      	bpl.n	8000b4c <__aeabi_i2f+0x80>
 8000b46:	239f      	movs	r3, #159	; 0x9f
 8000b48:	4032      	ands	r2, r6
 8000b4a:	1a5b      	subs	r3, r3, r1
 8000b4c:	0192      	lsls	r2, r2, #6
 8000b4e:	0a55      	lsrs	r5, r2, #9
 8000b50:	b2d8      	uxtb	r0, r3
 8000b52:	e7d5      	b.n	8000b00 <__aeabi_i2f+0x34>
 8000b54:	fbffffff 	.word	0xfbffffff

08000b58 <__aeabi_dadd>:
 8000b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5a:	464f      	mov	r7, r9
 8000b5c:	46d6      	mov	lr, sl
 8000b5e:	4646      	mov	r6, r8
 8000b60:	000d      	movs	r5, r1
 8000b62:	0001      	movs	r1, r0
 8000b64:	0018      	movs	r0, r3
 8000b66:	b5c0      	push	{r6, r7, lr}
 8000b68:	0017      	movs	r7, r2
 8000b6a:	032b      	lsls	r3, r5, #12
 8000b6c:	0a5a      	lsrs	r2, r3, #9
 8000b6e:	0f4b      	lsrs	r3, r1, #29
 8000b70:	4313      	orrs	r3, r2
 8000b72:	00ca      	lsls	r2, r1, #3
 8000b74:	4691      	mov	r9, r2
 8000b76:	0302      	lsls	r2, r0, #12
 8000b78:	006e      	lsls	r6, r5, #1
 8000b7a:	0041      	lsls	r1, r0, #1
 8000b7c:	0a52      	lsrs	r2, r2, #9
 8000b7e:	0fec      	lsrs	r4, r5, #31
 8000b80:	0f7d      	lsrs	r5, r7, #29
 8000b82:	4315      	orrs	r5, r2
 8000b84:	0d76      	lsrs	r6, r6, #21
 8000b86:	0d49      	lsrs	r1, r1, #21
 8000b88:	0fc0      	lsrs	r0, r0, #31
 8000b8a:	4682      	mov	sl, r0
 8000b8c:	46ac      	mov	ip, r5
 8000b8e:	00ff      	lsls	r7, r7, #3
 8000b90:	1a72      	subs	r2, r6, r1
 8000b92:	4284      	cmp	r4, r0
 8000b94:	d100      	bne.n	8000b98 <__aeabi_dadd+0x40>
 8000b96:	e098      	b.n	8000cca <__aeabi_dadd+0x172>
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	dc00      	bgt.n	8000b9e <__aeabi_dadd+0x46>
 8000b9c:	e081      	b.n	8000ca2 <__aeabi_dadd+0x14a>
 8000b9e:	2900      	cmp	r1, #0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x4c>
 8000ba2:	e0b6      	b.n	8000d12 <__aeabi_dadd+0x1ba>
 8000ba4:	49c9      	ldr	r1, [pc, #804]	; (8000ecc <__aeabi_dadd+0x374>)
 8000ba6:	428e      	cmp	r6, r1
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x54>
 8000baa:	e172      	b.n	8000e92 <__aeabi_dadd+0x33a>
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	0028      	movs	r0, r5
 8000bb0:	0409      	lsls	r1, r1, #16
 8000bb2:	4308      	orrs	r0, r1
 8000bb4:	4684      	mov	ip, r0
 8000bb6:	2a38      	cmp	r2, #56	; 0x38
 8000bb8:	dd00      	ble.n	8000bbc <__aeabi_dadd+0x64>
 8000bba:	e15e      	b.n	8000e7a <__aeabi_dadd+0x322>
 8000bbc:	2a1f      	cmp	r2, #31
 8000bbe:	dd00      	ble.n	8000bc2 <__aeabi_dadd+0x6a>
 8000bc0:	e1ee      	b.n	8000fa0 <__aeabi_dadd+0x448>
 8000bc2:	2020      	movs	r0, #32
 8000bc4:	0039      	movs	r1, r7
 8000bc6:	4665      	mov	r5, ip
 8000bc8:	1a80      	subs	r0, r0, r2
 8000bca:	4087      	lsls	r7, r0
 8000bcc:	40d1      	lsrs	r1, r2
 8000bce:	4085      	lsls	r5, r0
 8000bd0:	430d      	orrs	r5, r1
 8000bd2:	0039      	movs	r1, r7
 8000bd4:	1e4f      	subs	r7, r1, #1
 8000bd6:	41b9      	sbcs	r1, r7
 8000bd8:	4667      	mov	r7, ip
 8000bda:	40d7      	lsrs	r7, r2
 8000bdc:	4329      	orrs	r1, r5
 8000bde:	1bdb      	subs	r3, r3, r7
 8000be0:	464a      	mov	r2, r9
 8000be2:	1a55      	subs	r5, r2, r1
 8000be4:	45a9      	cmp	r9, r5
 8000be6:	4189      	sbcs	r1, r1
 8000be8:	4249      	negs	r1, r1
 8000bea:	1a5b      	subs	r3, r3, r1
 8000bec:	4698      	mov	r8, r3
 8000bee:	4643      	mov	r3, r8
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	d400      	bmi.n	8000bf6 <__aeabi_dadd+0x9e>
 8000bf4:	e0cc      	b.n	8000d90 <__aeabi_dadd+0x238>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	025b      	lsls	r3, r3, #9
 8000bfa:	0a5b      	lsrs	r3, r3, #9
 8000bfc:	4698      	mov	r8, r3
 8000bfe:	4643      	mov	r3, r8
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0xae>
 8000c04:	e12c      	b.n	8000e60 <__aeabi_dadd+0x308>
 8000c06:	4640      	mov	r0, r8
 8000c08:	f001 fe8e 	bl	8002928 <__clzsi2>
 8000c0c:	0001      	movs	r1, r0
 8000c0e:	3908      	subs	r1, #8
 8000c10:	2220      	movs	r2, #32
 8000c12:	0028      	movs	r0, r5
 8000c14:	4643      	mov	r3, r8
 8000c16:	1a52      	subs	r2, r2, r1
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	40d0      	lsrs	r0, r2
 8000c1c:	408d      	lsls	r5, r1
 8000c1e:	4303      	orrs	r3, r0
 8000c20:	428e      	cmp	r6, r1
 8000c22:	dd00      	ble.n	8000c26 <__aeabi_dadd+0xce>
 8000c24:	e117      	b.n	8000e56 <__aeabi_dadd+0x2fe>
 8000c26:	1b8e      	subs	r6, r1, r6
 8000c28:	1c72      	adds	r2, r6, #1
 8000c2a:	2a1f      	cmp	r2, #31
 8000c2c:	dd00      	ble.n	8000c30 <__aeabi_dadd+0xd8>
 8000c2e:	e1a7      	b.n	8000f80 <__aeabi_dadd+0x428>
 8000c30:	2120      	movs	r1, #32
 8000c32:	0018      	movs	r0, r3
 8000c34:	002e      	movs	r6, r5
 8000c36:	1a89      	subs	r1, r1, r2
 8000c38:	408d      	lsls	r5, r1
 8000c3a:	4088      	lsls	r0, r1
 8000c3c:	40d6      	lsrs	r6, r2
 8000c3e:	40d3      	lsrs	r3, r2
 8000c40:	1e69      	subs	r1, r5, #1
 8000c42:	418d      	sbcs	r5, r1
 8000c44:	4330      	orrs	r0, r6
 8000c46:	4698      	mov	r8, r3
 8000c48:	2600      	movs	r6, #0
 8000c4a:	4305      	orrs	r5, r0
 8000c4c:	076b      	lsls	r3, r5, #29
 8000c4e:	d009      	beq.n	8000c64 <__aeabi_dadd+0x10c>
 8000c50:	230f      	movs	r3, #15
 8000c52:	402b      	ands	r3, r5
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d005      	beq.n	8000c64 <__aeabi_dadd+0x10c>
 8000c58:	1d2b      	adds	r3, r5, #4
 8000c5a:	42ab      	cmp	r3, r5
 8000c5c:	41ad      	sbcs	r5, r5
 8000c5e:	426d      	negs	r5, r5
 8000c60:	44a8      	add	r8, r5
 8000c62:	001d      	movs	r5, r3
 8000c64:	4643      	mov	r3, r8
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	d400      	bmi.n	8000c6c <__aeabi_dadd+0x114>
 8000c6a:	e094      	b.n	8000d96 <__aeabi_dadd+0x23e>
 8000c6c:	4b97      	ldr	r3, [pc, #604]	; (8000ecc <__aeabi_dadd+0x374>)
 8000c6e:	1c72      	adds	r2, r6, #1
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dadd+0x11e>
 8000c74:	e09d      	b.n	8000db2 <__aeabi_dadd+0x25a>
 8000c76:	4641      	mov	r1, r8
 8000c78:	4b95      	ldr	r3, [pc, #596]	; (8000ed0 <__aeabi_dadd+0x378>)
 8000c7a:	08ed      	lsrs	r5, r5, #3
 8000c7c:	4019      	ands	r1, r3
 8000c7e:	000b      	movs	r3, r1
 8000c80:	0552      	lsls	r2, r2, #21
 8000c82:	0749      	lsls	r1, r1, #29
 8000c84:	025b      	lsls	r3, r3, #9
 8000c86:	4329      	orrs	r1, r5
 8000c88:	0b1b      	lsrs	r3, r3, #12
 8000c8a:	0d52      	lsrs	r2, r2, #21
 8000c8c:	0512      	lsls	r2, r2, #20
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	07e4      	lsls	r4, r4, #31
 8000c92:	4323      	orrs	r3, r4
 8000c94:	0008      	movs	r0, r1
 8000c96:	0019      	movs	r1, r3
 8000c98:	bce0      	pop	{r5, r6, r7}
 8000c9a:	46ba      	mov	sl, r7
 8000c9c:	46b1      	mov	r9, r6
 8000c9e:	46a8      	mov	r8, r5
 8000ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d043      	beq.n	8000d2e <__aeabi_dadd+0x1d6>
 8000ca6:	1b8a      	subs	r2, r1, r6
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d000      	beq.n	8000cae <__aeabi_dadd+0x156>
 8000cac:	e12a      	b.n	8000f04 <__aeabi_dadd+0x3ac>
 8000cae:	464c      	mov	r4, r9
 8000cb0:	431c      	orrs	r4, r3
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x15e>
 8000cb4:	e1d1      	b.n	800105a <__aeabi_dadd+0x502>
 8000cb6:	1e54      	subs	r4, r2, #1
 8000cb8:	2a01      	cmp	r2, #1
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x166>
 8000cbc:	e21f      	b.n	80010fe <__aeabi_dadd+0x5a6>
 8000cbe:	4d83      	ldr	r5, [pc, #524]	; (8000ecc <__aeabi_dadd+0x374>)
 8000cc0:	42aa      	cmp	r2, r5
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_dadd+0x16e>
 8000cc4:	e272      	b.n	80011ac <__aeabi_dadd+0x654>
 8000cc6:	0022      	movs	r2, r4
 8000cc8:	e123      	b.n	8000f12 <__aeabi_dadd+0x3ba>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	dc00      	bgt.n	8000cd0 <__aeabi_dadd+0x178>
 8000cce:	e098      	b.n	8000e02 <__aeabi_dadd+0x2aa>
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	d042      	beq.n	8000d5a <__aeabi_dadd+0x202>
 8000cd4:	497d      	ldr	r1, [pc, #500]	; (8000ecc <__aeabi_dadd+0x374>)
 8000cd6:	428e      	cmp	r6, r1
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dadd+0x184>
 8000cda:	e0da      	b.n	8000e92 <__aeabi_dadd+0x33a>
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	0028      	movs	r0, r5
 8000ce0:	0409      	lsls	r1, r1, #16
 8000ce2:	4308      	orrs	r0, r1
 8000ce4:	4684      	mov	ip, r0
 8000ce6:	2a38      	cmp	r2, #56	; 0x38
 8000ce8:	dd00      	ble.n	8000cec <__aeabi_dadd+0x194>
 8000cea:	e129      	b.n	8000f40 <__aeabi_dadd+0x3e8>
 8000cec:	2a1f      	cmp	r2, #31
 8000cee:	dc00      	bgt.n	8000cf2 <__aeabi_dadd+0x19a>
 8000cf0:	e187      	b.n	8001002 <__aeabi_dadd+0x4aa>
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	4665      	mov	r5, ip
 8000cf6:	3920      	subs	r1, #32
 8000cf8:	40cd      	lsrs	r5, r1
 8000cfa:	2a20      	cmp	r2, #32
 8000cfc:	d004      	beq.n	8000d08 <__aeabi_dadd+0x1b0>
 8000cfe:	2040      	movs	r0, #64	; 0x40
 8000d00:	4661      	mov	r1, ip
 8000d02:	1a82      	subs	r2, r0, r2
 8000d04:	4091      	lsls	r1, r2
 8000d06:	430f      	orrs	r7, r1
 8000d08:	0039      	movs	r1, r7
 8000d0a:	1e4f      	subs	r7, r1, #1
 8000d0c:	41b9      	sbcs	r1, r7
 8000d0e:	430d      	orrs	r5, r1
 8000d10:	e11b      	b.n	8000f4a <__aeabi_dadd+0x3f2>
 8000d12:	0029      	movs	r1, r5
 8000d14:	4339      	orrs	r1, r7
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x1c2>
 8000d18:	e0b5      	b.n	8000e86 <__aeabi_dadd+0x32e>
 8000d1a:	1e51      	subs	r1, r2, #1
 8000d1c:	2a01      	cmp	r2, #1
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dadd+0x1ca>
 8000d20:	e1ab      	b.n	800107a <__aeabi_dadd+0x522>
 8000d22:	486a      	ldr	r0, [pc, #424]	; (8000ecc <__aeabi_dadd+0x374>)
 8000d24:	4282      	cmp	r2, r0
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dadd+0x1d2>
 8000d28:	e1b2      	b.n	8001090 <__aeabi_dadd+0x538>
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	e743      	b.n	8000bb6 <__aeabi_dadd+0x5e>
 8000d2e:	4969      	ldr	r1, [pc, #420]	; (8000ed4 <__aeabi_dadd+0x37c>)
 8000d30:	1c75      	adds	r5, r6, #1
 8000d32:	420d      	tst	r5, r1
 8000d34:	d000      	beq.n	8000d38 <__aeabi_dadd+0x1e0>
 8000d36:	e0cf      	b.n	8000ed8 <__aeabi_dadd+0x380>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d000      	beq.n	8000d3e <__aeabi_dadd+0x1e6>
 8000d3c:	e193      	b.n	8001066 <__aeabi_dadd+0x50e>
 8000d3e:	4649      	mov	r1, r9
 8000d40:	4319      	orrs	r1, r3
 8000d42:	d100      	bne.n	8000d46 <__aeabi_dadd+0x1ee>
 8000d44:	e1d1      	b.n	80010ea <__aeabi_dadd+0x592>
 8000d46:	4661      	mov	r1, ip
 8000d48:	4339      	orrs	r1, r7
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_dadd+0x1f6>
 8000d4c:	e1e3      	b.n	8001116 <__aeabi_dadd+0x5be>
 8000d4e:	4649      	mov	r1, r9
 8000d50:	0758      	lsls	r0, r3, #29
 8000d52:	08c9      	lsrs	r1, r1, #3
 8000d54:	4301      	orrs	r1, r0
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	e026      	b.n	8000da8 <__aeabi_dadd+0x250>
 8000d5a:	0029      	movs	r1, r5
 8000d5c:	4339      	orrs	r1, r7
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_dadd+0x20a>
 8000d60:	e091      	b.n	8000e86 <__aeabi_dadd+0x32e>
 8000d62:	1e51      	subs	r1, r2, #1
 8000d64:	2a01      	cmp	r2, #1
 8000d66:	d005      	beq.n	8000d74 <__aeabi_dadd+0x21c>
 8000d68:	4858      	ldr	r0, [pc, #352]	; (8000ecc <__aeabi_dadd+0x374>)
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dadd+0x218>
 8000d6e:	e18f      	b.n	8001090 <__aeabi_dadd+0x538>
 8000d70:	000a      	movs	r2, r1
 8000d72:	e7b8      	b.n	8000ce6 <__aeabi_dadd+0x18e>
 8000d74:	003d      	movs	r5, r7
 8000d76:	444d      	add	r5, r9
 8000d78:	454d      	cmp	r5, r9
 8000d7a:	4189      	sbcs	r1, r1
 8000d7c:	4463      	add	r3, ip
 8000d7e:	4698      	mov	r8, r3
 8000d80:	4249      	negs	r1, r1
 8000d82:	4488      	add	r8, r1
 8000d84:	4643      	mov	r3, r8
 8000d86:	2602      	movs	r6, #2
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	d500      	bpl.n	8000d8e <__aeabi_dadd+0x236>
 8000d8c:	e0eb      	b.n	8000f66 <__aeabi_dadd+0x40e>
 8000d8e:	3e01      	subs	r6, #1
 8000d90:	076b      	lsls	r3, r5, #29
 8000d92:	d000      	beq.n	8000d96 <__aeabi_dadd+0x23e>
 8000d94:	e75c      	b.n	8000c50 <__aeabi_dadd+0xf8>
 8000d96:	4643      	mov	r3, r8
 8000d98:	08e9      	lsrs	r1, r5, #3
 8000d9a:	075a      	lsls	r2, r3, #29
 8000d9c:	4311      	orrs	r1, r2
 8000d9e:	0032      	movs	r2, r6
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	484a      	ldr	r0, [pc, #296]	; (8000ecc <__aeabi_dadd+0x374>)
 8000da4:	4282      	cmp	r2, r0
 8000da6:	d021      	beq.n	8000dec <__aeabi_dadd+0x294>
 8000da8:	031b      	lsls	r3, r3, #12
 8000daa:	0552      	lsls	r2, r2, #21
 8000dac:	0b1b      	lsrs	r3, r3, #12
 8000dae:	0d52      	lsrs	r2, r2, #21
 8000db0:	e76c      	b.n	8000c8c <__aeabi_dadd+0x134>
 8000db2:	2300      	movs	r3, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	e769      	b.n	8000c8c <__aeabi_dadd+0x134>
 8000db8:	002a      	movs	r2, r5
 8000dba:	433a      	orrs	r2, r7
 8000dbc:	d069      	beq.n	8000e92 <__aeabi_dadd+0x33a>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	0758      	lsls	r0, r3, #29
 8000dc2:	08d1      	lsrs	r1, r2, #3
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	031b      	lsls	r3, r3, #12
 8000dca:	4308      	orrs	r0, r1
 8000dcc:	421a      	tst	r2, r3
 8000dce:	d007      	beq.n	8000de0 <__aeabi_dadd+0x288>
 8000dd0:	0029      	movs	r1, r5
 8000dd2:	08ed      	lsrs	r5, r5, #3
 8000dd4:	421d      	tst	r5, r3
 8000dd6:	d103      	bne.n	8000de0 <__aeabi_dadd+0x288>
 8000dd8:	002a      	movs	r2, r5
 8000dda:	08ff      	lsrs	r7, r7, #3
 8000ddc:	0748      	lsls	r0, r1, #29
 8000dde:	4338      	orrs	r0, r7
 8000de0:	0f43      	lsrs	r3, r0, #29
 8000de2:	00c1      	lsls	r1, r0, #3
 8000de4:	075b      	lsls	r3, r3, #29
 8000de6:	08c9      	lsrs	r1, r1, #3
 8000de8:	4319      	orrs	r1, r3
 8000dea:	0013      	movs	r3, r2
 8000dec:	000a      	movs	r2, r1
 8000dee:	431a      	orrs	r2, r3
 8000df0:	d100      	bne.n	8000df4 <__aeabi_dadd+0x29c>
 8000df2:	e213      	b.n	800121c <__aeabi_dadd+0x6c4>
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	0312      	lsls	r2, r2, #12
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	031b      	lsls	r3, r3, #12
 8000dfc:	4a33      	ldr	r2, [pc, #204]	; (8000ecc <__aeabi_dadd+0x374>)
 8000dfe:	0b1b      	lsrs	r3, r3, #12
 8000e00:	e744      	b.n	8000c8c <__aeabi_dadd+0x134>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d04b      	beq.n	8000e9e <__aeabi_dadd+0x346>
 8000e06:	1b8a      	subs	r2, r1, r6
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dadd+0x2b6>
 8000e0c:	e0e7      	b.n	8000fde <__aeabi_dadd+0x486>
 8000e0e:	482f      	ldr	r0, [pc, #188]	; (8000ecc <__aeabi_dadd+0x374>)
 8000e10:	4281      	cmp	r1, r0
 8000e12:	d100      	bne.n	8000e16 <__aeabi_dadd+0x2be>
 8000e14:	e195      	b.n	8001142 <__aeabi_dadd+0x5ea>
 8000e16:	2080      	movs	r0, #128	; 0x80
 8000e18:	0400      	lsls	r0, r0, #16
 8000e1a:	4303      	orrs	r3, r0
 8000e1c:	2a38      	cmp	r2, #56	; 0x38
 8000e1e:	dd00      	ble.n	8000e22 <__aeabi_dadd+0x2ca>
 8000e20:	e143      	b.n	80010aa <__aeabi_dadd+0x552>
 8000e22:	2a1f      	cmp	r2, #31
 8000e24:	dd00      	ble.n	8000e28 <__aeabi_dadd+0x2d0>
 8000e26:	e1db      	b.n	80011e0 <__aeabi_dadd+0x688>
 8000e28:	2020      	movs	r0, #32
 8000e2a:	001d      	movs	r5, r3
 8000e2c:	464e      	mov	r6, r9
 8000e2e:	1a80      	subs	r0, r0, r2
 8000e30:	4085      	lsls	r5, r0
 8000e32:	40d6      	lsrs	r6, r2
 8000e34:	4335      	orrs	r5, r6
 8000e36:	464e      	mov	r6, r9
 8000e38:	4086      	lsls	r6, r0
 8000e3a:	0030      	movs	r0, r6
 8000e3c:	40d3      	lsrs	r3, r2
 8000e3e:	1e46      	subs	r6, r0, #1
 8000e40:	41b0      	sbcs	r0, r6
 8000e42:	449c      	add	ip, r3
 8000e44:	4305      	orrs	r5, r0
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	42bd      	cmp	r5, r7
 8000e4a:	419b      	sbcs	r3, r3
 8000e4c:	425b      	negs	r3, r3
 8000e4e:	4463      	add	r3, ip
 8000e50:	4698      	mov	r8, r3
 8000e52:	000e      	movs	r6, r1
 8000e54:	e07f      	b.n	8000f56 <__aeabi_dadd+0x3fe>
 8000e56:	4a1e      	ldr	r2, [pc, #120]	; (8000ed0 <__aeabi_dadd+0x378>)
 8000e58:	1a76      	subs	r6, r6, r1
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	4698      	mov	r8, r3
 8000e5e:	e6f5      	b.n	8000c4c <__aeabi_dadd+0xf4>
 8000e60:	0028      	movs	r0, r5
 8000e62:	f001 fd61 	bl	8002928 <__clzsi2>
 8000e66:	0001      	movs	r1, r0
 8000e68:	3118      	adds	r1, #24
 8000e6a:	291f      	cmp	r1, #31
 8000e6c:	dc00      	bgt.n	8000e70 <__aeabi_dadd+0x318>
 8000e6e:	e6cf      	b.n	8000c10 <__aeabi_dadd+0xb8>
 8000e70:	002b      	movs	r3, r5
 8000e72:	3808      	subs	r0, #8
 8000e74:	4083      	lsls	r3, r0
 8000e76:	2500      	movs	r5, #0
 8000e78:	e6d2      	b.n	8000c20 <__aeabi_dadd+0xc8>
 8000e7a:	4662      	mov	r2, ip
 8000e7c:	433a      	orrs	r2, r7
 8000e7e:	0011      	movs	r1, r2
 8000e80:	1e4f      	subs	r7, r1, #1
 8000e82:	41b9      	sbcs	r1, r7
 8000e84:	e6ac      	b.n	8000be0 <__aeabi_dadd+0x88>
 8000e86:	4649      	mov	r1, r9
 8000e88:	0758      	lsls	r0, r3, #29
 8000e8a:	08c9      	lsrs	r1, r1, #3
 8000e8c:	4301      	orrs	r1, r0
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	e787      	b.n	8000da2 <__aeabi_dadd+0x24a>
 8000e92:	4649      	mov	r1, r9
 8000e94:	075a      	lsls	r2, r3, #29
 8000e96:	08c9      	lsrs	r1, r1, #3
 8000e98:	4311      	orrs	r1, r2
 8000e9a:	08db      	lsrs	r3, r3, #3
 8000e9c:	e7a6      	b.n	8000dec <__aeabi_dadd+0x294>
 8000e9e:	490d      	ldr	r1, [pc, #52]	; (8000ed4 <__aeabi_dadd+0x37c>)
 8000ea0:	1c70      	adds	r0, r6, #1
 8000ea2:	4208      	tst	r0, r1
 8000ea4:	d000      	beq.n	8000ea8 <__aeabi_dadd+0x350>
 8000ea6:	e0bb      	b.n	8001020 <__aeabi_dadd+0x4c8>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d000      	beq.n	8000eae <__aeabi_dadd+0x356>
 8000eac:	e114      	b.n	80010d8 <__aeabi_dadd+0x580>
 8000eae:	4649      	mov	r1, r9
 8000eb0:	4319      	orrs	r1, r3
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_dadd+0x35e>
 8000eb4:	e175      	b.n	80011a2 <__aeabi_dadd+0x64a>
 8000eb6:	0029      	movs	r1, r5
 8000eb8:	4339      	orrs	r1, r7
 8000eba:	d000      	beq.n	8000ebe <__aeabi_dadd+0x366>
 8000ebc:	e17e      	b.n	80011bc <__aeabi_dadd+0x664>
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	0758      	lsls	r0, r3, #29
 8000ec2:	08c9      	lsrs	r1, r1, #3
 8000ec4:	4301      	orrs	r1, r0
 8000ec6:	08db      	lsrs	r3, r3, #3
 8000ec8:	e76e      	b.n	8000da8 <__aeabi_dadd+0x250>
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	000007ff 	.word	0x000007ff
 8000ed0:	ff7fffff 	.word	0xff7fffff
 8000ed4:	000007fe 	.word	0x000007fe
 8000ed8:	4649      	mov	r1, r9
 8000eda:	1bcd      	subs	r5, r1, r7
 8000edc:	4661      	mov	r1, ip
 8000ede:	1a58      	subs	r0, r3, r1
 8000ee0:	45a9      	cmp	r9, r5
 8000ee2:	4189      	sbcs	r1, r1
 8000ee4:	4249      	negs	r1, r1
 8000ee6:	4688      	mov	r8, r1
 8000ee8:	0001      	movs	r1, r0
 8000eea:	4640      	mov	r0, r8
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	4688      	mov	r8, r1
 8000ef0:	0209      	lsls	r1, r1, #8
 8000ef2:	d500      	bpl.n	8000ef6 <__aeabi_dadd+0x39e>
 8000ef4:	e0a6      	b.n	8001044 <__aeabi_dadd+0x4ec>
 8000ef6:	4641      	mov	r1, r8
 8000ef8:	4329      	orrs	r1, r5
 8000efa:	d000      	beq.n	8000efe <__aeabi_dadd+0x3a6>
 8000efc:	e67f      	b.n	8000bfe <__aeabi_dadd+0xa6>
 8000efe:	2300      	movs	r3, #0
 8000f00:	2400      	movs	r4, #0
 8000f02:	e751      	b.n	8000da8 <__aeabi_dadd+0x250>
 8000f04:	4cc7      	ldr	r4, [pc, #796]	; (8001224 <__aeabi_dadd+0x6cc>)
 8000f06:	42a1      	cmp	r1, r4
 8000f08:	d100      	bne.n	8000f0c <__aeabi_dadd+0x3b4>
 8000f0a:	e0c7      	b.n	800109c <__aeabi_dadd+0x544>
 8000f0c:	2480      	movs	r4, #128	; 0x80
 8000f0e:	0424      	lsls	r4, r4, #16
 8000f10:	4323      	orrs	r3, r4
 8000f12:	2a38      	cmp	r2, #56	; 0x38
 8000f14:	dc54      	bgt.n	8000fc0 <__aeabi_dadd+0x468>
 8000f16:	2a1f      	cmp	r2, #31
 8000f18:	dd00      	ble.n	8000f1c <__aeabi_dadd+0x3c4>
 8000f1a:	e0cc      	b.n	80010b6 <__aeabi_dadd+0x55e>
 8000f1c:	2420      	movs	r4, #32
 8000f1e:	4648      	mov	r0, r9
 8000f20:	1aa4      	subs	r4, r4, r2
 8000f22:	001d      	movs	r5, r3
 8000f24:	464e      	mov	r6, r9
 8000f26:	40a0      	lsls	r0, r4
 8000f28:	40d6      	lsrs	r6, r2
 8000f2a:	40a5      	lsls	r5, r4
 8000f2c:	0004      	movs	r4, r0
 8000f2e:	40d3      	lsrs	r3, r2
 8000f30:	4662      	mov	r2, ip
 8000f32:	4335      	orrs	r5, r6
 8000f34:	1e66      	subs	r6, r4, #1
 8000f36:	41b4      	sbcs	r4, r6
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	4325      	orrs	r5, r4
 8000f3e:	e044      	b.n	8000fca <__aeabi_dadd+0x472>
 8000f40:	4662      	mov	r2, ip
 8000f42:	433a      	orrs	r2, r7
 8000f44:	0015      	movs	r5, r2
 8000f46:	1e6f      	subs	r7, r5, #1
 8000f48:	41bd      	sbcs	r5, r7
 8000f4a:	444d      	add	r5, r9
 8000f4c:	454d      	cmp	r5, r9
 8000f4e:	4189      	sbcs	r1, r1
 8000f50:	4249      	negs	r1, r1
 8000f52:	4688      	mov	r8, r1
 8000f54:	4498      	add	r8, r3
 8000f56:	4643      	mov	r3, r8
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	d400      	bmi.n	8000f5e <__aeabi_dadd+0x406>
 8000f5c:	e718      	b.n	8000d90 <__aeabi_dadd+0x238>
 8000f5e:	4bb1      	ldr	r3, [pc, #708]	; (8001224 <__aeabi_dadd+0x6cc>)
 8000f60:	3601      	adds	r6, #1
 8000f62:	429e      	cmp	r6, r3
 8000f64:	d049      	beq.n	8000ffa <__aeabi_dadd+0x4a2>
 8000f66:	4642      	mov	r2, r8
 8000f68:	4baf      	ldr	r3, [pc, #700]	; (8001228 <__aeabi_dadd+0x6d0>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	0013      	movs	r3, r2
 8000f70:	086a      	lsrs	r2, r5, #1
 8000f72:	400d      	ands	r5, r1
 8000f74:	4315      	orrs	r5, r2
 8000f76:	07d9      	lsls	r1, r3, #31
 8000f78:	085b      	lsrs	r3, r3, #1
 8000f7a:	4698      	mov	r8, r3
 8000f7c:	430d      	orrs	r5, r1
 8000f7e:	e665      	b.n	8000c4c <__aeabi_dadd+0xf4>
 8000f80:	0018      	movs	r0, r3
 8000f82:	3e1f      	subs	r6, #31
 8000f84:	40f0      	lsrs	r0, r6
 8000f86:	2a20      	cmp	r2, #32
 8000f88:	d003      	beq.n	8000f92 <__aeabi_dadd+0x43a>
 8000f8a:	2140      	movs	r1, #64	; 0x40
 8000f8c:	1a8a      	subs	r2, r1, r2
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	431d      	orrs	r5, r3
 8000f92:	1e69      	subs	r1, r5, #1
 8000f94:	418d      	sbcs	r5, r1
 8000f96:	2300      	movs	r3, #0
 8000f98:	2600      	movs	r6, #0
 8000f9a:	4698      	mov	r8, r3
 8000f9c:	4305      	orrs	r5, r0
 8000f9e:	e6f7      	b.n	8000d90 <__aeabi_dadd+0x238>
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	4665      	mov	r5, ip
 8000fa4:	3920      	subs	r1, #32
 8000fa6:	40cd      	lsrs	r5, r1
 8000fa8:	2a20      	cmp	r2, #32
 8000faa:	d004      	beq.n	8000fb6 <__aeabi_dadd+0x45e>
 8000fac:	2040      	movs	r0, #64	; 0x40
 8000fae:	4661      	mov	r1, ip
 8000fb0:	1a82      	subs	r2, r0, r2
 8000fb2:	4091      	lsls	r1, r2
 8000fb4:	430f      	orrs	r7, r1
 8000fb6:	0039      	movs	r1, r7
 8000fb8:	1e4f      	subs	r7, r1, #1
 8000fba:	41b9      	sbcs	r1, r7
 8000fbc:	4329      	orrs	r1, r5
 8000fbe:	e60f      	b.n	8000be0 <__aeabi_dadd+0x88>
 8000fc0:	464a      	mov	r2, r9
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	001d      	movs	r5, r3
 8000fc6:	1e6b      	subs	r3, r5, #1
 8000fc8:	419d      	sbcs	r5, r3
 8000fca:	1b7d      	subs	r5, r7, r5
 8000fcc:	42af      	cmp	r7, r5
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	4662      	mov	r2, ip
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	4698      	mov	r8, r3
 8000fd8:	4654      	mov	r4, sl
 8000fda:	000e      	movs	r6, r1
 8000fdc:	e607      	b.n	8000bee <__aeabi_dadd+0x96>
 8000fde:	4648      	mov	r0, r9
 8000fe0:	4318      	orrs	r0, r3
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dadd+0x48e>
 8000fe4:	e0b3      	b.n	800114e <__aeabi_dadd+0x5f6>
 8000fe6:	1e50      	subs	r0, r2, #1
 8000fe8:	2a01      	cmp	r2, #1
 8000fea:	d100      	bne.n	8000fee <__aeabi_dadd+0x496>
 8000fec:	e10d      	b.n	800120a <__aeabi_dadd+0x6b2>
 8000fee:	4d8d      	ldr	r5, [pc, #564]	; (8001224 <__aeabi_dadd+0x6cc>)
 8000ff0:	42aa      	cmp	r2, r5
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dadd+0x49e>
 8000ff4:	e0a5      	b.n	8001142 <__aeabi_dadd+0x5ea>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	e710      	b.n	8000e1c <__aeabi_dadd+0x2c4>
 8000ffa:	0032      	movs	r2, r6
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	e644      	b.n	8000c8c <__aeabi_dadd+0x134>
 8001002:	2120      	movs	r1, #32
 8001004:	0038      	movs	r0, r7
 8001006:	1a89      	subs	r1, r1, r2
 8001008:	4665      	mov	r5, ip
 800100a:	408f      	lsls	r7, r1
 800100c:	408d      	lsls	r5, r1
 800100e:	40d0      	lsrs	r0, r2
 8001010:	1e79      	subs	r1, r7, #1
 8001012:	418f      	sbcs	r7, r1
 8001014:	4305      	orrs	r5, r0
 8001016:	433d      	orrs	r5, r7
 8001018:	4667      	mov	r7, ip
 800101a:	40d7      	lsrs	r7, r2
 800101c:	19db      	adds	r3, r3, r7
 800101e:	e794      	b.n	8000f4a <__aeabi_dadd+0x3f2>
 8001020:	4a80      	ldr	r2, [pc, #512]	; (8001224 <__aeabi_dadd+0x6cc>)
 8001022:	4290      	cmp	r0, r2
 8001024:	d100      	bne.n	8001028 <__aeabi_dadd+0x4d0>
 8001026:	e0ec      	b.n	8001202 <__aeabi_dadd+0x6aa>
 8001028:	0039      	movs	r1, r7
 800102a:	4449      	add	r1, r9
 800102c:	4549      	cmp	r1, r9
 800102e:	4192      	sbcs	r2, r2
 8001030:	4463      	add	r3, ip
 8001032:	4252      	negs	r2, r2
 8001034:	189b      	adds	r3, r3, r2
 8001036:	07dd      	lsls	r5, r3, #31
 8001038:	0849      	lsrs	r1, r1, #1
 800103a:	085b      	lsrs	r3, r3, #1
 800103c:	4698      	mov	r8, r3
 800103e:	0006      	movs	r6, r0
 8001040:	430d      	orrs	r5, r1
 8001042:	e6a5      	b.n	8000d90 <__aeabi_dadd+0x238>
 8001044:	464a      	mov	r2, r9
 8001046:	1abd      	subs	r5, r7, r2
 8001048:	42af      	cmp	r7, r5
 800104a:	4189      	sbcs	r1, r1
 800104c:	4662      	mov	r2, ip
 800104e:	4249      	negs	r1, r1
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	1a5b      	subs	r3, r3, r1
 8001054:	4698      	mov	r8, r3
 8001056:	4654      	mov	r4, sl
 8001058:	e5d1      	b.n	8000bfe <__aeabi_dadd+0xa6>
 800105a:	076c      	lsls	r4, r5, #29
 800105c:	08f9      	lsrs	r1, r7, #3
 800105e:	4321      	orrs	r1, r4
 8001060:	08eb      	lsrs	r3, r5, #3
 8001062:	0004      	movs	r4, r0
 8001064:	e69d      	b.n	8000da2 <__aeabi_dadd+0x24a>
 8001066:	464a      	mov	r2, r9
 8001068:	431a      	orrs	r2, r3
 800106a:	d175      	bne.n	8001158 <__aeabi_dadd+0x600>
 800106c:	4661      	mov	r1, ip
 800106e:	4339      	orrs	r1, r7
 8001070:	d114      	bne.n	800109c <__aeabi_dadd+0x544>
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	2400      	movs	r4, #0
 8001076:	031b      	lsls	r3, r3, #12
 8001078:	e6bc      	b.n	8000df4 <__aeabi_dadd+0x29c>
 800107a:	464a      	mov	r2, r9
 800107c:	1bd5      	subs	r5, r2, r7
 800107e:	45a9      	cmp	r9, r5
 8001080:	4189      	sbcs	r1, r1
 8001082:	4662      	mov	r2, ip
 8001084:	4249      	negs	r1, r1
 8001086:	1a9b      	subs	r3, r3, r2
 8001088:	1a5b      	subs	r3, r3, r1
 800108a:	4698      	mov	r8, r3
 800108c:	2601      	movs	r6, #1
 800108e:	e5ae      	b.n	8000bee <__aeabi_dadd+0x96>
 8001090:	464a      	mov	r2, r9
 8001092:	08d1      	lsrs	r1, r2, #3
 8001094:	075a      	lsls	r2, r3, #29
 8001096:	4311      	orrs	r1, r2
 8001098:	08db      	lsrs	r3, r3, #3
 800109a:	e6a7      	b.n	8000dec <__aeabi_dadd+0x294>
 800109c:	4663      	mov	r3, ip
 800109e:	08f9      	lsrs	r1, r7, #3
 80010a0:	075a      	lsls	r2, r3, #29
 80010a2:	4654      	mov	r4, sl
 80010a4:	4311      	orrs	r1, r2
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	e6a0      	b.n	8000dec <__aeabi_dadd+0x294>
 80010aa:	464a      	mov	r2, r9
 80010ac:	4313      	orrs	r3, r2
 80010ae:	001d      	movs	r5, r3
 80010b0:	1e6b      	subs	r3, r5, #1
 80010b2:	419d      	sbcs	r5, r3
 80010b4:	e6c7      	b.n	8000e46 <__aeabi_dadd+0x2ee>
 80010b6:	0014      	movs	r4, r2
 80010b8:	001e      	movs	r6, r3
 80010ba:	3c20      	subs	r4, #32
 80010bc:	40e6      	lsrs	r6, r4
 80010be:	2a20      	cmp	r2, #32
 80010c0:	d005      	beq.n	80010ce <__aeabi_dadd+0x576>
 80010c2:	2440      	movs	r4, #64	; 0x40
 80010c4:	1aa2      	subs	r2, r4, r2
 80010c6:	4093      	lsls	r3, r2
 80010c8:	464a      	mov	r2, r9
 80010ca:	431a      	orrs	r2, r3
 80010cc:	4691      	mov	r9, r2
 80010ce:	464d      	mov	r5, r9
 80010d0:	1e6b      	subs	r3, r5, #1
 80010d2:	419d      	sbcs	r5, r3
 80010d4:	4335      	orrs	r5, r6
 80010d6:	e778      	b.n	8000fca <__aeabi_dadd+0x472>
 80010d8:	464a      	mov	r2, r9
 80010da:	431a      	orrs	r2, r3
 80010dc:	d000      	beq.n	80010e0 <__aeabi_dadd+0x588>
 80010de:	e66b      	b.n	8000db8 <__aeabi_dadd+0x260>
 80010e0:	076b      	lsls	r3, r5, #29
 80010e2:	08f9      	lsrs	r1, r7, #3
 80010e4:	4319      	orrs	r1, r3
 80010e6:	08eb      	lsrs	r3, r5, #3
 80010e8:	e680      	b.n	8000dec <__aeabi_dadd+0x294>
 80010ea:	4661      	mov	r1, ip
 80010ec:	4339      	orrs	r1, r7
 80010ee:	d054      	beq.n	800119a <__aeabi_dadd+0x642>
 80010f0:	4663      	mov	r3, ip
 80010f2:	08f9      	lsrs	r1, r7, #3
 80010f4:	075c      	lsls	r4, r3, #29
 80010f6:	4321      	orrs	r1, r4
 80010f8:	08db      	lsrs	r3, r3, #3
 80010fa:	0004      	movs	r4, r0
 80010fc:	e654      	b.n	8000da8 <__aeabi_dadd+0x250>
 80010fe:	464a      	mov	r2, r9
 8001100:	1abd      	subs	r5, r7, r2
 8001102:	42af      	cmp	r7, r5
 8001104:	4189      	sbcs	r1, r1
 8001106:	4662      	mov	r2, ip
 8001108:	4249      	negs	r1, r1
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	1a5b      	subs	r3, r3, r1
 800110e:	4698      	mov	r8, r3
 8001110:	0004      	movs	r4, r0
 8001112:	2601      	movs	r6, #1
 8001114:	e56b      	b.n	8000bee <__aeabi_dadd+0x96>
 8001116:	464a      	mov	r2, r9
 8001118:	1bd5      	subs	r5, r2, r7
 800111a:	45a9      	cmp	r9, r5
 800111c:	4189      	sbcs	r1, r1
 800111e:	4662      	mov	r2, ip
 8001120:	4249      	negs	r1, r1
 8001122:	1a9a      	subs	r2, r3, r2
 8001124:	1a52      	subs	r2, r2, r1
 8001126:	4690      	mov	r8, r2
 8001128:	0212      	lsls	r2, r2, #8
 800112a:	d532      	bpl.n	8001192 <__aeabi_dadd+0x63a>
 800112c:	464a      	mov	r2, r9
 800112e:	1abd      	subs	r5, r7, r2
 8001130:	42af      	cmp	r7, r5
 8001132:	4189      	sbcs	r1, r1
 8001134:	4662      	mov	r2, ip
 8001136:	4249      	negs	r1, r1
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	1a5b      	subs	r3, r3, r1
 800113c:	4698      	mov	r8, r3
 800113e:	0004      	movs	r4, r0
 8001140:	e584      	b.n	8000c4c <__aeabi_dadd+0xf4>
 8001142:	4663      	mov	r3, ip
 8001144:	08f9      	lsrs	r1, r7, #3
 8001146:	075a      	lsls	r2, r3, #29
 8001148:	4311      	orrs	r1, r2
 800114a:	08db      	lsrs	r3, r3, #3
 800114c:	e64e      	b.n	8000dec <__aeabi_dadd+0x294>
 800114e:	08f9      	lsrs	r1, r7, #3
 8001150:	0768      	lsls	r0, r5, #29
 8001152:	4301      	orrs	r1, r0
 8001154:	08eb      	lsrs	r3, r5, #3
 8001156:	e624      	b.n	8000da2 <__aeabi_dadd+0x24a>
 8001158:	4662      	mov	r2, ip
 800115a:	433a      	orrs	r2, r7
 800115c:	d100      	bne.n	8001160 <__aeabi_dadd+0x608>
 800115e:	e698      	b.n	8000e92 <__aeabi_dadd+0x33a>
 8001160:	464a      	mov	r2, r9
 8001162:	08d1      	lsrs	r1, r2, #3
 8001164:	075a      	lsls	r2, r3, #29
 8001166:	4311      	orrs	r1, r2
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	031b      	lsls	r3, r3, #12
 800116e:	421a      	tst	r2, r3
 8001170:	d008      	beq.n	8001184 <__aeabi_dadd+0x62c>
 8001172:	4660      	mov	r0, ip
 8001174:	08c5      	lsrs	r5, r0, #3
 8001176:	421d      	tst	r5, r3
 8001178:	d104      	bne.n	8001184 <__aeabi_dadd+0x62c>
 800117a:	4654      	mov	r4, sl
 800117c:	002a      	movs	r2, r5
 800117e:	08f9      	lsrs	r1, r7, #3
 8001180:	0743      	lsls	r3, r0, #29
 8001182:	4319      	orrs	r1, r3
 8001184:	0f4b      	lsrs	r3, r1, #29
 8001186:	00c9      	lsls	r1, r1, #3
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	08c9      	lsrs	r1, r1, #3
 800118c:	4319      	orrs	r1, r3
 800118e:	0013      	movs	r3, r2
 8001190:	e62c      	b.n	8000dec <__aeabi_dadd+0x294>
 8001192:	4641      	mov	r1, r8
 8001194:	4329      	orrs	r1, r5
 8001196:	d000      	beq.n	800119a <__aeabi_dadd+0x642>
 8001198:	e5fa      	b.n	8000d90 <__aeabi_dadd+0x238>
 800119a:	2300      	movs	r3, #0
 800119c:	000a      	movs	r2, r1
 800119e:	2400      	movs	r4, #0
 80011a0:	e602      	b.n	8000da8 <__aeabi_dadd+0x250>
 80011a2:	076b      	lsls	r3, r5, #29
 80011a4:	08f9      	lsrs	r1, r7, #3
 80011a6:	4319      	orrs	r1, r3
 80011a8:	08eb      	lsrs	r3, r5, #3
 80011aa:	e5fd      	b.n	8000da8 <__aeabi_dadd+0x250>
 80011ac:	4663      	mov	r3, ip
 80011ae:	08f9      	lsrs	r1, r7, #3
 80011b0:	075b      	lsls	r3, r3, #29
 80011b2:	4319      	orrs	r1, r3
 80011b4:	4663      	mov	r3, ip
 80011b6:	0004      	movs	r4, r0
 80011b8:	08db      	lsrs	r3, r3, #3
 80011ba:	e617      	b.n	8000dec <__aeabi_dadd+0x294>
 80011bc:	003d      	movs	r5, r7
 80011be:	444d      	add	r5, r9
 80011c0:	4463      	add	r3, ip
 80011c2:	454d      	cmp	r5, r9
 80011c4:	4189      	sbcs	r1, r1
 80011c6:	4698      	mov	r8, r3
 80011c8:	4249      	negs	r1, r1
 80011ca:	4488      	add	r8, r1
 80011cc:	4643      	mov	r3, r8
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	d400      	bmi.n	80011d4 <__aeabi_dadd+0x67c>
 80011d2:	e5dd      	b.n	8000d90 <__aeabi_dadd+0x238>
 80011d4:	4642      	mov	r2, r8
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <__aeabi_dadd+0x6d0>)
 80011d8:	2601      	movs	r6, #1
 80011da:	401a      	ands	r2, r3
 80011dc:	4690      	mov	r8, r2
 80011de:	e5d7      	b.n	8000d90 <__aeabi_dadd+0x238>
 80011e0:	0010      	movs	r0, r2
 80011e2:	001e      	movs	r6, r3
 80011e4:	3820      	subs	r0, #32
 80011e6:	40c6      	lsrs	r6, r0
 80011e8:	2a20      	cmp	r2, #32
 80011ea:	d005      	beq.n	80011f8 <__aeabi_dadd+0x6a0>
 80011ec:	2040      	movs	r0, #64	; 0x40
 80011ee:	1a82      	subs	r2, r0, r2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	464a      	mov	r2, r9
 80011f4:	431a      	orrs	r2, r3
 80011f6:	4691      	mov	r9, r2
 80011f8:	464d      	mov	r5, r9
 80011fa:	1e6b      	subs	r3, r5, #1
 80011fc:	419d      	sbcs	r5, r3
 80011fe:	4335      	orrs	r5, r6
 8001200:	e621      	b.n	8000e46 <__aeabi_dadd+0x2ee>
 8001202:	0002      	movs	r2, r0
 8001204:	2300      	movs	r3, #0
 8001206:	2100      	movs	r1, #0
 8001208:	e540      	b.n	8000c8c <__aeabi_dadd+0x134>
 800120a:	464a      	mov	r2, r9
 800120c:	19d5      	adds	r5, r2, r7
 800120e:	42bd      	cmp	r5, r7
 8001210:	4189      	sbcs	r1, r1
 8001212:	4463      	add	r3, ip
 8001214:	4698      	mov	r8, r3
 8001216:	4249      	negs	r1, r1
 8001218:	4488      	add	r8, r1
 800121a:	e5b3      	b.n	8000d84 <__aeabi_dadd+0x22c>
 800121c:	2100      	movs	r1, #0
 800121e:	4a01      	ldr	r2, [pc, #4]	; (8001224 <__aeabi_dadd+0x6cc>)
 8001220:	000b      	movs	r3, r1
 8001222:	e533      	b.n	8000c8c <__aeabi_dadd+0x134>
 8001224:	000007ff 	.word	0x000007ff
 8001228:	ff7fffff 	.word	0xff7fffff

0800122c <__aeabi_ddiv>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	4657      	mov	r7, sl
 8001230:	464e      	mov	r6, r9
 8001232:	4645      	mov	r5, r8
 8001234:	46de      	mov	lr, fp
 8001236:	b5e0      	push	{r5, r6, r7, lr}
 8001238:	4681      	mov	r9, r0
 800123a:	0005      	movs	r5, r0
 800123c:	030c      	lsls	r4, r1, #12
 800123e:	0048      	lsls	r0, r1, #1
 8001240:	4692      	mov	sl, r2
 8001242:	001f      	movs	r7, r3
 8001244:	b085      	sub	sp, #20
 8001246:	0b24      	lsrs	r4, r4, #12
 8001248:	0d40      	lsrs	r0, r0, #21
 800124a:	0fce      	lsrs	r6, r1, #31
 800124c:	2800      	cmp	r0, #0
 800124e:	d059      	beq.n	8001304 <__aeabi_ddiv+0xd8>
 8001250:	4b87      	ldr	r3, [pc, #540]	; (8001470 <__aeabi_ddiv+0x244>)
 8001252:	4298      	cmp	r0, r3
 8001254:	d100      	bne.n	8001258 <__aeabi_ddiv+0x2c>
 8001256:	e098      	b.n	800138a <__aeabi_ddiv+0x15e>
 8001258:	0f6b      	lsrs	r3, r5, #29
 800125a:	00e4      	lsls	r4, r4, #3
 800125c:	431c      	orrs	r4, r3
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	041b      	lsls	r3, r3, #16
 8001262:	4323      	orrs	r3, r4
 8001264:	4698      	mov	r8, r3
 8001266:	4b83      	ldr	r3, [pc, #524]	; (8001474 <__aeabi_ddiv+0x248>)
 8001268:	00ed      	lsls	r5, r5, #3
 800126a:	469b      	mov	fp, r3
 800126c:	2300      	movs	r3, #0
 800126e:	4699      	mov	r9, r3
 8001270:	4483      	add	fp, r0
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	033c      	lsls	r4, r7, #12
 8001276:	007b      	lsls	r3, r7, #1
 8001278:	4650      	mov	r0, sl
 800127a:	0b24      	lsrs	r4, r4, #12
 800127c:	0d5b      	lsrs	r3, r3, #21
 800127e:	0fff      	lsrs	r7, r7, #31
 8001280:	2b00      	cmp	r3, #0
 8001282:	d067      	beq.n	8001354 <__aeabi_ddiv+0x128>
 8001284:	4a7a      	ldr	r2, [pc, #488]	; (8001470 <__aeabi_ddiv+0x244>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d018      	beq.n	80012bc <__aeabi_ddiv+0x90>
 800128a:	497a      	ldr	r1, [pc, #488]	; (8001474 <__aeabi_ddiv+0x248>)
 800128c:	0f42      	lsrs	r2, r0, #29
 800128e:	468c      	mov	ip, r1
 8001290:	00e4      	lsls	r4, r4, #3
 8001292:	4659      	mov	r1, fp
 8001294:	4314      	orrs	r4, r2
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4463      	add	r3, ip
 800129a:	0412      	lsls	r2, r2, #16
 800129c:	1acb      	subs	r3, r1, r3
 800129e:	4314      	orrs	r4, r2
 80012a0:	469b      	mov	fp, r3
 80012a2:	00c2      	lsls	r2, r0, #3
 80012a4:	2000      	movs	r0, #0
 80012a6:	0033      	movs	r3, r6
 80012a8:	407b      	eors	r3, r7
 80012aa:	469a      	mov	sl, r3
 80012ac:	464b      	mov	r3, r9
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	d900      	bls.n	80012b4 <__aeabi_ddiv+0x88>
 80012b2:	e0ef      	b.n	8001494 <__aeabi_ddiv+0x268>
 80012b4:	4970      	ldr	r1, [pc, #448]	; (8001478 <__aeabi_ddiv+0x24c>)
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	58cb      	ldr	r3, [r1, r3]
 80012ba:	469f      	mov	pc, r3
 80012bc:	4b6f      	ldr	r3, [pc, #444]	; (800147c <__aeabi_ddiv+0x250>)
 80012be:	4652      	mov	r2, sl
 80012c0:	469c      	mov	ip, r3
 80012c2:	4322      	orrs	r2, r4
 80012c4:	44e3      	add	fp, ip
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0xa0>
 80012ca:	e095      	b.n	80013f8 <__aeabi_ddiv+0x1cc>
 80012cc:	4649      	mov	r1, r9
 80012ce:	2302      	movs	r3, #2
 80012d0:	4319      	orrs	r1, r3
 80012d2:	4689      	mov	r9, r1
 80012d4:	2400      	movs	r4, #0
 80012d6:	2002      	movs	r0, #2
 80012d8:	e7e5      	b.n	80012a6 <__aeabi_ddiv+0x7a>
 80012da:	2300      	movs	r3, #0
 80012dc:	2400      	movs	r4, #0
 80012de:	2500      	movs	r5, #0
 80012e0:	4652      	mov	r2, sl
 80012e2:	051b      	lsls	r3, r3, #20
 80012e4:	4323      	orrs	r3, r4
 80012e6:	07d2      	lsls	r2, r2, #31
 80012e8:	4313      	orrs	r3, r2
 80012ea:	0028      	movs	r0, r5
 80012ec:	0019      	movs	r1, r3
 80012ee:	b005      	add	sp, #20
 80012f0:	bcf0      	pop	{r4, r5, r6, r7}
 80012f2:	46bb      	mov	fp, r7
 80012f4:	46b2      	mov	sl, r6
 80012f6:	46a9      	mov	r9, r5
 80012f8:	46a0      	mov	r8, r4
 80012fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fc:	2400      	movs	r4, #0
 80012fe:	2500      	movs	r5, #0
 8001300:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <__aeabi_ddiv+0x244>)
 8001302:	e7ed      	b.n	80012e0 <__aeabi_ddiv+0xb4>
 8001304:	464b      	mov	r3, r9
 8001306:	4323      	orrs	r3, r4
 8001308:	4698      	mov	r8, r3
 800130a:	d100      	bne.n	800130e <__aeabi_ddiv+0xe2>
 800130c:	e089      	b.n	8001422 <__aeabi_ddiv+0x1f6>
 800130e:	2c00      	cmp	r4, #0
 8001310:	d100      	bne.n	8001314 <__aeabi_ddiv+0xe8>
 8001312:	e1e0      	b.n	80016d6 <__aeabi_ddiv+0x4aa>
 8001314:	0020      	movs	r0, r4
 8001316:	f001 fb07 	bl	8002928 <__clzsi2>
 800131a:	0001      	movs	r1, r0
 800131c:	0002      	movs	r2, r0
 800131e:	390b      	subs	r1, #11
 8001320:	231d      	movs	r3, #29
 8001322:	1a5b      	subs	r3, r3, r1
 8001324:	4649      	mov	r1, r9
 8001326:	0010      	movs	r0, r2
 8001328:	40d9      	lsrs	r1, r3
 800132a:	3808      	subs	r0, #8
 800132c:	4084      	lsls	r4, r0
 800132e:	000b      	movs	r3, r1
 8001330:	464d      	mov	r5, r9
 8001332:	4323      	orrs	r3, r4
 8001334:	4698      	mov	r8, r3
 8001336:	4085      	lsls	r5, r0
 8001338:	4851      	ldr	r0, [pc, #324]	; (8001480 <__aeabi_ddiv+0x254>)
 800133a:	033c      	lsls	r4, r7, #12
 800133c:	1a83      	subs	r3, r0, r2
 800133e:	469b      	mov	fp, r3
 8001340:	2300      	movs	r3, #0
 8001342:	4699      	mov	r9, r3
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	007b      	lsls	r3, r7, #1
 8001348:	4650      	mov	r0, sl
 800134a:	0b24      	lsrs	r4, r4, #12
 800134c:	0d5b      	lsrs	r3, r3, #21
 800134e:	0fff      	lsrs	r7, r7, #31
 8001350:	2b00      	cmp	r3, #0
 8001352:	d197      	bne.n	8001284 <__aeabi_ddiv+0x58>
 8001354:	4652      	mov	r2, sl
 8001356:	4322      	orrs	r2, r4
 8001358:	d055      	beq.n	8001406 <__aeabi_ddiv+0x1da>
 800135a:	2c00      	cmp	r4, #0
 800135c:	d100      	bne.n	8001360 <__aeabi_ddiv+0x134>
 800135e:	e1ca      	b.n	80016f6 <__aeabi_ddiv+0x4ca>
 8001360:	0020      	movs	r0, r4
 8001362:	f001 fae1 	bl	8002928 <__clzsi2>
 8001366:	0002      	movs	r2, r0
 8001368:	3a0b      	subs	r2, #11
 800136a:	231d      	movs	r3, #29
 800136c:	0001      	movs	r1, r0
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	4652      	mov	r2, sl
 8001372:	3908      	subs	r1, #8
 8001374:	40da      	lsrs	r2, r3
 8001376:	408c      	lsls	r4, r1
 8001378:	4314      	orrs	r4, r2
 800137a:	4652      	mov	r2, sl
 800137c:	408a      	lsls	r2, r1
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <__aeabi_ddiv+0x258>)
 8001380:	4458      	add	r0, fp
 8001382:	469b      	mov	fp, r3
 8001384:	4483      	add	fp, r0
 8001386:	2000      	movs	r0, #0
 8001388:	e78d      	b.n	80012a6 <__aeabi_ddiv+0x7a>
 800138a:	464b      	mov	r3, r9
 800138c:	4323      	orrs	r3, r4
 800138e:	4698      	mov	r8, r3
 8001390:	d140      	bne.n	8001414 <__aeabi_ddiv+0x1e8>
 8001392:	2308      	movs	r3, #8
 8001394:	4699      	mov	r9, r3
 8001396:	3b06      	subs	r3, #6
 8001398:	2500      	movs	r5, #0
 800139a:	4683      	mov	fp, r0
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	e769      	b.n	8001274 <__aeabi_ddiv+0x48>
 80013a0:	46b2      	mov	sl, r6
 80013a2:	9b00      	ldr	r3, [sp, #0]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d0a9      	beq.n	80012fc <__aeabi_ddiv+0xd0>
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d100      	bne.n	80013ae <__aeabi_ddiv+0x182>
 80013ac:	e211      	b.n	80017d2 <__aeabi_ddiv+0x5a6>
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d093      	beq.n	80012da <__aeabi_ddiv+0xae>
 80013b2:	4a35      	ldr	r2, [pc, #212]	; (8001488 <__aeabi_ddiv+0x25c>)
 80013b4:	445a      	add	r2, fp
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	dc00      	bgt.n	80013bc <__aeabi_ddiv+0x190>
 80013ba:	e13c      	b.n	8001636 <__aeabi_ddiv+0x40a>
 80013bc:	076b      	lsls	r3, r5, #29
 80013be:	d000      	beq.n	80013c2 <__aeabi_ddiv+0x196>
 80013c0:	e1a7      	b.n	8001712 <__aeabi_ddiv+0x4e6>
 80013c2:	08ed      	lsrs	r5, r5, #3
 80013c4:	4643      	mov	r3, r8
 80013c6:	01db      	lsls	r3, r3, #7
 80013c8:	d506      	bpl.n	80013d8 <__aeabi_ddiv+0x1ac>
 80013ca:	4642      	mov	r2, r8
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <__aeabi_ddiv+0x260>)
 80013ce:	401a      	ands	r2, r3
 80013d0:	4690      	mov	r8, r2
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	00d2      	lsls	r2, r2, #3
 80013d6:	445a      	add	r2, fp
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <__aeabi_ddiv+0x264>)
 80013da:	429a      	cmp	r2, r3
 80013dc:	dc8e      	bgt.n	80012fc <__aeabi_ddiv+0xd0>
 80013de:	4643      	mov	r3, r8
 80013e0:	0552      	lsls	r2, r2, #21
 80013e2:	0758      	lsls	r0, r3, #29
 80013e4:	025c      	lsls	r4, r3, #9
 80013e6:	4305      	orrs	r5, r0
 80013e8:	0b24      	lsrs	r4, r4, #12
 80013ea:	0d53      	lsrs	r3, r2, #21
 80013ec:	e778      	b.n	80012e0 <__aeabi_ddiv+0xb4>
 80013ee:	46ba      	mov	sl, r7
 80013f0:	46a0      	mov	r8, r4
 80013f2:	0015      	movs	r5, r2
 80013f4:	9000      	str	r0, [sp, #0]
 80013f6:	e7d4      	b.n	80013a2 <__aeabi_ddiv+0x176>
 80013f8:	464a      	mov	r2, r9
 80013fa:	2303      	movs	r3, #3
 80013fc:	431a      	orrs	r2, r3
 80013fe:	4691      	mov	r9, r2
 8001400:	2003      	movs	r0, #3
 8001402:	4652      	mov	r2, sl
 8001404:	e74f      	b.n	80012a6 <__aeabi_ddiv+0x7a>
 8001406:	4649      	mov	r1, r9
 8001408:	2301      	movs	r3, #1
 800140a:	4319      	orrs	r1, r3
 800140c:	4689      	mov	r9, r1
 800140e:	2400      	movs	r4, #0
 8001410:	2001      	movs	r0, #1
 8001412:	e748      	b.n	80012a6 <__aeabi_ddiv+0x7a>
 8001414:	230c      	movs	r3, #12
 8001416:	4699      	mov	r9, r3
 8001418:	3b09      	subs	r3, #9
 800141a:	46a0      	mov	r8, r4
 800141c:	4683      	mov	fp, r0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	e728      	b.n	8001274 <__aeabi_ddiv+0x48>
 8001422:	2304      	movs	r3, #4
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	3301      	adds	r3, #1
 800142c:	2500      	movs	r5, #0
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	e720      	b.n	8001274 <__aeabi_ddiv+0x48>
 8001432:	2300      	movs	r3, #0
 8001434:	2480      	movs	r4, #128	; 0x80
 8001436:	469a      	mov	sl, r3
 8001438:	2500      	movs	r5, #0
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <__aeabi_ddiv+0x244>)
 800143c:	0324      	lsls	r4, r4, #12
 800143e:	e74f      	b.n	80012e0 <__aeabi_ddiv+0xb4>
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	4641      	mov	r1, r8
 8001444:	031b      	lsls	r3, r3, #12
 8001446:	4219      	tst	r1, r3
 8001448:	d008      	beq.n	800145c <__aeabi_ddiv+0x230>
 800144a:	421c      	tst	r4, r3
 800144c:	d106      	bne.n	800145c <__aeabi_ddiv+0x230>
 800144e:	431c      	orrs	r4, r3
 8001450:	0324      	lsls	r4, r4, #12
 8001452:	46ba      	mov	sl, r7
 8001454:	0015      	movs	r5, r2
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <__aeabi_ddiv+0x244>)
 8001458:	0b24      	lsrs	r4, r4, #12
 800145a:	e741      	b.n	80012e0 <__aeabi_ddiv+0xb4>
 800145c:	2480      	movs	r4, #128	; 0x80
 800145e:	4643      	mov	r3, r8
 8001460:	0324      	lsls	r4, r4, #12
 8001462:	431c      	orrs	r4, r3
 8001464:	0324      	lsls	r4, r4, #12
 8001466:	46b2      	mov	sl, r6
 8001468:	4b01      	ldr	r3, [pc, #4]	; (8001470 <__aeabi_ddiv+0x244>)
 800146a:	0b24      	lsrs	r4, r4, #12
 800146c:	e738      	b.n	80012e0 <__aeabi_ddiv+0xb4>
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	000007ff 	.word	0x000007ff
 8001474:	fffffc01 	.word	0xfffffc01
 8001478:	0800d7d0 	.word	0x0800d7d0
 800147c:	fffff801 	.word	0xfffff801
 8001480:	fffffc0d 	.word	0xfffffc0d
 8001484:	000003f3 	.word	0x000003f3
 8001488:	000003ff 	.word	0x000003ff
 800148c:	feffffff 	.word	0xfeffffff
 8001490:	000007fe 	.word	0x000007fe
 8001494:	4544      	cmp	r4, r8
 8001496:	d200      	bcs.n	800149a <__aeabi_ddiv+0x26e>
 8001498:	e116      	b.n	80016c8 <__aeabi_ddiv+0x49c>
 800149a:	d100      	bne.n	800149e <__aeabi_ddiv+0x272>
 800149c:	e111      	b.n	80016c2 <__aeabi_ddiv+0x496>
 800149e:	2301      	movs	r3, #1
 80014a0:	425b      	negs	r3, r3
 80014a2:	469c      	mov	ip, r3
 80014a4:	002e      	movs	r6, r5
 80014a6:	4640      	mov	r0, r8
 80014a8:	2500      	movs	r5, #0
 80014aa:	44e3      	add	fp, ip
 80014ac:	0223      	lsls	r3, r4, #8
 80014ae:	0e14      	lsrs	r4, r2, #24
 80014b0:	431c      	orrs	r4, r3
 80014b2:	0c1b      	lsrs	r3, r3, #16
 80014b4:	4699      	mov	r9, r3
 80014b6:	0423      	lsls	r3, r4, #16
 80014b8:	0c1f      	lsrs	r7, r3, #16
 80014ba:	0212      	lsls	r2, r2, #8
 80014bc:	4649      	mov	r1, r9
 80014be:	9200      	str	r2, [sp, #0]
 80014c0:	9701      	str	r7, [sp, #4]
 80014c2:	f7fe fec3 	bl	800024c <__aeabi_uidivmod>
 80014c6:	0002      	movs	r2, r0
 80014c8:	437a      	muls	r2, r7
 80014ca:	040b      	lsls	r3, r1, #16
 80014cc:	0c31      	lsrs	r1, r6, #16
 80014ce:	4680      	mov	r8, r0
 80014d0:	4319      	orrs	r1, r3
 80014d2:	428a      	cmp	r2, r1
 80014d4:	d90b      	bls.n	80014ee <__aeabi_ddiv+0x2c2>
 80014d6:	2301      	movs	r3, #1
 80014d8:	425b      	negs	r3, r3
 80014da:	469c      	mov	ip, r3
 80014dc:	1909      	adds	r1, r1, r4
 80014de:	44e0      	add	r8, ip
 80014e0:	428c      	cmp	r4, r1
 80014e2:	d804      	bhi.n	80014ee <__aeabi_ddiv+0x2c2>
 80014e4:	428a      	cmp	r2, r1
 80014e6:	d902      	bls.n	80014ee <__aeabi_ddiv+0x2c2>
 80014e8:	1e83      	subs	r3, r0, #2
 80014ea:	4698      	mov	r8, r3
 80014ec:	1909      	adds	r1, r1, r4
 80014ee:	1a88      	subs	r0, r1, r2
 80014f0:	4649      	mov	r1, r9
 80014f2:	f7fe feab 	bl	800024c <__aeabi_uidivmod>
 80014f6:	0409      	lsls	r1, r1, #16
 80014f8:	468c      	mov	ip, r1
 80014fa:	0431      	lsls	r1, r6, #16
 80014fc:	4666      	mov	r6, ip
 80014fe:	9a01      	ldr	r2, [sp, #4]
 8001500:	0c09      	lsrs	r1, r1, #16
 8001502:	4342      	muls	r2, r0
 8001504:	0003      	movs	r3, r0
 8001506:	4331      	orrs	r1, r6
 8001508:	428a      	cmp	r2, r1
 800150a:	d904      	bls.n	8001516 <__aeabi_ddiv+0x2ea>
 800150c:	1909      	adds	r1, r1, r4
 800150e:	3b01      	subs	r3, #1
 8001510:	428c      	cmp	r4, r1
 8001512:	d800      	bhi.n	8001516 <__aeabi_ddiv+0x2ea>
 8001514:	e111      	b.n	800173a <__aeabi_ddiv+0x50e>
 8001516:	1a89      	subs	r1, r1, r2
 8001518:	4642      	mov	r2, r8
 800151a:	9e00      	ldr	r6, [sp, #0]
 800151c:	0412      	lsls	r2, r2, #16
 800151e:	431a      	orrs	r2, r3
 8001520:	0c33      	lsrs	r3, r6, #16
 8001522:	001f      	movs	r7, r3
 8001524:	0c10      	lsrs	r0, r2, #16
 8001526:	4690      	mov	r8, r2
 8001528:	9302      	str	r3, [sp, #8]
 800152a:	0413      	lsls	r3, r2, #16
 800152c:	0432      	lsls	r2, r6, #16
 800152e:	0c16      	lsrs	r6, r2, #16
 8001530:	0032      	movs	r2, r6
 8001532:	0c1b      	lsrs	r3, r3, #16
 8001534:	435a      	muls	r2, r3
 8001536:	9603      	str	r6, [sp, #12]
 8001538:	437b      	muls	r3, r7
 800153a:	4346      	muls	r6, r0
 800153c:	4378      	muls	r0, r7
 800153e:	0c17      	lsrs	r7, r2, #16
 8001540:	46bc      	mov	ip, r7
 8001542:	199b      	adds	r3, r3, r6
 8001544:	4463      	add	r3, ip
 8001546:	429e      	cmp	r6, r3
 8001548:	d903      	bls.n	8001552 <__aeabi_ddiv+0x326>
 800154a:	2680      	movs	r6, #128	; 0x80
 800154c:	0276      	lsls	r6, r6, #9
 800154e:	46b4      	mov	ip, r6
 8001550:	4460      	add	r0, ip
 8001552:	0c1e      	lsrs	r6, r3, #16
 8001554:	1830      	adds	r0, r6, r0
 8001556:	0416      	lsls	r6, r2, #16
 8001558:	041b      	lsls	r3, r3, #16
 800155a:	0c36      	lsrs	r6, r6, #16
 800155c:	199e      	adds	r6, r3, r6
 800155e:	4281      	cmp	r1, r0
 8001560:	d200      	bcs.n	8001564 <__aeabi_ddiv+0x338>
 8001562:	e09c      	b.n	800169e <__aeabi_ddiv+0x472>
 8001564:	d100      	bne.n	8001568 <__aeabi_ddiv+0x33c>
 8001566:	e097      	b.n	8001698 <__aeabi_ddiv+0x46c>
 8001568:	1bae      	subs	r6, r5, r6
 800156a:	1a09      	subs	r1, r1, r0
 800156c:	42b5      	cmp	r5, r6
 800156e:	4180      	sbcs	r0, r0
 8001570:	4240      	negs	r0, r0
 8001572:	1a08      	subs	r0, r1, r0
 8001574:	4284      	cmp	r4, r0
 8001576:	d100      	bne.n	800157a <__aeabi_ddiv+0x34e>
 8001578:	e111      	b.n	800179e <__aeabi_ddiv+0x572>
 800157a:	4649      	mov	r1, r9
 800157c:	f7fe fe66 	bl	800024c <__aeabi_uidivmod>
 8001580:	9a01      	ldr	r2, [sp, #4]
 8001582:	040b      	lsls	r3, r1, #16
 8001584:	4342      	muls	r2, r0
 8001586:	0c31      	lsrs	r1, r6, #16
 8001588:	0005      	movs	r5, r0
 800158a:	4319      	orrs	r1, r3
 800158c:	428a      	cmp	r2, r1
 800158e:	d907      	bls.n	80015a0 <__aeabi_ddiv+0x374>
 8001590:	1909      	adds	r1, r1, r4
 8001592:	3d01      	subs	r5, #1
 8001594:	428c      	cmp	r4, r1
 8001596:	d803      	bhi.n	80015a0 <__aeabi_ddiv+0x374>
 8001598:	428a      	cmp	r2, r1
 800159a:	d901      	bls.n	80015a0 <__aeabi_ddiv+0x374>
 800159c:	1e85      	subs	r5, r0, #2
 800159e:	1909      	adds	r1, r1, r4
 80015a0:	1a88      	subs	r0, r1, r2
 80015a2:	4649      	mov	r1, r9
 80015a4:	f7fe fe52 	bl	800024c <__aeabi_uidivmod>
 80015a8:	0409      	lsls	r1, r1, #16
 80015aa:	468c      	mov	ip, r1
 80015ac:	0431      	lsls	r1, r6, #16
 80015ae:	4666      	mov	r6, ip
 80015b0:	9a01      	ldr	r2, [sp, #4]
 80015b2:	0c09      	lsrs	r1, r1, #16
 80015b4:	4342      	muls	r2, r0
 80015b6:	0003      	movs	r3, r0
 80015b8:	4331      	orrs	r1, r6
 80015ba:	428a      	cmp	r2, r1
 80015bc:	d907      	bls.n	80015ce <__aeabi_ddiv+0x3a2>
 80015be:	1909      	adds	r1, r1, r4
 80015c0:	3b01      	subs	r3, #1
 80015c2:	428c      	cmp	r4, r1
 80015c4:	d803      	bhi.n	80015ce <__aeabi_ddiv+0x3a2>
 80015c6:	428a      	cmp	r2, r1
 80015c8:	d901      	bls.n	80015ce <__aeabi_ddiv+0x3a2>
 80015ca:	1e83      	subs	r3, r0, #2
 80015cc:	1909      	adds	r1, r1, r4
 80015ce:	9e03      	ldr	r6, [sp, #12]
 80015d0:	1a89      	subs	r1, r1, r2
 80015d2:	0032      	movs	r2, r6
 80015d4:	042d      	lsls	r5, r5, #16
 80015d6:	431d      	orrs	r5, r3
 80015d8:	9f02      	ldr	r7, [sp, #8]
 80015da:	042b      	lsls	r3, r5, #16
 80015dc:	0c1b      	lsrs	r3, r3, #16
 80015de:	435a      	muls	r2, r3
 80015e0:	437b      	muls	r3, r7
 80015e2:	469c      	mov	ip, r3
 80015e4:	0c28      	lsrs	r0, r5, #16
 80015e6:	4346      	muls	r6, r0
 80015e8:	0c13      	lsrs	r3, r2, #16
 80015ea:	44b4      	add	ip, r6
 80015ec:	4463      	add	r3, ip
 80015ee:	4378      	muls	r0, r7
 80015f0:	429e      	cmp	r6, r3
 80015f2:	d903      	bls.n	80015fc <__aeabi_ddiv+0x3d0>
 80015f4:	2680      	movs	r6, #128	; 0x80
 80015f6:	0276      	lsls	r6, r6, #9
 80015f8:	46b4      	mov	ip, r6
 80015fa:	4460      	add	r0, ip
 80015fc:	0c1e      	lsrs	r6, r3, #16
 80015fe:	0412      	lsls	r2, r2, #16
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	0c12      	lsrs	r2, r2, #16
 8001604:	1830      	adds	r0, r6, r0
 8001606:	189b      	adds	r3, r3, r2
 8001608:	4281      	cmp	r1, r0
 800160a:	d306      	bcc.n	800161a <__aeabi_ddiv+0x3ee>
 800160c:	d002      	beq.n	8001614 <__aeabi_ddiv+0x3e8>
 800160e:	2301      	movs	r3, #1
 8001610:	431d      	orrs	r5, r3
 8001612:	e6ce      	b.n	80013b2 <__aeabi_ddiv+0x186>
 8001614:	2b00      	cmp	r3, #0
 8001616:	d100      	bne.n	800161a <__aeabi_ddiv+0x3ee>
 8001618:	e6cb      	b.n	80013b2 <__aeabi_ddiv+0x186>
 800161a:	1861      	adds	r1, r4, r1
 800161c:	1e6e      	subs	r6, r5, #1
 800161e:	42a1      	cmp	r1, r4
 8001620:	d200      	bcs.n	8001624 <__aeabi_ddiv+0x3f8>
 8001622:	e0a4      	b.n	800176e <__aeabi_ddiv+0x542>
 8001624:	4281      	cmp	r1, r0
 8001626:	d200      	bcs.n	800162a <__aeabi_ddiv+0x3fe>
 8001628:	e0c9      	b.n	80017be <__aeabi_ddiv+0x592>
 800162a:	d100      	bne.n	800162e <__aeabi_ddiv+0x402>
 800162c:	e0d9      	b.n	80017e2 <__aeabi_ddiv+0x5b6>
 800162e:	0035      	movs	r5, r6
 8001630:	e7ed      	b.n	800160e <__aeabi_ddiv+0x3e2>
 8001632:	2501      	movs	r5, #1
 8001634:	426d      	negs	r5, r5
 8001636:	2101      	movs	r1, #1
 8001638:	1a89      	subs	r1, r1, r2
 800163a:	2938      	cmp	r1, #56	; 0x38
 800163c:	dd00      	ble.n	8001640 <__aeabi_ddiv+0x414>
 800163e:	e64c      	b.n	80012da <__aeabi_ddiv+0xae>
 8001640:	291f      	cmp	r1, #31
 8001642:	dc00      	bgt.n	8001646 <__aeabi_ddiv+0x41a>
 8001644:	e07f      	b.n	8001746 <__aeabi_ddiv+0x51a>
 8001646:	231f      	movs	r3, #31
 8001648:	425b      	negs	r3, r3
 800164a:	1a9a      	subs	r2, r3, r2
 800164c:	4643      	mov	r3, r8
 800164e:	40d3      	lsrs	r3, r2
 8001650:	2920      	cmp	r1, #32
 8001652:	d004      	beq.n	800165e <__aeabi_ddiv+0x432>
 8001654:	4644      	mov	r4, r8
 8001656:	4a65      	ldr	r2, [pc, #404]	; (80017ec <__aeabi_ddiv+0x5c0>)
 8001658:	445a      	add	r2, fp
 800165a:	4094      	lsls	r4, r2
 800165c:	4325      	orrs	r5, r4
 800165e:	1e6a      	subs	r2, r5, #1
 8001660:	4195      	sbcs	r5, r2
 8001662:	2207      	movs	r2, #7
 8001664:	432b      	orrs	r3, r5
 8001666:	0015      	movs	r5, r2
 8001668:	2400      	movs	r4, #0
 800166a:	401d      	ands	r5, r3
 800166c:	421a      	tst	r2, r3
 800166e:	d100      	bne.n	8001672 <__aeabi_ddiv+0x446>
 8001670:	e0a1      	b.n	80017b6 <__aeabi_ddiv+0x58a>
 8001672:	220f      	movs	r2, #15
 8001674:	2400      	movs	r4, #0
 8001676:	401a      	ands	r2, r3
 8001678:	2a04      	cmp	r2, #4
 800167a:	d100      	bne.n	800167e <__aeabi_ddiv+0x452>
 800167c:	e098      	b.n	80017b0 <__aeabi_ddiv+0x584>
 800167e:	1d1a      	adds	r2, r3, #4
 8001680:	429a      	cmp	r2, r3
 8001682:	419b      	sbcs	r3, r3
 8001684:	425b      	negs	r3, r3
 8001686:	18e4      	adds	r4, r4, r3
 8001688:	0013      	movs	r3, r2
 800168a:	0222      	lsls	r2, r4, #8
 800168c:	d400      	bmi.n	8001690 <__aeabi_ddiv+0x464>
 800168e:	e08f      	b.n	80017b0 <__aeabi_ddiv+0x584>
 8001690:	2301      	movs	r3, #1
 8001692:	2400      	movs	r4, #0
 8001694:	2500      	movs	r5, #0
 8001696:	e623      	b.n	80012e0 <__aeabi_ddiv+0xb4>
 8001698:	42b5      	cmp	r5, r6
 800169a:	d300      	bcc.n	800169e <__aeabi_ddiv+0x472>
 800169c:	e764      	b.n	8001568 <__aeabi_ddiv+0x33c>
 800169e:	4643      	mov	r3, r8
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	9b00      	ldr	r3, [sp, #0]
 80016a4:	469c      	mov	ip, r3
 80016a6:	4465      	add	r5, ip
 80016a8:	001f      	movs	r7, r3
 80016aa:	429d      	cmp	r5, r3
 80016ac:	419b      	sbcs	r3, r3
 80016ae:	425b      	negs	r3, r3
 80016b0:	191b      	adds	r3, r3, r4
 80016b2:	18c9      	adds	r1, r1, r3
 80016b4:	428c      	cmp	r4, r1
 80016b6:	d23a      	bcs.n	800172e <__aeabi_ddiv+0x502>
 80016b8:	4288      	cmp	r0, r1
 80016ba:	d863      	bhi.n	8001784 <__aeabi_ddiv+0x558>
 80016bc:	d060      	beq.n	8001780 <__aeabi_ddiv+0x554>
 80016be:	4690      	mov	r8, r2
 80016c0:	e752      	b.n	8001568 <__aeabi_ddiv+0x33c>
 80016c2:	42aa      	cmp	r2, r5
 80016c4:	d900      	bls.n	80016c8 <__aeabi_ddiv+0x49c>
 80016c6:	e6ea      	b.n	800149e <__aeabi_ddiv+0x272>
 80016c8:	4643      	mov	r3, r8
 80016ca:	07de      	lsls	r6, r3, #31
 80016cc:	0858      	lsrs	r0, r3, #1
 80016ce:	086b      	lsrs	r3, r5, #1
 80016d0:	431e      	orrs	r6, r3
 80016d2:	07ed      	lsls	r5, r5, #31
 80016d4:	e6ea      	b.n	80014ac <__aeabi_ddiv+0x280>
 80016d6:	4648      	mov	r0, r9
 80016d8:	f001 f926 	bl	8002928 <__clzsi2>
 80016dc:	0001      	movs	r1, r0
 80016de:	0002      	movs	r2, r0
 80016e0:	3115      	adds	r1, #21
 80016e2:	3220      	adds	r2, #32
 80016e4:	291c      	cmp	r1, #28
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_ddiv+0x4be>
 80016e8:	e61a      	b.n	8001320 <__aeabi_ddiv+0xf4>
 80016ea:	464b      	mov	r3, r9
 80016ec:	3808      	subs	r0, #8
 80016ee:	4083      	lsls	r3, r0
 80016f0:	2500      	movs	r5, #0
 80016f2:	4698      	mov	r8, r3
 80016f4:	e620      	b.n	8001338 <__aeabi_ddiv+0x10c>
 80016f6:	f001 f917 	bl	8002928 <__clzsi2>
 80016fa:	0003      	movs	r3, r0
 80016fc:	001a      	movs	r2, r3
 80016fe:	3215      	adds	r2, #21
 8001700:	3020      	adds	r0, #32
 8001702:	2a1c      	cmp	r2, #28
 8001704:	dc00      	bgt.n	8001708 <__aeabi_ddiv+0x4dc>
 8001706:	e630      	b.n	800136a <__aeabi_ddiv+0x13e>
 8001708:	4654      	mov	r4, sl
 800170a:	3b08      	subs	r3, #8
 800170c:	2200      	movs	r2, #0
 800170e:	409c      	lsls	r4, r3
 8001710:	e635      	b.n	800137e <__aeabi_ddiv+0x152>
 8001712:	230f      	movs	r3, #15
 8001714:	402b      	ands	r3, r5
 8001716:	2b04      	cmp	r3, #4
 8001718:	d100      	bne.n	800171c <__aeabi_ddiv+0x4f0>
 800171a:	e652      	b.n	80013c2 <__aeabi_ddiv+0x196>
 800171c:	2305      	movs	r3, #5
 800171e:	425b      	negs	r3, r3
 8001720:	42ab      	cmp	r3, r5
 8001722:	419b      	sbcs	r3, r3
 8001724:	3504      	adds	r5, #4
 8001726:	425b      	negs	r3, r3
 8001728:	08ed      	lsrs	r5, r5, #3
 800172a:	4498      	add	r8, r3
 800172c:	e64a      	b.n	80013c4 <__aeabi_ddiv+0x198>
 800172e:	428c      	cmp	r4, r1
 8001730:	d1c5      	bne.n	80016be <__aeabi_ddiv+0x492>
 8001732:	42af      	cmp	r7, r5
 8001734:	d9c0      	bls.n	80016b8 <__aeabi_ddiv+0x48c>
 8001736:	4690      	mov	r8, r2
 8001738:	e716      	b.n	8001568 <__aeabi_ddiv+0x33c>
 800173a:	428a      	cmp	r2, r1
 800173c:	d800      	bhi.n	8001740 <__aeabi_ddiv+0x514>
 800173e:	e6ea      	b.n	8001516 <__aeabi_ddiv+0x2ea>
 8001740:	1e83      	subs	r3, r0, #2
 8001742:	1909      	adds	r1, r1, r4
 8001744:	e6e7      	b.n	8001516 <__aeabi_ddiv+0x2ea>
 8001746:	4a2a      	ldr	r2, [pc, #168]	; (80017f0 <__aeabi_ddiv+0x5c4>)
 8001748:	0028      	movs	r0, r5
 800174a:	445a      	add	r2, fp
 800174c:	4643      	mov	r3, r8
 800174e:	4095      	lsls	r5, r2
 8001750:	4093      	lsls	r3, r2
 8001752:	40c8      	lsrs	r0, r1
 8001754:	1e6a      	subs	r2, r5, #1
 8001756:	4195      	sbcs	r5, r2
 8001758:	4644      	mov	r4, r8
 800175a:	4303      	orrs	r3, r0
 800175c:	432b      	orrs	r3, r5
 800175e:	40cc      	lsrs	r4, r1
 8001760:	075a      	lsls	r2, r3, #29
 8001762:	d092      	beq.n	800168a <__aeabi_ddiv+0x45e>
 8001764:	220f      	movs	r2, #15
 8001766:	401a      	ands	r2, r3
 8001768:	2a04      	cmp	r2, #4
 800176a:	d188      	bne.n	800167e <__aeabi_ddiv+0x452>
 800176c:	e78d      	b.n	800168a <__aeabi_ddiv+0x45e>
 800176e:	0035      	movs	r5, r6
 8001770:	4281      	cmp	r1, r0
 8001772:	d000      	beq.n	8001776 <__aeabi_ddiv+0x54a>
 8001774:	e74b      	b.n	800160e <__aeabi_ddiv+0x3e2>
 8001776:	9a00      	ldr	r2, [sp, #0]
 8001778:	4293      	cmp	r3, r2
 800177a:	d000      	beq.n	800177e <__aeabi_ddiv+0x552>
 800177c:	e747      	b.n	800160e <__aeabi_ddiv+0x3e2>
 800177e:	e618      	b.n	80013b2 <__aeabi_ddiv+0x186>
 8001780:	42ae      	cmp	r6, r5
 8001782:	d99c      	bls.n	80016be <__aeabi_ddiv+0x492>
 8001784:	2302      	movs	r3, #2
 8001786:	425b      	negs	r3, r3
 8001788:	469c      	mov	ip, r3
 800178a:	9b00      	ldr	r3, [sp, #0]
 800178c:	44e0      	add	r8, ip
 800178e:	469c      	mov	ip, r3
 8001790:	4465      	add	r5, ip
 8001792:	429d      	cmp	r5, r3
 8001794:	419b      	sbcs	r3, r3
 8001796:	425b      	negs	r3, r3
 8001798:	191b      	adds	r3, r3, r4
 800179a:	18c9      	adds	r1, r1, r3
 800179c:	e6e4      	b.n	8001568 <__aeabi_ddiv+0x33c>
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <__aeabi_ddiv+0x5c8>)
 80017a0:	445a      	add	r2, fp
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	dc00      	bgt.n	80017a8 <__aeabi_ddiv+0x57c>
 80017a6:	e744      	b.n	8001632 <__aeabi_ddiv+0x406>
 80017a8:	2301      	movs	r3, #1
 80017aa:	2500      	movs	r5, #0
 80017ac:	4498      	add	r8, r3
 80017ae:	e609      	b.n	80013c4 <__aeabi_ddiv+0x198>
 80017b0:	0765      	lsls	r5, r4, #29
 80017b2:	0264      	lsls	r4, r4, #9
 80017b4:	0b24      	lsrs	r4, r4, #12
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	431d      	orrs	r5, r3
 80017ba:	2300      	movs	r3, #0
 80017bc:	e590      	b.n	80012e0 <__aeabi_ddiv+0xb4>
 80017be:	9e00      	ldr	r6, [sp, #0]
 80017c0:	3d02      	subs	r5, #2
 80017c2:	0072      	lsls	r2, r6, #1
 80017c4:	42b2      	cmp	r2, r6
 80017c6:	41bf      	sbcs	r7, r7
 80017c8:	427f      	negs	r7, r7
 80017ca:	193c      	adds	r4, r7, r4
 80017cc:	1909      	adds	r1, r1, r4
 80017ce:	9200      	str	r2, [sp, #0]
 80017d0:	e7ce      	b.n	8001770 <__aeabi_ddiv+0x544>
 80017d2:	2480      	movs	r4, #128	; 0x80
 80017d4:	4643      	mov	r3, r8
 80017d6:	0324      	lsls	r4, r4, #12
 80017d8:	431c      	orrs	r4, r3
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <__aeabi_ddiv+0x5cc>)
 80017de:	0b24      	lsrs	r4, r4, #12
 80017e0:	e57e      	b.n	80012e0 <__aeabi_ddiv+0xb4>
 80017e2:	9a00      	ldr	r2, [sp, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d3ea      	bcc.n	80017be <__aeabi_ddiv+0x592>
 80017e8:	0035      	movs	r5, r6
 80017ea:	e7c4      	b.n	8001776 <__aeabi_ddiv+0x54a>
 80017ec:	0000043e 	.word	0x0000043e
 80017f0:	0000041e 	.word	0x0000041e
 80017f4:	000003ff 	.word	0x000003ff
 80017f8:	000007ff 	.word	0x000007ff

080017fc <__eqdf2>:
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	464f      	mov	r7, r9
 8001800:	4646      	mov	r6, r8
 8001802:	46d6      	mov	lr, sl
 8001804:	4694      	mov	ip, r2
 8001806:	4691      	mov	r9, r2
 8001808:	031a      	lsls	r2, r3, #12
 800180a:	0b12      	lsrs	r2, r2, #12
 800180c:	4d18      	ldr	r5, [pc, #96]	; (8001870 <__eqdf2+0x74>)
 800180e:	b5c0      	push	{r6, r7, lr}
 8001810:	004c      	lsls	r4, r1, #1
 8001812:	030f      	lsls	r7, r1, #12
 8001814:	4692      	mov	sl, r2
 8001816:	005a      	lsls	r2, r3, #1
 8001818:	0006      	movs	r6, r0
 800181a:	4680      	mov	r8, r0
 800181c:	0b3f      	lsrs	r7, r7, #12
 800181e:	2001      	movs	r0, #1
 8001820:	0d64      	lsrs	r4, r4, #21
 8001822:	0fc9      	lsrs	r1, r1, #31
 8001824:	0d52      	lsrs	r2, r2, #21
 8001826:	0fdb      	lsrs	r3, r3, #31
 8001828:	42ac      	cmp	r4, r5
 800182a:	d00a      	beq.n	8001842 <__eqdf2+0x46>
 800182c:	42aa      	cmp	r2, r5
 800182e:	d003      	beq.n	8001838 <__eqdf2+0x3c>
 8001830:	4294      	cmp	r4, r2
 8001832:	d101      	bne.n	8001838 <__eqdf2+0x3c>
 8001834:	4557      	cmp	r7, sl
 8001836:	d00d      	beq.n	8001854 <__eqdf2+0x58>
 8001838:	bce0      	pop	{r5, r6, r7}
 800183a:	46ba      	mov	sl, r7
 800183c:	46b1      	mov	r9, r6
 800183e:	46a8      	mov	r8, r5
 8001840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001842:	003d      	movs	r5, r7
 8001844:	4335      	orrs	r5, r6
 8001846:	d1f7      	bne.n	8001838 <__eqdf2+0x3c>
 8001848:	42a2      	cmp	r2, r4
 800184a:	d1f5      	bne.n	8001838 <__eqdf2+0x3c>
 800184c:	4652      	mov	r2, sl
 800184e:	4665      	mov	r5, ip
 8001850:	432a      	orrs	r2, r5
 8001852:	d1f1      	bne.n	8001838 <__eqdf2+0x3c>
 8001854:	2001      	movs	r0, #1
 8001856:	45c8      	cmp	r8, r9
 8001858:	d1ee      	bne.n	8001838 <__eqdf2+0x3c>
 800185a:	4299      	cmp	r1, r3
 800185c:	d006      	beq.n	800186c <__eqdf2+0x70>
 800185e:	2c00      	cmp	r4, #0
 8001860:	d1ea      	bne.n	8001838 <__eqdf2+0x3c>
 8001862:	433e      	orrs	r6, r7
 8001864:	0030      	movs	r0, r6
 8001866:	1e46      	subs	r6, r0, #1
 8001868:	41b0      	sbcs	r0, r6
 800186a:	e7e5      	b.n	8001838 <__eqdf2+0x3c>
 800186c:	2000      	movs	r0, #0
 800186e:	e7e3      	b.n	8001838 <__eqdf2+0x3c>
 8001870:	000007ff 	.word	0x000007ff

08001874 <__gedf2>:
 8001874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001876:	464e      	mov	r6, r9
 8001878:	4645      	mov	r5, r8
 800187a:	4657      	mov	r7, sl
 800187c:	46de      	mov	lr, fp
 800187e:	0004      	movs	r4, r0
 8001880:	0018      	movs	r0, r3
 8001882:	b5e0      	push	{r5, r6, r7, lr}
 8001884:	0016      	movs	r6, r2
 8001886:	031b      	lsls	r3, r3, #12
 8001888:	0b1b      	lsrs	r3, r3, #12
 800188a:	4d32      	ldr	r5, [pc, #200]	; (8001954 <__gedf2+0xe0>)
 800188c:	030f      	lsls	r7, r1, #12
 800188e:	004a      	lsls	r2, r1, #1
 8001890:	4699      	mov	r9, r3
 8001892:	0043      	lsls	r3, r0, #1
 8001894:	46a4      	mov	ip, r4
 8001896:	46b0      	mov	r8, r6
 8001898:	0b3f      	lsrs	r7, r7, #12
 800189a:	0d52      	lsrs	r2, r2, #21
 800189c:	0fc9      	lsrs	r1, r1, #31
 800189e:	0d5b      	lsrs	r3, r3, #21
 80018a0:	0fc0      	lsrs	r0, r0, #31
 80018a2:	42aa      	cmp	r2, r5
 80018a4:	d029      	beq.n	80018fa <__gedf2+0x86>
 80018a6:	42ab      	cmp	r3, r5
 80018a8:	d018      	beq.n	80018dc <__gedf2+0x68>
 80018aa:	2a00      	cmp	r2, #0
 80018ac:	d12a      	bne.n	8001904 <__gedf2+0x90>
 80018ae:	433c      	orrs	r4, r7
 80018b0:	46a3      	mov	fp, r4
 80018b2:	4265      	negs	r5, r4
 80018b4:	4165      	adcs	r5, r4
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <__gedf2+0x4c>
 80018ba:	464c      	mov	r4, r9
 80018bc:	4326      	orrs	r6, r4
 80018be:	d027      	beq.n	8001910 <__gedf2+0x9c>
 80018c0:	2d00      	cmp	r5, #0
 80018c2:	d115      	bne.n	80018f0 <__gedf2+0x7c>
 80018c4:	4281      	cmp	r1, r0
 80018c6:	d028      	beq.n	800191a <__gedf2+0xa6>
 80018c8:	2002      	movs	r0, #2
 80018ca:	3901      	subs	r1, #1
 80018cc:	4008      	ands	r0, r1
 80018ce:	3801      	subs	r0, #1
 80018d0:	bcf0      	pop	{r4, r5, r6, r7}
 80018d2:	46bb      	mov	fp, r7
 80018d4:	46b2      	mov	sl, r6
 80018d6:	46a9      	mov	r9, r5
 80018d8:	46a0      	mov	r8, r4
 80018da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018dc:	464d      	mov	r5, r9
 80018de:	432e      	orrs	r6, r5
 80018e0:	d12f      	bne.n	8001942 <__gedf2+0xce>
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	d1ee      	bne.n	80018c4 <__gedf2+0x50>
 80018e6:	433c      	orrs	r4, r7
 80018e8:	4265      	negs	r5, r4
 80018ea:	4165      	adcs	r5, r4
 80018ec:	2d00      	cmp	r5, #0
 80018ee:	d0e9      	beq.n	80018c4 <__gedf2+0x50>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d1ed      	bne.n	80018d0 <__gedf2+0x5c>
 80018f4:	2001      	movs	r0, #1
 80018f6:	4240      	negs	r0, r0
 80018f8:	e7ea      	b.n	80018d0 <__gedf2+0x5c>
 80018fa:	003d      	movs	r5, r7
 80018fc:	4325      	orrs	r5, r4
 80018fe:	d120      	bne.n	8001942 <__gedf2+0xce>
 8001900:	4293      	cmp	r3, r2
 8001902:	d0eb      	beq.n	80018dc <__gedf2+0x68>
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1dd      	bne.n	80018c4 <__gedf2+0x50>
 8001908:	464c      	mov	r4, r9
 800190a:	4326      	orrs	r6, r4
 800190c:	d1da      	bne.n	80018c4 <__gedf2+0x50>
 800190e:	e7db      	b.n	80018c8 <__gedf2+0x54>
 8001910:	465b      	mov	r3, fp
 8001912:	2000      	movs	r0, #0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0db      	beq.n	80018d0 <__gedf2+0x5c>
 8001918:	e7d6      	b.n	80018c8 <__gedf2+0x54>
 800191a:	429a      	cmp	r2, r3
 800191c:	dc0a      	bgt.n	8001934 <__gedf2+0xc0>
 800191e:	dbe7      	blt.n	80018f0 <__gedf2+0x7c>
 8001920:	454f      	cmp	r7, r9
 8001922:	d8d1      	bhi.n	80018c8 <__gedf2+0x54>
 8001924:	d010      	beq.n	8001948 <__gedf2+0xd4>
 8001926:	2000      	movs	r0, #0
 8001928:	454f      	cmp	r7, r9
 800192a:	d2d1      	bcs.n	80018d0 <__gedf2+0x5c>
 800192c:	2900      	cmp	r1, #0
 800192e:	d0e1      	beq.n	80018f4 <__gedf2+0x80>
 8001930:	0008      	movs	r0, r1
 8001932:	e7cd      	b.n	80018d0 <__gedf2+0x5c>
 8001934:	4243      	negs	r3, r0
 8001936:	4158      	adcs	r0, r3
 8001938:	2302      	movs	r3, #2
 800193a:	4240      	negs	r0, r0
 800193c:	4018      	ands	r0, r3
 800193e:	3801      	subs	r0, #1
 8001940:	e7c6      	b.n	80018d0 <__gedf2+0x5c>
 8001942:	2002      	movs	r0, #2
 8001944:	4240      	negs	r0, r0
 8001946:	e7c3      	b.n	80018d0 <__gedf2+0x5c>
 8001948:	45c4      	cmp	ip, r8
 800194a:	d8bd      	bhi.n	80018c8 <__gedf2+0x54>
 800194c:	2000      	movs	r0, #0
 800194e:	45c4      	cmp	ip, r8
 8001950:	d2be      	bcs.n	80018d0 <__gedf2+0x5c>
 8001952:	e7eb      	b.n	800192c <__gedf2+0xb8>
 8001954:	000007ff 	.word	0x000007ff

08001958 <__ledf2>:
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	464e      	mov	r6, r9
 800195c:	4645      	mov	r5, r8
 800195e:	4657      	mov	r7, sl
 8001960:	46de      	mov	lr, fp
 8001962:	0004      	movs	r4, r0
 8001964:	0018      	movs	r0, r3
 8001966:	b5e0      	push	{r5, r6, r7, lr}
 8001968:	0016      	movs	r6, r2
 800196a:	031b      	lsls	r3, r3, #12
 800196c:	0b1b      	lsrs	r3, r3, #12
 800196e:	4d31      	ldr	r5, [pc, #196]	; (8001a34 <__ledf2+0xdc>)
 8001970:	030f      	lsls	r7, r1, #12
 8001972:	004a      	lsls	r2, r1, #1
 8001974:	4699      	mov	r9, r3
 8001976:	0043      	lsls	r3, r0, #1
 8001978:	46a4      	mov	ip, r4
 800197a:	46b0      	mov	r8, r6
 800197c:	0b3f      	lsrs	r7, r7, #12
 800197e:	0d52      	lsrs	r2, r2, #21
 8001980:	0fc9      	lsrs	r1, r1, #31
 8001982:	0d5b      	lsrs	r3, r3, #21
 8001984:	0fc0      	lsrs	r0, r0, #31
 8001986:	42aa      	cmp	r2, r5
 8001988:	d011      	beq.n	80019ae <__ledf2+0x56>
 800198a:	42ab      	cmp	r3, r5
 800198c:	d014      	beq.n	80019b8 <__ledf2+0x60>
 800198e:	2a00      	cmp	r2, #0
 8001990:	d12f      	bne.n	80019f2 <__ledf2+0x9a>
 8001992:	433c      	orrs	r4, r7
 8001994:	46a3      	mov	fp, r4
 8001996:	4265      	negs	r5, r4
 8001998:	4165      	adcs	r5, r4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d114      	bne.n	80019c8 <__ledf2+0x70>
 800199e:	464c      	mov	r4, r9
 80019a0:	4326      	orrs	r6, r4
 80019a2:	d111      	bne.n	80019c8 <__ledf2+0x70>
 80019a4:	465b      	mov	r3, fp
 80019a6:	2000      	movs	r0, #0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d017      	beq.n	80019dc <__ledf2+0x84>
 80019ac:	e010      	b.n	80019d0 <__ledf2+0x78>
 80019ae:	003d      	movs	r5, r7
 80019b0:	4325      	orrs	r5, r4
 80019b2:	d112      	bne.n	80019da <__ledf2+0x82>
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d11c      	bne.n	80019f2 <__ledf2+0x9a>
 80019b8:	464d      	mov	r5, r9
 80019ba:	432e      	orrs	r6, r5
 80019bc:	d10d      	bne.n	80019da <__ledf2+0x82>
 80019be:	2a00      	cmp	r2, #0
 80019c0:	d104      	bne.n	80019cc <__ledf2+0x74>
 80019c2:	433c      	orrs	r4, r7
 80019c4:	4265      	negs	r5, r4
 80019c6:	4165      	adcs	r5, r4
 80019c8:	2d00      	cmp	r5, #0
 80019ca:	d10d      	bne.n	80019e8 <__ledf2+0x90>
 80019cc:	4281      	cmp	r1, r0
 80019ce:	d016      	beq.n	80019fe <__ledf2+0xa6>
 80019d0:	2002      	movs	r0, #2
 80019d2:	3901      	subs	r1, #1
 80019d4:	4008      	ands	r0, r1
 80019d6:	3801      	subs	r0, #1
 80019d8:	e000      	b.n	80019dc <__ledf2+0x84>
 80019da:	2002      	movs	r0, #2
 80019dc:	bcf0      	pop	{r4, r5, r6, r7}
 80019de:	46bb      	mov	fp, r7
 80019e0:	46b2      	mov	sl, r6
 80019e2:	46a9      	mov	r9, r5
 80019e4:	46a0      	mov	r8, r4
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d1f7      	bne.n	80019dc <__ledf2+0x84>
 80019ec:	2001      	movs	r0, #1
 80019ee:	4240      	negs	r0, r0
 80019f0:	e7f4      	b.n	80019dc <__ledf2+0x84>
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ea      	bne.n	80019cc <__ledf2+0x74>
 80019f6:	464c      	mov	r4, r9
 80019f8:	4326      	orrs	r6, r4
 80019fa:	d1e7      	bne.n	80019cc <__ledf2+0x74>
 80019fc:	e7e8      	b.n	80019d0 <__ledf2+0x78>
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dd06      	ble.n	8001a10 <__ledf2+0xb8>
 8001a02:	4243      	negs	r3, r0
 8001a04:	4158      	adcs	r0, r3
 8001a06:	2302      	movs	r3, #2
 8001a08:	4240      	negs	r0, r0
 8001a0a:	4018      	ands	r0, r3
 8001a0c:	3801      	subs	r0, #1
 8001a0e:	e7e5      	b.n	80019dc <__ledf2+0x84>
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbe9      	blt.n	80019e8 <__ledf2+0x90>
 8001a14:	454f      	cmp	r7, r9
 8001a16:	d8db      	bhi.n	80019d0 <__ledf2+0x78>
 8001a18:	d006      	beq.n	8001a28 <__ledf2+0xd0>
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	454f      	cmp	r7, r9
 8001a1e:	d2dd      	bcs.n	80019dc <__ledf2+0x84>
 8001a20:	2900      	cmp	r1, #0
 8001a22:	d0e3      	beq.n	80019ec <__ledf2+0x94>
 8001a24:	0008      	movs	r0, r1
 8001a26:	e7d9      	b.n	80019dc <__ledf2+0x84>
 8001a28:	45c4      	cmp	ip, r8
 8001a2a:	d8d1      	bhi.n	80019d0 <__ledf2+0x78>
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	45c4      	cmp	ip, r8
 8001a30:	d2d4      	bcs.n	80019dc <__ledf2+0x84>
 8001a32:	e7f5      	b.n	8001a20 <__ledf2+0xc8>
 8001a34:	000007ff 	.word	0x000007ff

08001a38 <__aeabi_dmul>:
 8001a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3a:	4657      	mov	r7, sl
 8001a3c:	464e      	mov	r6, r9
 8001a3e:	4645      	mov	r5, r8
 8001a40:	46de      	mov	lr, fp
 8001a42:	b5e0      	push	{r5, r6, r7, lr}
 8001a44:	4698      	mov	r8, r3
 8001a46:	030c      	lsls	r4, r1, #12
 8001a48:	004b      	lsls	r3, r1, #1
 8001a4a:	0006      	movs	r6, r0
 8001a4c:	4692      	mov	sl, r2
 8001a4e:	b087      	sub	sp, #28
 8001a50:	0b24      	lsrs	r4, r4, #12
 8001a52:	0d5b      	lsrs	r3, r3, #21
 8001a54:	0fcf      	lsrs	r7, r1, #31
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d06c      	beq.n	8001b34 <__aeabi_dmul+0xfc>
 8001a5a:	4add      	ldr	r2, [pc, #884]	; (8001dd0 <__aeabi_dmul+0x398>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dmul+0x2a>
 8001a60:	e086      	b.n	8001b70 <__aeabi_dmul+0x138>
 8001a62:	0f42      	lsrs	r2, r0, #29
 8001a64:	00e4      	lsls	r4, r4, #3
 8001a66:	4314      	orrs	r4, r2
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	0412      	lsls	r2, r2, #16
 8001a6c:	4314      	orrs	r4, r2
 8001a6e:	4ad9      	ldr	r2, [pc, #868]	; (8001dd4 <__aeabi_dmul+0x39c>)
 8001a70:	00c5      	lsls	r5, r0, #3
 8001a72:	4694      	mov	ip, r2
 8001a74:	4463      	add	r3, ip
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	4643      	mov	r3, r8
 8001a80:	4642      	mov	r2, r8
 8001a82:	031e      	lsls	r6, r3, #12
 8001a84:	0fd2      	lsrs	r2, r2, #31
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4650      	mov	r0, sl
 8001a8a:	4690      	mov	r8, r2
 8001a8c:	0b36      	lsrs	r6, r6, #12
 8001a8e:	0d5b      	lsrs	r3, r3, #21
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dmul+0x5c>
 8001a92:	e078      	b.n	8001b86 <__aeabi_dmul+0x14e>
 8001a94:	4ace      	ldr	r2, [pc, #824]	; (8001dd0 <__aeabi_dmul+0x398>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01d      	beq.n	8001ad6 <__aeabi_dmul+0x9e>
 8001a9a:	49ce      	ldr	r1, [pc, #824]	; (8001dd4 <__aeabi_dmul+0x39c>)
 8001a9c:	0f42      	lsrs	r2, r0, #29
 8001a9e:	468c      	mov	ip, r1
 8001aa0:	9900      	ldr	r1, [sp, #0]
 8001aa2:	4463      	add	r3, ip
 8001aa4:	00f6      	lsls	r6, r6, #3
 8001aa6:	468c      	mov	ip, r1
 8001aa8:	4316      	orrs	r6, r2
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	449c      	add	ip, r3
 8001aae:	0412      	lsls	r2, r2, #16
 8001ab0:	4663      	mov	r3, ip
 8001ab2:	4316      	orrs	r6, r2
 8001ab4:	00c2      	lsls	r2, r0, #3
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	9900      	ldr	r1, [sp, #0]
 8001abc:	4643      	mov	r3, r8
 8001abe:	3101      	adds	r1, #1
 8001ac0:	468c      	mov	ip, r1
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	407b      	eors	r3, r7
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	290f      	cmp	r1, #15
 8001aca:	d900      	bls.n	8001ace <__aeabi_dmul+0x96>
 8001acc:	e07e      	b.n	8001bcc <__aeabi_dmul+0x194>
 8001ace:	4bc2      	ldr	r3, [pc, #776]	; (8001dd8 <__aeabi_dmul+0x3a0>)
 8001ad0:	0089      	lsls	r1, r1, #2
 8001ad2:	5859      	ldr	r1, [r3, r1]
 8001ad4:	468f      	mov	pc, r1
 8001ad6:	4652      	mov	r2, sl
 8001ad8:	9b00      	ldr	r3, [sp, #0]
 8001ada:	4332      	orrs	r2, r6
 8001adc:	d000      	beq.n	8001ae0 <__aeabi_dmul+0xa8>
 8001ade:	e156      	b.n	8001d8e <__aeabi_dmul+0x356>
 8001ae0:	49bb      	ldr	r1, [pc, #748]	; (8001dd0 <__aeabi_dmul+0x398>)
 8001ae2:	2600      	movs	r6, #0
 8001ae4:	468c      	mov	ip, r1
 8001ae6:	4463      	add	r3, ip
 8001ae8:	4649      	mov	r1, r9
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2302      	movs	r3, #2
 8001aee:	4319      	orrs	r1, r3
 8001af0:	4689      	mov	r9, r1
 8001af2:	2002      	movs	r0, #2
 8001af4:	e7e1      	b.n	8001aba <__aeabi_dmul+0x82>
 8001af6:	4643      	mov	r3, r8
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	0034      	movs	r4, r6
 8001afc:	0015      	movs	r5, r2
 8001afe:	4683      	mov	fp, r0
 8001b00:	465b      	mov	r3, fp
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d05e      	beq.n	8001bc4 <__aeabi_dmul+0x18c>
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dmul+0xd4>
 8001b0a:	e1f3      	b.n	8001ef4 <__aeabi_dmul+0x4bc>
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d000      	beq.n	8001b12 <__aeabi_dmul+0xda>
 8001b10:	e118      	b.n	8001d44 <__aeabi_dmul+0x30c>
 8001b12:	2200      	movs	r2, #0
 8001b14:	2400      	movs	r4, #0
 8001b16:	2500      	movs	r5, #0
 8001b18:	9b01      	ldr	r3, [sp, #4]
 8001b1a:	0512      	lsls	r2, r2, #20
 8001b1c:	4322      	orrs	r2, r4
 8001b1e:	07db      	lsls	r3, r3, #31
 8001b20:	431a      	orrs	r2, r3
 8001b22:	0028      	movs	r0, r5
 8001b24:	0011      	movs	r1, r2
 8001b26:	b007      	add	sp, #28
 8001b28:	bcf0      	pop	{r4, r5, r6, r7}
 8001b2a:	46bb      	mov	fp, r7
 8001b2c:	46b2      	mov	sl, r6
 8001b2e:	46a9      	mov	r9, r5
 8001b30:	46a0      	mov	r8, r4
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b34:	0025      	movs	r5, r4
 8001b36:	4305      	orrs	r5, r0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dmul+0x104>
 8001b3a:	e141      	b.n	8001dc0 <__aeabi_dmul+0x388>
 8001b3c:	2c00      	cmp	r4, #0
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dmul+0x10a>
 8001b40:	e1ad      	b.n	8001e9e <__aeabi_dmul+0x466>
 8001b42:	0020      	movs	r0, r4
 8001b44:	f000 fef0 	bl	8002928 <__clzsi2>
 8001b48:	0001      	movs	r1, r0
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	390b      	subs	r1, #11
 8001b4e:	231d      	movs	r3, #29
 8001b50:	0010      	movs	r0, r2
 8001b52:	1a5b      	subs	r3, r3, r1
 8001b54:	0031      	movs	r1, r6
 8001b56:	0035      	movs	r5, r6
 8001b58:	3808      	subs	r0, #8
 8001b5a:	4084      	lsls	r4, r0
 8001b5c:	40d9      	lsrs	r1, r3
 8001b5e:	4085      	lsls	r5, r0
 8001b60:	430c      	orrs	r4, r1
 8001b62:	489e      	ldr	r0, [pc, #632]	; (8001ddc <__aeabi_dmul+0x3a4>)
 8001b64:	1a83      	subs	r3, r0, r2
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	4699      	mov	r9, r3
 8001b6c:	469b      	mov	fp, r3
 8001b6e:	e786      	b.n	8001a7e <__aeabi_dmul+0x46>
 8001b70:	0005      	movs	r5, r0
 8001b72:	4325      	orrs	r5, r4
 8001b74:	d000      	beq.n	8001b78 <__aeabi_dmul+0x140>
 8001b76:	e11c      	b.n	8001db2 <__aeabi_dmul+0x37a>
 8001b78:	2208      	movs	r2, #8
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	2400      	movs	r4, #0
 8001b80:	4691      	mov	r9, r2
 8001b82:	469b      	mov	fp, r3
 8001b84:	e77b      	b.n	8001a7e <__aeabi_dmul+0x46>
 8001b86:	4652      	mov	r2, sl
 8001b88:	4332      	orrs	r2, r6
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_dmul+0x156>
 8001b8c:	e10a      	b.n	8001da4 <__aeabi_dmul+0x36c>
 8001b8e:	2e00      	cmp	r6, #0
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dmul+0x15c>
 8001b92:	e176      	b.n	8001e82 <__aeabi_dmul+0x44a>
 8001b94:	0030      	movs	r0, r6
 8001b96:	f000 fec7 	bl	8002928 <__clzsi2>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	3a0b      	subs	r2, #11
 8001b9e:	231d      	movs	r3, #29
 8001ba0:	0001      	movs	r1, r0
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	4652      	mov	r2, sl
 8001ba6:	3908      	subs	r1, #8
 8001ba8:	40da      	lsrs	r2, r3
 8001baa:	408e      	lsls	r6, r1
 8001bac:	4316      	orrs	r6, r2
 8001bae:	4652      	mov	r2, sl
 8001bb0:	408a      	lsls	r2, r1
 8001bb2:	9b00      	ldr	r3, [sp, #0]
 8001bb4:	4989      	ldr	r1, [pc, #548]	; (8001ddc <__aeabi_dmul+0x3a4>)
 8001bb6:	1a18      	subs	r0, r3, r0
 8001bb8:	0003      	movs	r3, r0
 8001bba:	468c      	mov	ip, r1
 8001bbc:	4463      	add	r3, ip
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e77a      	b.n	8001aba <__aeabi_dmul+0x82>
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	2500      	movs	r5, #0
 8001bc8:	4a81      	ldr	r2, [pc, #516]	; (8001dd0 <__aeabi_dmul+0x398>)
 8001bca:	e7a5      	b.n	8001b18 <__aeabi_dmul+0xe0>
 8001bcc:	0c2f      	lsrs	r7, r5, #16
 8001bce:	042d      	lsls	r5, r5, #16
 8001bd0:	0c2d      	lsrs	r5, r5, #16
 8001bd2:	002b      	movs	r3, r5
 8001bd4:	0c11      	lsrs	r1, r2, #16
 8001bd6:	0412      	lsls	r2, r2, #16
 8001bd8:	0c12      	lsrs	r2, r2, #16
 8001bda:	4353      	muls	r3, r2
 8001bdc:	4698      	mov	r8, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	0028      	movs	r0, r5
 8001be2:	437b      	muls	r3, r7
 8001be4:	4699      	mov	r9, r3
 8001be6:	4348      	muls	r0, r1
 8001be8:	4448      	add	r0, r9
 8001bea:	4683      	mov	fp, r0
 8001bec:	4640      	mov	r0, r8
 8001bee:	000b      	movs	r3, r1
 8001bf0:	0c00      	lsrs	r0, r0, #16
 8001bf2:	4682      	mov	sl, r0
 8001bf4:	4658      	mov	r0, fp
 8001bf6:	437b      	muls	r3, r7
 8001bf8:	4450      	add	r0, sl
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	4581      	cmp	r9, r0
 8001bfe:	d906      	bls.n	8001c0e <__aeabi_dmul+0x1d6>
 8001c00:	469a      	mov	sl, r3
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	025b      	lsls	r3, r3, #9
 8001c06:	4699      	mov	r9, r3
 8001c08:	44ca      	add	sl, r9
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	0c03      	lsrs	r3, r0, #16
 8001c10:	469b      	mov	fp, r3
 8001c12:	4643      	mov	r3, r8
 8001c14:	041b      	lsls	r3, r3, #16
 8001c16:	0400      	lsls	r0, r0, #16
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	4443      	add	r3, r8
 8001c20:	9304      	str	r3, [sp, #16]
 8001c22:	0c33      	lsrs	r3, r6, #16
 8001c24:	4699      	mov	r9, r3
 8001c26:	002b      	movs	r3, r5
 8001c28:	0436      	lsls	r6, r6, #16
 8001c2a:	0c36      	lsrs	r6, r6, #16
 8001c2c:	4373      	muls	r3, r6
 8001c2e:	4698      	mov	r8, r3
 8001c30:	0033      	movs	r3, r6
 8001c32:	437b      	muls	r3, r7
 8001c34:	469a      	mov	sl, r3
 8001c36:	464b      	mov	r3, r9
 8001c38:	435d      	muls	r5, r3
 8001c3a:	435f      	muls	r7, r3
 8001c3c:	4643      	mov	r3, r8
 8001c3e:	4455      	add	r5, sl
 8001c40:	0c18      	lsrs	r0, r3, #16
 8001c42:	1940      	adds	r0, r0, r5
 8001c44:	4582      	cmp	sl, r0
 8001c46:	d903      	bls.n	8001c50 <__aeabi_dmul+0x218>
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	025b      	lsls	r3, r3, #9
 8001c4c:	469a      	mov	sl, r3
 8001c4e:	4457      	add	r7, sl
 8001c50:	0c05      	lsrs	r5, r0, #16
 8001c52:	19eb      	adds	r3, r5, r7
 8001c54:	9305      	str	r3, [sp, #20]
 8001c56:	4643      	mov	r3, r8
 8001c58:	041d      	lsls	r5, r3, #16
 8001c5a:	0c2d      	lsrs	r5, r5, #16
 8001c5c:	0400      	lsls	r0, r0, #16
 8001c5e:	1940      	adds	r0, r0, r5
 8001c60:	0c25      	lsrs	r5, r4, #16
 8001c62:	0424      	lsls	r4, r4, #16
 8001c64:	0c24      	lsrs	r4, r4, #16
 8001c66:	0027      	movs	r7, r4
 8001c68:	4357      	muls	r7, r2
 8001c6a:	436a      	muls	r2, r5
 8001c6c:	4690      	mov	r8, r2
 8001c6e:	002a      	movs	r2, r5
 8001c70:	0c3b      	lsrs	r3, r7, #16
 8001c72:	469a      	mov	sl, r3
 8001c74:	434a      	muls	r2, r1
 8001c76:	4361      	muls	r1, r4
 8001c78:	4441      	add	r1, r8
 8001c7a:	4451      	add	r1, sl
 8001c7c:	4483      	add	fp, r0
 8001c7e:	4588      	cmp	r8, r1
 8001c80:	d903      	bls.n	8001c8a <__aeabi_dmul+0x252>
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	025b      	lsls	r3, r3, #9
 8001c86:	4698      	mov	r8, r3
 8001c88:	4442      	add	r2, r8
 8001c8a:	043f      	lsls	r7, r7, #16
 8001c8c:	0c0b      	lsrs	r3, r1, #16
 8001c8e:	0c3f      	lsrs	r7, r7, #16
 8001c90:	0409      	lsls	r1, r1, #16
 8001c92:	19c9      	adds	r1, r1, r7
 8001c94:	0027      	movs	r7, r4
 8001c96:	4698      	mov	r8, r3
 8001c98:	464b      	mov	r3, r9
 8001c9a:	4377      	muls	r7, r6
 8001c9c:	435c      	muls	r4, r3
 8001c9e:	436e      	muls	r6, r5
 8001ca0:	435d      	muls	r5, r3
 8001ca2:	0c3b      	lsrs	r3, r7, #16
 8001ca4:	4699      	mov	r9, r3
 8001ca6:	19a4      	adds	r4, r4, r6
 8001ca8:	444c      	add	r4, r9
 8001caa:	4442      	add	r2, r8
 8001cac:	9503      	str	r5, [sp, #12]
 8001cae:	42a6      	cmp	r6, r4
 8001cb0:	d904      	bls.n	8001cbc <__aeabi_dmul+0x284>
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	025b      	lsls	r3, r3, #9
 8001cb6:	4698      	mov	r8, r3
 8001cb8:	4445      	add	r5, r8
 8001cba:	9503      	str	r5, [sp, #12]
 8001cbc:	9b02      	ldr	r3, [sp, #8]
 8001cbe:	043f      	lsls	r7, r7, #16
 8001cc0:	445b      	add	r3, fp
 8001cc2:	001e      	movs	r6, r3
 8001cc4:	4283      	cmp	r3, r0
 8001cc6:	4180      	sbcs	r0, r0
 8001cc8:	0423      	lsls	r3, r4, #16
 8001cca:	4698      	mov	r8, r3
 8001ccc:	9b05      	ldr	r3, [sp, #20]
 8001cce:	0c3f      	lsrs	r7, r7, #16
 8001cd0:	4447      	add	r7, r8
 8001cd2:	4698      	mov	r8, r3
 8001cd4:	1876      	adds	r6, r6, r1
 8001cd6:	428e      	cmp	r6, r1
 8001cd8:	4189      	sbcs	r1, r1
 8001cda:	4447      	add	r7, r8
 8001cdc:	4240      	negs	r0, r0
 8001cde:	183d      	adds	r5, r7, r0
 8001ce0:	46a8      	mov	r8, r5
 8001ce2:	4693      	mov	fp, r2
 8001ce4:	4249      	negs	r1, r1
 8001ce6:	468a      	mov	sl, r1
 8001ce8:	44c3      	add	fp, r8
 8001cea:	429f      	cmp	r7, r3
 8001cec:	41bf      	sbcs	r7, r7
 8001cee:	4580      	cmp	r8, r0
 8001cf0:	4180      	sbcs	r0, r0
 8001cf2:	9b03      	ldr	r3, [sp, #12]
 8001cf4:	44da      	add	sl, fp
 8001cf6:	4698      	mov	r8, r3
 8001cf8:	4653      	mov	r3, sl
 8001cfa:	4240      	negs	r0, r0
 8001cfc:	427f      	negs	r7, r7
 8001cfe:	4307      	orrs	r7, r0
 8001d00:	0c24      	lsrs	r4, r4, #16
 8001d02:	4593      	cmp	fp, r2
 8001d04:	4192      	sbcs	r2, r2
 8001d06:	458a      	cmp	sl, r1
 8001d08:	4189      	sbcs	r1, r1
 8001d0a:	193f      	adds	r7, r7, r4
 8001d0c:	0ddc      	lsrs	r4, r3, #23
 8001d0e:	9b04      	ldr	r3, [sp, #16]
 8001d10:	0275      	lsls	r5, r6, #9
 8001d12:	431d      	orrs	r5, r3
 8001d14:	1e68      	subs	r0, r5, #1
 8001d16:	4185      	sbcs	r5, r0
 8001d18:	4653      	mov	r3, sl
 8001d1a:	4252      	negs	r2, r2
 8001d1c:	4249      	negs	r1, r1
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	18bf      	adds	r7, r7, r2
 8001d22:	4447      	add	r7, r8
 8001d24:	0df6      	lsrs	r6, r6, #23
 8001d26:	027f      	lsls	r7, r7, #9
 8001d28:	4335      	orrs	r5, r6
 8001d2a:	025a      	lsls	r2, r3, #9
 8001d2c:	433c      	orrs	r4, r7
 8001d2e:	4315      	orrs	r5, r2
 8001d30:	01fb      	lsls	r3, r7, #7
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dmul+0x2fe>
 8001d34:	e0c1      	b.n	8001eba <__aeabi_dmul+0x482>
 8001d36:	2101      	movs	r1, #1
 8001d38:	086a      	lsrs	r2, r5, #1
 8001d3a:	400d      	ands	r5, r1
 8001d3c:	4315      	orrs	r5, r2
 8001d3e:	07e2      	lsls	r2, r4, #31
 8001d40:	4315      	orrs	r5, r2
 8001d42:	0864      	lsrs	r4, r4, #1
 8001d44:	4926      	ldr	r1, [pc, #152]	; (8001de0 <__aeabi_dmul+0x3a8>)
 8001d46:	4461      	add	r1, ip
 8001d48:	2900      	cmp	r1, #0
 8001d4a:	dd56      	ble.n	8001dfa <__aeabi_dmul+0x3c2>
 8001d4c:	076b      	lsls	r3, r5, #29
 8001d4e:	d009      	beq.n	8001d64 <__aeabi_dmul+0x32c>
 8001d50:	220f      	movs	r2, #15
 8001d52:	402a      	ands	r2, r5
 8001d54:	2a04      	cmp	r2, #4
 8001d56:	d005      	beq.n	8001d64 <__aeabi_dmul+0x32c>
 8001d58:	1d2a      	adds	r2, r5, #4
 8001d5a:	42aa      	cmp	r2, r5
 8001d5c:	41ad      	sbcs	r5, r5
 8001d5e:	426d      	negs	r5, r5
 8001d60:	1964      	adds	r4, r4, r5
 8001d62:	0015      	movs	r5, r2
 8001d64:	01e3      	lsls	r3, r4, #7
 8001d66:	d504      	bpl.n	8001d72 <__aeabi_dmul+0x33a>
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <__aeabi_dmul+0x3ac>)
 8001d6c:	00c9      	lsls	r1, r1, #3
 8001d6e:	4014      	ands	r4, r2
 8001d70:	4461      	add	r1, ip
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <__aeabi_dmul+0x3b0>)
 8001d74:	4291      	cmp	r1, r2
 8001d76:	dd00      	ble.n	8001d7a <__aeabi_dmul+0x342>
 8001d78:	e724      	b.n	8001bc4 <__aeabi_dmul+0x18c>
 8001d7a:	0762      	lsls	r2, r4, #29
 8001d7c:	08ed      	lsrs	r5, r5, #3
 8001d7e:	0264      	lsls	r4, r4, #9
 8001d80:	0549      	lsls	r1, r1, #21
 8001d82:	4315      	orrs	r5, r2
 8001d84:	0b24      	lsrs	r4, r4, #12
 8001d86:	0d4a      	lsrs	r2, r1, #21
 8001d88:	e6c6      	b.n	8001b18 <__aeabi_dmul+0xe0>
 8001d8a:	9701      	str	r7, [sp, #4]
 8001d8c:	e6b8      	b.n	8001b00 <__aeabi_dmul+0xc8>
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <__aeabi_dmul+0x398>)
 8001d90:	2003      	movs	r0, #3
 8001d92:	4694      	mov	ip, r2
 8001d94:	4463      	add	r3, ip
 8001d96:	464a      	mov	r2, r9
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	4691      	mov	r9, r2
 8001da0:	4652      	mov	r2, sl
 8001da2:	e68a      	b.n	8001aba <__aeabi_dmul+0x82>
 8001da4:	4649      	mov	r1, r9
 8001da6:	2301      	movs	r3, #1
 8001da8:	4319      	orrs	r1, r3
 8001daa:	4689      	mov	r9, r1
 8001dac:	2600      	movs	r6, #0
 8001dae:	2001      	movs	r0, #1
 8001db0:	e683      	b.n	8001aba <__aeabi_dmul+0x82>
 8001db2:	220c      	movs	r2, #12
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2303      	movs	r3, #3
 8001db8:	0005      	movs	r5, r0
 8001dba:	4691      	mov	r9, r2
 8001dbc:	469b      	mov	fp, r3
 8001dbe:	e65e      	b.n	8001a7e <__aeabi_dmul+0x46>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	4699      	mov	r9, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	2400      	movs	r4, #0
 8001dcc:	469b      	mov	fp, r3
 8001dce:	e656      	b.n	8001a7e <__aeabi_dmul+0x46>
 8001dd0:	000007ff 	.word	0x000007ff
 8001dd4:	fffffc01 	.word	0xfffffc01
 8001dd8:	0800d810 	.word	0x0800d810
 8001ddc:	fffffc0d 	.word	0xfffffc0d
 8001de0:	000003ff 	.word	0x000003ff
 8001de4:	feffffff 	.word	0xfeffffff
 8001de8:	000007fe 	.word	0x000007fe
 8001dec:	2300      	movs	r3, #0
 8001dee:	2480      	movs	r4, #128	; 0x80
 8001df0:	2500      	movs	r5, #0
 8001df2:	4a44      	ldr	r2, [pc, #272]	; (8001f04 <__aeabi_dmul+0x4cc>)
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	0324      	lsls	r4, r4, #12
 8001df8:	e68e      	b.n	8001b18 <__aeabi_dmul+0xe0>
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	1a40      	subs	r0, r0, r1
 8001dfe:	2838      	cmp	r0, #56	; 0x38
 8001e00:	dd00      	ble.n	8001e04 <__aeabi_dmul+0x3cc>
 8001e02:	e686      	b.n	8001b12 <__aeabi_dmul+0xda>
 8001e04:	281f      	cmp	r0, #31
 8001e06:	dd5b      	ble.n	8001ec0 <__aeabi_dmul+0x488>
 8001e08:	221f      	movs	r2, #31
 8001e0a:	0023      	movs	r3, r4
 8001e0c:	4252      	negs	r2, r2
 8001e0e:	1a51      	subs	r1, r2, r1
 8001e10:	40cb      	lsrs	r3, r1
 8001e12:	0019      	movs	r1, r3
 8001e14:	2820      	cmp	r0, #32
 8001e16:	d003      	beq.n	8001e20 <__aeabi_dmul+0x3e8>
 8001e18:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <__aeabi_dmul+0x4d0>)
 8001e1a:	4462      	add	r2, ip
 8001e1c:	4094      	lsls	r4, r2
 8001e1e:	4325      	orrs	r5, r4
 8001e20:	1e6a      	subs	r2, r5, #1
 8001e22:	4195      	sbcs	r5, r2
 8001e24:	002a      	movs	r2, r5
 8001e26:	430a      	orrs	r2, r1
 8001e28:	2107      	movs	r1, #7
 8001e2a:	000d      	movs	r5, r1
 8001e2c:	2400      	movs	r4, #0
 8001e2e:	4015      	ands	r5, r2
 8001e30:	4211      	tst	r1, r2
 8001e32:	d05b      	beq.n	8001eec <__aeabi_dmul+0x4b4>
 8001e34:	210f      	movs	r1, #15
 8001e36:	2400      	movs	r4, #0
 8001e38:	4011      	ands	r1, r2
 8001e3a:	2904      	cmp	r1, #4
 8001e3c:	d053      	beq.n	8001ee6 <__aeabi_dmul+0x4ae>
 8001e3e:	1d11      	adds	r1, r2, #4
 8001e40:	4291      	cmp	r1, r2
 8001e42:	4192      	sbcs	r2, r2
 8001e44:	4252      	negs	r2, r2
 8001e46:	18a4      	adds	r4, r4, r2
 8001e48:	000a      	movs	r2, r1
 8001e4a:	0223      	lsls	r3, r4, #8
 8001e4c:	d54b      	bpl.n	8001ee6 <__aeabi_dmul+0x4ae>
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2400      	movs	r4, #0
 8001e52:	2500      	movs	r5, #0
 8001e54:	e660      	b.n	8001b18 <__aeabi_dmul+0xe0>
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	031b      	lsls	r3, r3, #12
 8001e5a:	421c      	tst	r4, r3
 8001e5c:	d009      	beq.n	8001e72 <__aeabi_dmul+0x43a>
 8001e5e:	421e      	tst	r6, r3
 8001e60:	d107      	bne.n	8001e72 <__aeabi_dmul+0x43a>
 8001e62:	4333      	orrs	r3, r6
 8001e64:	031c      	lsls	r4, r3, #12
 8001e66:	4643      	mov	r3, r8
 8001e68:	0015      	movs	r5, r2
 8001e6a:	0b24      	lsrs	r4, r4, #12
 8001e6c:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <__aeabi_dmul+0x4cc>)
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	e652      	b.n	8001b18 <__aeabi_dmul+0xe0>
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	0312      	lsls	r2, r2, #12
 8001e76:	4314      	orrs	r4, r2
 8001e78:	0324      	lsls	r4, r4, #12
 8001e7a:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <__aeabi_dmul+0x4cc>)
 8001e7c:	0b24      	lsrs	r4, r4, #12
 8001e7e:	9701      	str	r7, [sp, #4]
 8001e80:	e64a      	b.n	8001b18 <__aeabi_dmul+0xe0>
 8001e82:	f000 fd51 	bl	8002928 <__clzsi2>
 8001e86:	0003      	movs	r3, r0
 8001e88:	001a      	movs	r2, r3
 8001e8a:	3215      	adds	r2, #21
 8001e8c:	3020      	adds	r0, #32
 8001e8e:	2a1c      	cmp	r2, #28
 8001e90:	dc00      	bgt.n	8001e94 <__aeabi_dmul+0x45c>
 8001e92:	e684      	b.n	8001b9e <__aeabi_dmul+0x166>
 8001e94:	4656      	mov	r6, sl
 8001e96:	3b08      	subs	r3, #8
 8001e98:	2200      	movs	r2, #0
 8001e9a:	409e      	lsls	r6, r3
 8001e9c:	e689      	b.n	8001bb2 <__aeabi_dmul+0x17a>
 8001e9e:	f000 fd43 	bl	8002928 <__clzsi2>
 8001ea2:	0001      	movs	r1, r0
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	3115      	adds	r1, #21
 8001ea8:	3220      	adds	r2, #32
 8001eaa:	291c      	cmp	r1, #28
 8001eac:	dc00      	bgt.n	8001eb0 <__aeabi_dmul+0x478>
 8001eae:	e64e      	b.n	8001b4e <__aeabi_dmul+0x116>
 8001eb0:	0034      	movs	r4, r6
 8001eb2:	3808      	subs	r0, #8
 8001eb4:	2500      	movs	r5, #0
 8001eb6:	4084      	lsls	r4, r0
 8001eb8:	e653      	b.n	8001b62 <__aeabi_dmul+0x12a>
 8001eba:	9b00      	ldr	r3, [sp, #0]
 8001ebc:	469c      	mov	ip, r3
 8001ebe:	e741      	b.n	8001d44 <__aeabi_dmul+0x30c>
 8001ec0:	4912      	ldr	r1, [pc, #72]	; (8001f0c <__aeabi_dmul+0x4d4>)
 8001ec2:	0022      	movs	r2, r4
 8001ec4:	4461      	add	r1, ip
 8001ec6:	002e      	movs	r6, r5
 8001ec8:	408d      	lsls	r5, r1
 8001eca:	408a      	lsls	r2, r1
 8001ecc:	40c6      	lsrs	r6, r0
 8001ece:	1e69      	subs	r1, r5, #1
 8001ed0:	418d      	sbcs	r5, r1
 8001ed2:	4332      	orrs	r2, r6
 8001ed4:	432a      	orrs	r2, r5
 8001ed6:	40c4      	lsrs	r4, r0
 8001ed8:	0753      	lsls	r3, r2, #29
 8001eda:	d0b6      	beq.n	8001e4a <__aeabi_dmul+0x412>
 8001edc:	210f      	movs	r1, #15
 8001ede:	4011      	ands	r1, r2
 8001ee0:	2904      	cmp	r1, #4
 8001ee2:	d1ac      	bne.n	8001e3e <__aeabi_dmul+0x406>
 8001ee4:	e7b1      	b.n	8001e4a <__aeabi_dmul+0x412>
 8001ee6:	0765      	lsls	r5, r4, #29
 8001ee8:	0264      	lsls	r4, r4, #9
 8001eea:	0b24      	lsrs	r4, r4, #12
 8001eec:	08d2      	lsrs	r2, r2, #3
 8001eee:	4315      	orrs	r5, r2
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	e611      	b.n	8001b18 <__aeabi_dmul+0xe0>
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	0312      	lsls	r2, r2, #12
 8001ef8:	4314      	orrs	r4, r2
 8001efa:	0324      	lsls	r4, r4, #12
 8001efc:	4a01      	ldr	r2, [pc, #4]	; (8001f04 <__aeabi_dmul+0x4cc>)
 8001efe:	0b24      	lsrs	r4, r4, #12
 8001f00:	e60a      	b.n	8001b18 <__aeabi_dmul+0xe0>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff
 8001f08:	0000043e 	.word	0x0000043e
 8001f0c:	0000041e 	.word	0x0000041e

08001f10 <__aeabi_dsub>:
 8001f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f12:	4657      	mov	r7, sl
 8001f14:	464e      	mov	r6, r9
 8001f16:	4645      	mov	r5, r8
 8001f18:	46de      	mov	lr, fp
 8001f1a:	0004      	movs	r4, r0
 8001f1c:	b5e0      	push	{r5, r6, r7, lr}
 8001f1e:	001f      	movs	r7, r3
 8001f20:	0010      	movs	r0, r2
 8001f22:	030b      	lsls	r3, r1, #12
 8001f24:	0f62      	lsrs	r2, r4, #29
 8001f26:	004e      	lsls	r6, r1, #1
 8001f28:	0fcd      	lsrs	r5, r1, #31
 8001f2a:	0a5b      	lsrs	r3, r3, #9
 8001f2c:	0339      	lsls	r1, r7, #12
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	0a49      	lsrs	r1, r1, #9
 8001f32:	00e2      	lsls	r2, r4, #3
 8001f34:	0f44      	lsrs	r4, r0, #29
 8001f36:	4321      	orrs	r1, r4
 8001f38:	4cc2      	ldr	r4, [pc, #776]	; (8002244 <__aeabi_dsub+0x334>)
 8001f3a:	4691      	mov	r9, r2
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	00c0      	lsls	r0, r0, #3
 8001f40:	007a      	lsls	r2, r7, #1
 8001f42:	4680      	mov	r8, r0
 8001f44:	0d76      	lsrs	r6, r6, #21
 8001f46:	0d52      	lsrs	r2, r2, #21
 8001f48:	0fff      	lsrs	r7, r7, #31
 8001f4a:	42a2      	cmp	r2, r4
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x40>
 8001f4e:	e0b4      	b.n	80020ba <__aeabi_dsub+0x1aa>
 8001f50:	2401      	movs	r4, #1
 8001f52:	4067      	eors	r7, r4
 8001f54:	46bb      	mov	fp, r7
 8001f56:	42bd      	cmp	r5, r7
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x4c>
 8001f5a:	e088      	b.n	800206e <__aeabi_dsub+0x15e>
 8001f5c:	1ab4      	subs	r4, r6, r2
 8001f5e:	46a4      	mov	ip, r4
 8001f60:	2c00      	cmp	r4, #0
 8001f62:	dc00      	bgt.n	8001f66 <__aeabi_dsub+0x56>
 8001f64:	e0b2      	b.n	80020cc <__aeabi_dsub+0x1bc>
 8001f66:	2a00      	cmp	r2, #0
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dsub+0x5c>
 8001f6a:	e0c5      	b.n	80020f8 <__aeabi_dsub+0x1e8>
 8001f6c:	4ab5      	ldr	r2, [pc, #724]	; (8002244 <__aeabi_dsub+0x334>)
 8001f6e:	4296      	cmp	r6, r2
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x64>
 8001f72:	e28b      	b.n	800248c <__aeabi_dsub+0x57c>
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	0412      	lsls	r2, r2, #16
 8001f78:	4311      	orrs	r1, r2
 8001f7a:	4662      	mov	r2, ip
 8001f7c:	2a38      	cmp	r2, #56	; 0x38
 8001f7e:	dd00      	ble.n	8001f82 <__aeabi_dsub+0x72>
 8001f80:	e1a1      	b.n	80022c6 <__aeabi_dsub+0x3b6>
 8001f82:	2a1f      	cmp	r2, #31
 8001f84:	dd00      	ble.n	8001f88 <__aeabi_dsub+0x78>
 8001f86:	e216      	b.n	80023b6 <__aeabi_dsub+0x4a6>
 8001f88:	2720      	movs	r7, #32
 8001f8a:	000c      	movs	r4, r1
 8001f8c:	1abf      	subs	r7, r7, r2
 8001f8e:	40bc      	lsls	r4, r7
 8001f90:	0002      	movs	r2, r0
 8001f92:	46a0      	mov	r8, r4
 8001f94:	4664      	mov	r4, ip
 8001f96:	40b8      	lsls	r0, r7
 8001f98:	40e2      	lsrs	r2, r4
 8001f9a:	4644      	mov	r4, r8
 8001f9c:	4314      	orrs	r4, r2
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	1e50      	subs	r0, r2, #1
 8001fa2:	4182      	sbcs	r2, r0
 8001fa4:	4660      	mov	r0, ip
 8001fa6:	40c1      	lsrs	r1, r0
 8001fa8:	4322      	orrs	r2, r4
 8001faa:	1a5b      	subs	r3, r3, r1
 8001fac:	4649      	mov	r1, r9
 8001fae:	1a8c      	subs	r4, r1, r2
 8001fb0:	45a1      	cmp	r9, r4
 8001fb2:	4192      	sbcs	r2, r2
 8001fb4:	4252      	negs	r2, r2
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	4698      	mov	r8, r3
 8001fba:	4643      	mov	r3, r8
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	d400      	bmi.n	8001fc2 <__aeabi_dsub+0xb2>
 8001fc0:	e117      	b.n	80021f2 <__aeabi_dsub+0x2e2>
 8001fc2:	4643      	mov	r3, r8
 8001fc4:	025b      	lsls	r3, r3, #9
 8001fc6:	0a5b      	lsrs	r3, r3, #9
 8001fc8:	4698      	mov	r8, r3
 8001fca:	4643      	mov	r3, r8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d100      	bne.n	8001fd2 <__aeabi_dsub+0xc2>
 8001fd0:	e16c      	b.n	80022ac <__aeabi_dsub+0x39c>
 8001fd2:	4640      	mov	r0, r8
 8001fd4:	f000 fca8 	bl	8002928 <__clzsi2>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	3a08      	subs	r2, #8
 8001fdc:	2120      	movs	r1, #32
 8001fde:	0020      	movs	r0, r4
 8001fe0:	4643      	mov	r3, r8
 8001fe2:	1a89      	subs	r1, r1, r2
 8001fe4:	4093      	lsls	r3, r2
 8001fe6:	40c8      	lsrs	r0, r1
 8001fe8:	4094      	lsls	r4, r2
 8001fea:	4303      	orrs	r3, r0
 8001fec:	4296      	cmp	r6, r2
 8001fee:	dd00      	ble.n	8001ff2 <__aeabi_dsub+0xe2>
 8001ff0:	e157      	b.n	80022a2 <__aeabi_dsub+0x392>
 8001ff2:	1b96      	subs	r6, r2, r6
 8001ff4:	1c71      	adds	r1, r6, #1
 8001ff6:	291f      	cmp	r1, #31
 8001ff8:	dd00      	ble.n	8001ffc <__aeabi_dsub+0xec>
 8001ffa:	e1cb      	b.n	8002394 <__aeabi_dsub+0x484>
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	0018      	movs	r0, r3
 8002000:	0026      	movs	r6, r4
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	4094      	lsls	r4, r2
 8002006:	4090      	lsls	r0, r2
 8002008:	40ce      	lsrs	r6, r1
 800200a:	40cb      	lsrs	r3, r1
 800200c:	1e62      	subs	r2, r4, #1
 800200e:	4194      	sbcs	r4, r2
 8002010:	4330      	orrs	r0, r6
 8002012:	4698      	mov	r8, r3
 8002014:	2600      	movs	r6, #0
 8002016:	4304      	orrs	r4, r0
 8002018:	0763      	lsls	r3, r4, #29
 800201a:	d009      	beq.n	8002030 <__aeabi_dsub+0x120>
 800201c:	230f      	movs	r3, #15
 800201e:	4023      	ands	r3, r4
 8002020:	2b04      	cmp	r3, #4
 8002022:	d005      	beq.n	8002030 <__aeabi_dsub+0x120>
 8002024:	1d23      	adds	r3, r4, #4
 8002026:	42a3      	cmp	r3, r4
 8002028:	41a4      	sbcs	r4, r4
 800202a:	4264      	negs	r4, r4
 800202c:	44a0      	add	r8, r4
 800202e:	001c      	movs	r4, r3
 8002030:	4643      	mov	r3, r8
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	d400      	bmi.n	8002038 <__aeabi_dsub+0x128>
 8002036:	e0df      	b.n	80021f8 <__aeabi_dsub+0x2e8>
 8002038:	4b82      	ldr	r3, [pc, #520]	; (8002244 <__aeabi_dsub+0x334>)
 800203a:	3601      	adds	r6, #1
 800203c:	429e      	cmp	r6, r3
 800203e:	d100      	bne.n	8002042 <__aeabi_dsub+0x132>
 8002040:	e0fb      	b.n	800223a <__aeabi_dsub+0x32a>
 8002042:	4642      	mov	r2, r8
 8002044:	4b80      	ldr	r3, [pc, #512]	; (8002248 <__aeabi_dsub+0x338>)
 8002046:	08e4      	lsrs	r4, r4, #3
 8002048:	401a      	ands	r2, r3
 800204a:	0013      	movs	r3, r2
 800204c:	0571      	lsls	r1, r6, #21
 800204e:	0752      	lsls	r2, r2, #29
 8002050:	025b      	lsls	r3, r3, #9
 8002052:	4322      	orrs	r2, r4
 8002054:	0b1b      	lsrs	r3, r3, #12
 8002056:	0d49      	lsrs	r1, r1, #21
 8002058:	0509      	lsls	r1, r1, #20
 800205a:	07ed      	lsls	r5, r5, #31
 800205c:	4319      	orrs	r1, r3
 800205e:	4329      	orrs	r1, r5
 8002060:	0010      	movs	r0, r2
 8002062:	bcf0      	pop	{r4, r5, r6, r7}
 8002064:	46bb      	mov	fp, r7
 8002066:	46b2      	mov	sl, r6
 8002068:	46a9      	mov	r9, r5
 800206a:	46a0      	mov	r8, r4
 800206c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800206e:	1ab4      	subs	r4, r6, r2
 8002070:	46a4      	mov	ip, r4
 8002072:	2c00      	cmp	r4, #0
 8002074:	dd58      	ble.n	8002128 <__aeabi_dsub+0x218>
 8002076:	2a00      	cmp	r2, #0
 8002078:	d100      	bne.n	800207c <__aeabi_dsub+0x16c>
 800207a:	e09e      	b.n	80021ba <__aeabi_dsub+0x2aa>
 800207c:	4a71      	ldr	r2, [pc, #452]	; (8002244 <__aeabi_dsub+0x334>)
 800207e:	4296      	cmp	r6, r2
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x174>
 8002082:	e13b      	b.n	80022fc <__aeabi_dsub+0x3ec>
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	0412      	lsls	r2, r2, #16
 8002088:	4311      	orrs	r1, r2
 800208a:	4662      	mov	r2, ip
 800208c:	2a38      	cmp	r2, #56	; 0x38
 800208e:	dd00      	ble.n	8002092 <__aeabi_dsub+0x182>
 8002090:	e0c1      	b.n	8002216 <__aeabi_dsub+0x306>
 8002092:	2a1f      	cmp	r2, #31
 8002094:	dc00      	bgt.n	8002098 <__aeabi_dsub+0x188>
 8002096:	e1bb      	b.n	8002410 <__aeabi_dsub+0x500>
 8002098:	000c      	movs	r4, r1
 800209a:	3a20      	subs	r2, #32
 800209c:	40d4      	lsrs	r4, r2
 800209e:	0022      	movs	r2, r4
 80020a0:	4664      	mov	r4, ip
 80020a2:	2c20      	cmp	r4, #32
 80020a4:	d004      	beq.n	80020b0 <__aeabi_dsub+0x1a0>
 80020a6:	2740      	movs	r7, #64	; 0x40
 80020a8:	1b3f      	subs	r7, r7, r4
 80020aa:	40b9      	lsls	r1, r7
 80020ac:	4308      	orrs	r0, r1
 80020ae:	4680      	mov	r8, r0
 80020b0:	4644      	mov	r4, r8
 80020b2:	1e61      	subs	r1, r4, #1
 80020b4:	418c      	sbcs	r4, r1
 80020b6:	4314      	orrs	r4, r2
 80020b8:	e0b1      	b.n	800221e <__aeabi_dsub+0x30e>
 80020ba:	000c      	movs	r4, r1
 80020bc:	4304      	orrs	r4, r0
 80020be:	d02a      	beq.n	8002116 <__aeabi_dsub+0x206>
 80020c0:	46bb      	mov	fp, r7
 80020c2:	42bd      	cmp	r5, r7
 80020c4:	d02d      	beq.n	8002122 <__aeabi_dsub+0x212>
 80020c6:	4c61      	ldr	r4, [pc, #388]	; (800224c <__aeabi_dsub+0x33c>)
 80020c8:	46a4      	mov	ip, r4
 80020ca:	44b4      	add	ip, r6
 80020cc:	4664      	mov	r4, ip
 80020ce:	2c00      	cmp	r4, #0
 80020d0:	d05c      	beq.n	800218c <__aeabi_dsub+0x27c>
 80020d2:	1b94      	subs	r4, r2, r6
 80020d4:	46a4      	mov	ip, r4
 80020d6:	2e00      	cmp	r6, #0
 80020d8:	d000      	beq.n	80020dc <__aeabi_dsub+0x1cc>
 80020da:	e115      	b.n	8002308 <__aeabi_dsub+0x3f8>
 80020dc:	464d      	mov	r5, r9
 80020de:	431d      	orrs	r5, r3
 80020e0:	d100      	bne.n	80020e4 <__aeabi_dsub+0x1d4>
 80020e2:	e1c3      	b.n	800246c <__aeabi_dsub+0x55c>
 80020e4:	1e65      	subs	r5, r4, #1
 80020e6:	2c01      	cmp	r4, #1
 80020e8:	d100      	bne.n	80020ec <__aeabi_dsub+0x1dc>
 80020ea:	e20c      	b.n	8002506 <__aeabi_dsub+0x5f6>
 80020ec:	4e55      	ldr	r6, [pc, #340]	; (8002244 <__aeabi_dsub+0x334>)
 80020ee:	42b4      	cmp	r4, r6
 80020f0:	d100      	bne.n	80020f4 <__aeabi_dsub+0x1e4>
 80020f2:	e1f8      	b.n	80024e6 <__aeabi_dsub+0x5d6>
 80020f4:	46ac      	mov	ip, r5
 80020f6:	e10e      	b.n	8002316 <__aeabi_dsub+0x406>
 80020f8:	000a      	movs	r2, r1
 80020fa:	4302      	orrs	r2, r0
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x1f0>
 80020fe:	e136      	b.n	800236e <__aeabi_dsub+0x45e>
 8002100:	0022      	movs	r2, r4
 8002102:	3a01      	subs	r2, #1
 8002104:	2c01      	cmp	r4, #1
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x1fa>
 8002108:	e1c6      	b.n	8002498 <__aeabi_dsub+0x588>
 800210a:	4c4e      	ldr	r4, [pc, #312]	; (8002244 <__aeabi_dsub+0x334>)
 800210c:	45a4      	cmp	ip, r4
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x202>
 8002110:	e0f4      	b.n	80022fc <__aeabi_dsub+0x3ec>
 8002112:	4694      	mov	ip, r2
 8002114:	e731      	b.n	8001f7a <__aeabi_dsub+0x6a>
 8002116:	2401      	movs	r4, #1
 8002118:	4067      	eors	r7, r4
 800211a:	46bb      	mov	fp, r7
 800211c:	42bd      	cmp	r5, r7
 800211e:	d000      	beq.n	8002122 <__aeabi_dsub+0x212>
 8002120:	e71c      	b.n	8001f5c <__aeabi_dsub+0x4c>
 8002122:	4c4a      	ldr	r4, [pc, #296]	; (800224c <__aeabi_dsub+0x33c>)
 8002124:	46a4      	mov	ip, r4
 8002126:	44b4      	add	ip, r6
 8002128:	4664      	mov	r4, ip
 800212a:	2c00      	cmp	r4, #0
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x220>
 800212e:	e0cf      	b.n	80022d0 <__aeabi_dsub+0x3c0>
 8002130:	1b94      	subs	r4, r2, r6
 8002132:	46a4      	mov	ip, r4
 8002134:	2e00      	cmp	r6, #0
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x22a>
 8002138:	e15c      	b.n	80023f4 <__aeabi_dsub+0x4e4>
 800213a:	4e42      	ldr	r6, [pc, #264]	; (8002244 <__aeabi_dsub+0x334>)
 800213c:	42b2      	cmp	r2, r6
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x232>
 8002140:	e1ec      	b.n	800251c <__aeabi_dsub+0x60c>
 8002142:	2680      	movs	r6, #128	; 0x80
 8002144:	0436      	lsls	r6, r6, #16
 8002146:	4333      	orrs	r3, r6
 8002148:	4664      	mov	r4, ip
 800214a:	2c38      	cmp	r4, #56	; 0x38
 800214c:	dd00      	ble.n	8002150 <__aeabi_dsub+0x240>
 800214e:	e1b3      	b.n	80024b8 <__aeabi_dsub+0x5a8>
 8002150:	2c1f      	cmp	r4, #31
 8002152:	dd00      	ble.n	8002156 <__aeabi_dsub+0x246>
 8002154:	e238      	b.n	80025c8 <__aeabi_dsub+0x6b8>
 8002156:	2620      	movs	r6, #32
 8002158:	1b36      	subs	r6, r6, r4
 800215a:	001c      	movs	r4, r3
 800215c:	40b4      	lsls	r4, r6
 800215e:	464f      	mov	r7, r9
 8002160:	46a0      	mov	r8, r4
 8002162:	4664      	mov	r4, ip
 8002164:	40e7      	lsrs	r7, r4
 8002166:	4644      	mov	r4, r8
 8002168:	433c      	orrs	r4, r7
 800216a:	464f      	mov	r7, r9
 800216c:	40b7      	lsls	r7, r6
 800216e:	003e      	movs	r6, r7
 8002170:	1e77      	subs	r7, r6, #1
 8002172:	41be      	sbcs	r6, r7
 8002174:	4334      	orrs	r4, r6
 8002176:	4666      	mov	r6, ip
 8002178:	40f3      	lsrs	r3, r6
 800217a:	18c9      	adds	r1, r1, r3
 800217c:	1824      	adds	r4, r4, r0
 800217e:	4284      	cmp	r4, r0
 8002180:	419b      	sbcs	r3, r3
 8002182:	425b      	negs	r3, r3
 8002184:	4698      	mov	r8, r3
 8002186:	0016      	movs	r6, r2
 8002188:	4488      	add	r8, r1
 800218a:	e04e      	b.n	800222a <__aeabi_dsub+0x31a>
 800218c:	4a30      	ldr	r2, [pc, #192]	; (8002250 <__aeabi_dsub+0x340>)
 800218e:	1c74      	adds	r4, r6, #1
 8002190:	4214      	tst	r4, r2
 8002192:	d000      	beq.n	8002196 <__aeabi_dsub+0x286>
 8002194:	e0d6      	b.n	8002344 <__aeabi_dsub+0x434>
 8002196:	464a      	mov	r2, r9
 8002198:	431a      	orrs	r2, r3
 800219a:	2e00      	cmp	r6, #0
 800219c:	d000      	beq.n	80021a0 <__aeabi_dsub+0x290>
 800219e:	e15b      	b.n	8002458 <__aeabi_dsub+0x548>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dsub+0x296>
 80021a4:	e1a5      	b.n	80024f2 <__aeabi_dsub+0x5e2>
 80021a6:	000a      	movs	r2, r1
 80021a8:	4302      	orrs	r2, r0
 80021aa:	d000      	beq.n	80021ae <__aeabi_dsub+0x29e>
 80021ac:	e1bb      	b.n	8002526 <__aeabi_dsub+0x616>
 80021ae:	464a      	mov	r2, r9
 80021b0:	0759      	lsls	r1, r3, #29
 80021b2:	08d2      	lsrs	r2, r2, #3
 80021b4:	430a      	orrs	r2, r1
 80021b6:	08db      	lsrs	r3, r3, #3
 80021b8:	e027      	b.n	800220a <__aeabi_dsub+0x2fa>
 80021ba:	000a      	movs	r2, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	d100      	bne.n	80021c2 <__aeabi_dsub+0x2b2>
 80021c0:	e174      	b.n	80024ac <__aeabi_dsub+0x59c>
 80021c2:	0022      	movs	r2, r4
 80021c4:	3a01      	subs	r2, #1
 80021c6:	2c01      	cmp	r4, #1
 80021c8:	d005      	beq.n	80021d6 <__aeabi_dsub+0x2c6>
 80021ca:	4c1e      	ldr	r4, [pc, #120]	; (8002244 <__aeabi_dsub+0x334>)
 80021cc:	45a4      	cmp	ip, r4
 80021ce:	d100      	bne.n	80021d2 <__aeabi_dsub+0x2c2>
 80021d0:	e094      	b.n	80022fc <__aeabi_dsub+0x3ec>
 80021d2:	4694      	mov	ip, r2
 80021d4:	e759      	b.n	800208a <__aeabi_dsub+0x17a>
 80021d6:	4448      	add	r0, r9
 80021d8:	4548      	cmp	r0, r9
 80021da:	4192      	sbcs	r2, r2
 80021dc:	185b      	adds	r3, r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	0004      	movs	r4, r0
 80021e2:	4252      	negs	r2, r2
 80021e4:	4490      	add	r8, r2
 80021e6:	4643      	mov	r3, r8
 80021e8:	2602      	movs	r6, #2
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	d500      	bpl.n	80021f0 <__aeabi_dsub+0x2e0>
 80021ee:	e0c4      	b.n	800237a <__aeabi_dsub+0x46a>
 80021f0:	3e01      	subs	r6, #1
 80021f2:	0763      	lsls	r3, r4, #29
 80021f4:	d000      	beq.n	80021f8 <__aeabi_dsub+0x2e8>
 80021f6:	e711      	b.n	800201c <__aeabi_dsub+0x10c>
 80021f8:	4643      	mov	r3, r8
 80021fa:	46b4      	mov	ip, r6
 80021fc:	0759      	lsls	r1, r3, #29
 80021fe:	08e2      	lsrs	r2, r4, #3
 8002200:	430a      	orrs	r2, r1
 8002202:	08db      	lsrs	r3, r3, #3
 8002204:	490f      	ldr	r1, [pc, #60]	; (8002244 <__aeabi_dsub+0x334>)
 8002206:	458c      	cmp	ip, r1
 8002208:	d040      	beq.n	800228c <__aeabi_dsub+0x37c>
 800220a:	4661      	mov	r1, ip
 800220c:	031b      	lsls	r3, r3, #12
 800220e:	0549      	lsls	r1, r1, #21
 8002210:	0b1b      	lsrs	r3, r3, #12
 8002212:	0d49      	lsrs	r1, r1, #21
 8002214:	e720      	b.n	8002058 <__aeabi_dsub+0x148>
 8002216:	4301      	orrs	r1, r0
 8002218:	000c      	movs	r4, r1
 800221a:	1e61      	subs	r1, r4, #1
 800221c:	418c      	sbcs	r4, r1
 800221e:	444c      	add	r4, r9
 8002220:	454c      	cmp	r4, r9
 8002222:	4192      	sbcs	r2, r2
 8002224:	4252      	negs	r2, r2
 8002226:	4690      	mov	r8, r2
 8002228:	4498      	add	r8, r3
 800222a:	4643      	mov	r3, r8
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	d5e0      	bpl.n	80021f2 <__aeabi_dsub+0x2e2>
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <__aeabi_dsub+0x334>)
 8002232:	3601      	adds	r6, #1
 8002234:	429e      	cmp	r6, r3
 8002236:	d000      	beq.n	800223a <__aeabi_dsub+0x32a>
 8002238:	e09f      	b.n	800237a <__aeabi_dsub+0x46a>
 800223a:	0031      	movs	r1, r6
 800223c:	2300      	movs	r3, #0
 800223e:	2200      	movs	r2, #0
 8002240:	e70a      	b.n	8002058 <__aeabi_dsub+0x148>
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	000007ff 	.word	0x000007ff
 8002248:	ff7fffff 	.word	0xff7fffff
 800224c:	fffff801 	.word	0xfffff801
 8002250:	000007fe 	.word	0x000007fe
 8002254:	2a00      	cmp	r2, #0
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x34a>
 8002258:	e160      	b.n	800251c <__aeabi_dsub+0x60c>
 800225a:	000a      	movs	r2, r1
 800225c:	4302      	orrs	r2, r0
 800225e:	d04d      	beq.n	80022fc <__aeabi_dsub+0x3ec>
 8002260:	464a      	mov	r2, r9
 8002262:	075c      	lsls	r4, r3, #29
 8002264:	08d2      	lsrs	r2, r2, #3
 8002266:	4322      	orrs	r2, r4
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	08db      	lsrs	r3, r3, #3
 800226c:	0324      	lsls	r4, r4, #12
 800226e:	4223      	tst	r3, r4
 8002270:	d007      	beq.n	8002282 <__aeabi_dsub+0x372>
 8002272:	08ce      	lsrs	r6, r1, #3
 8002274:	4226      	tst	r6, r4
 8002276:	d104      	bne.n	8002282 <__aeabi_dsub+0x372>
 8002278:	465d      	mov	r5, fp
 800227a:	0033      	movs	r3, r6
 800227c:	08c2      	lsrs	r2, r0, #3
 800227e:	0749      	lsls	r1, r1, #29
 8002280:	430a      	orrs	r2, r1
 8002282:	0f51      	lsrs	r1, r2, #29
 8002284:	00d2      	lsls	r2, r2, #3
 8002286:	08d2      	lsrs	r2, r2, #3
 8002288:	0749      	lsls	r1, r1, #29
 800228a:	430a      	orrs	r2, r1
 800228c:	0011      	movs	r1, r2
 800228e:	4319      	orrs	r1, r3
 8002290:	d100      	bne.n	8002294 <__aeabi_dsub+0x384>
 8002292:	e1c8      	b.n	8002626 <__aeabi_dsub+0x716>
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	0309      	lsls	r1, r1, #12
 8002298:	430b      	orrs	r3, r1
 800229a:	031b      	lsls	r3, r3, #12
 800229c:	49d5      	ldr	r1, [pc, #852]	; (80025f4 <__aeabi_dsub+0x6e4>)
 800229e:	0b1b      	lsrs	r3, r3, #12
 80022a0:	e6da      	b.n	8002058 <__aeabi_dsub+0x148>
 80022a2:	49d5      	ldr	r1, [pc, #852]	; (80025f8 <__aeabi_dsub+0x6e8>)
 80022a4:	1ab6      	subs	r6, r6, r2
 80022a6:	400b      	ands	r3, r1
 80022a8:	4698      	mov	r8, r3
 80022aa:	e6b5      	b.n	8002018 <__aeabi_dsub+0x108>
 80022ac:	0020      	movs	r0, r4
 80022ae:	f000 fb3b 	bl	8002928 <__clzsi2>
 80022b2:	0002      	movs	r2, r0
 80022b4:	3218      	adds	r2, #24
 80022b6:	2a1f      	cmp	r2, #31
 80022b8:	dc00      	bgt.n	80022bc <__aeabi_dsub+0x3ac>
 80022ba:	e68f      	b.n	8001fdc <__aeabi_dsub+0xcc>
 80022bc:	0023      	movs	r3, r4
 80022be:	3808      	subs	r0, #8
 80022c0:	4083      	lsls	r3, r0
 80022c2:	2400      	movs	r4, #0
 80022c4:	e692      	b.n	8001fec <__aeabi_dsub+0xdc>
 80022c6:	4308      	orrs	r0, r1
 80022c8:	0002      	movs	r2, r0
 80022ca:	1e50      	subs	r0, r2, #1
 80022cc:	4182      	sbcs	r2, r0
 80022ce:	e66d      	b.n	8001fac <__aeabi_dsub+0x9c>
 80022d0:	4cca      	ldr	r4, [pc, #808]	; (80025fc <__aeabi_dsub+0x6ec>)
 80022d2:	1c72      	adds	r2, r6, #1
 80022d4:	4222      	tst	r2, r4
 80022d6:	d000      	beq.n	80022da <__aeabi_dsub+0x3ca>
 80022d8:	e0ad      	b.n	8002436 <__aeabi_dsub+0x526>
 80022da:	464a      	mov	r2, r9
 80022dc:	431a      	orrs	r2, r3
 80022de:	2e00      	cmp	r6, #0
 80022e0:	d1b8      	bne.n	8002254 <__aeabi_dsub+0x344>
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d100      	bne.n	80022e8 <__aeabi_dsub+0x3d8>
 80022e6:	e158      	b.n	800259a <__aeabi_dsub+0x68a>
 80022e8:	000a      	movs	r2, r1
 80022ea:	4302      	orrs	r2, r0
 80022ec:	d000      	beq.n	80022f0 <__aeabi_dsub+0x3e0>
 80022ee:	e159      	b.n	80025a4 <__aeabi_dsub+0x694>
 80022f0:	464a      	mov	r2, r9
 80022f2:	0759      	lsls	r1, r3, #29
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	430a      	orrs	r2, r1
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	e786      	b.n	800220a <__aeabi_dsub+0x2fa>
 80022fc:	464a      	mov	r2, r9
 80022fe:	0759      	lsls	r1, r3, #29
 8002300:	08d2      	lsrs	r2, r2, #3
 8002302:	430a      	orrs	r2, r1
 8002304:	08db      	lsrs	r3, r3, #3
 8002306:	e7c1      	b.n	800228c <__aeabi_dsub+0x37c>
 8002308:	4dba      	ldr	r5, [pc, #744]	; (80025f4 <__aeabi_dsub+0x6e4>)
 800230a:	42aa      	cmp	r2, r5
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x400>
 800230e:	e11e      	b.n	800254e <__aeabi_dsub+0x63e>
 8002310:	2580      	movs	r5, #128	; 0x80
 8002312:	042d      	lsls	r5, r5, #16
 8002314:	432b      	orrs	r3, r5
 8002316:	4664      	mov	r4, ip
 8002318:	2c38      	cmp	r4, #56	; 0x38
 800231a:	dc5d      	bgt.n	80023d8 <__aeabi_dsub+0x4c8>
 800231c:	2c1f      	cmp	r4, #31
 800231e:	dd00      	ble.n	8002322 <__aeabi_dsub+0x412>
 8002320:	e0d0      	b.n	80024c4 <__aeabi_dsub+0x5b4>
 8002322:	2520      	movs	r5, #32
 8002324:	4667      	mov	r7, ip
 8002326:	1b2d      	subs	r5, r5, r4
 8002328:	464e      	mov	r6, r9
 800232a:	001c      	movs	r4, r3
 800232c:	40fe      	lsrs	r6, r7
 800232e:	40ac      	lsls	r4, r5
 8002330:	4334      	orrs	r4, r6
 8002332:	464e      	mov	r6, r9
 8002334:	40ae      	lsls	r6, r5
 8002336:	0035      	movs	r5, r6
 8002338:	40fb      	lsrs	r3, r7
 800233a:	1e6e      	subs	r6, r5, #1
 800233c:	41b5      	sbcs	r5, r6
 800233e:	1ac9      	subs	r1, r1, r3
 8002340:	432c      	orrs	r4, r5
 8002342:	e04e      	b.n	80023e2 <__aeabi_dsub+0x4d2>
 8002344:	464a      	mov	r2, r9
 8002346:	1a14      	subs	r4, r2, r0
 8002348:	45a1      	cmp	r9, r4
 800234a:	4192      	sbcs	r2, r2
 800234c:	4252      	negs	r2, r2
 800234e:	4690      	mov	r8, r2
 8002350:	1a5f      	subs	r7, r3, r1
 8002352:	003a      	movs	r2, r7
 8002354:	4647      	mov	r7, r8
 8002356:	1bd2      	subs	r2, r2, r7
 8002358:	4690      	mov	r8, r2
 800235a:	0212      	lsls	r2, r2, #8
 800235c:	d500      	bpl.n	8002360 <__aeabi_dsub+0x450>
 800235e:	e08b      	b.n	8002478 <__aeabi_dsub+0x568>
 8002360:	4642      	mov	r2, r8
 8002362:	4322      	orrs	r2, r4
 8002364:	d000      	beq.n	8002368 <__aeabi_dsub+0x458>
 8002366:	e630      	b.n	8001fca <__aeabi_dsub+0xba>
 8002368:	2300      	movs	r3, #0
 800236a:	2500      	movs	r5, #0
 800236c:	e74d      	b.n	800220a <__aeabi_dsub+0x2fa>
 800236e:	464a      	mov	r2, r9
 8002370:	0759      	lsls	r1, r3, #29
 8002372:	08d2      	lsrs	r2, r2, #3
 8002374:	430a      	orrs	r2, r1
 8002376:	08db      	lsrs	r3, r3, #3
 8002378:	e744      	b.n	8002204 <__aeabi_dsub+0x2f4>
 800237a:	4642      	mov	r2, r8
 800237c:	4b9e      	ldr	r3, [pc, #632]	; (80025f8 <__aeabi_dsub+0x6e8>)
 800237e:	0861      	lsrs	r1, r4, #1
 8002380:	401a      	ands	r2, r3
 8002382:	0013      	movs	r3, r2
 8002384:	2201      	movs	r2, #1
 8002386:	4014      	ands	r4, r2
 8002388:	430c      	orrs	r4, r1
 800238a:	07da      	lsls	r2, r3, #31
 800238c:	085b      	lsrs	r3, r3, #1
 800238e:	4698      	mov	r8, r3
 8002390:	4314      	orrs	r4, r2
 8002392:	e641      	b.n	8002018 <__aeabi_dsub+0x108>
 8002394:	001a      	movs	r2, r3
 8002396:	3e1f      	subs	r6, #31
 8002398:	40f2      	lsrs	r2, r6
 800239a:	0016      	movs	r6, r2
 800239c:	2920      	cmp	r1, #32
 800239e:	d003      	beq.n	80023a8 <__aeabi_dsub+0x498>
 80023a0:	2240      	movs	r2, #64	; 0x40
 80023a2:	1a51      	subs	r1, r2, r1
 80023a4:	408b      	lsls	r3, r1
 80023a6:	431c      	orrs	r4, r3
 80023a8:	1e62      	subs	r2, r4, #1
 80023aa:	4194      	sbcs	r4, r2
 80023ac:	2300      	movs	r3, #0
 80023ae:	4334      	orrs	r4, r6
 80023b0:	4698      	mov	r8, r3
 80023b2:	2600      	movs	r6, #0
 80023b4:	e71d      	b.n	80021f2 <__aeabi_dsub+0x2e2>
 80023b6:	000c      	movs	r4, r1
 80023b8:	3a20      	subs	r2, #32
 80023ba:	40d4      	lsrs	r4, r2
 80023bc:	0022      	movs	r2, r4
 80023be:	4664      	mov	r4, ip
 80023c0:	2c20      	cmp	r4, #32
 80023c2:	d004      	beq.n	80023ce <__aeabi_dsub+0x4be>
 80023c4:	2740      	movs	r7, #64	; 0x40
 80023c6:	1b3f      	subs	r7, r7, r4
 80023c8:	40b9      	lsls	r1, r7
 80023ca:	4308      	orrs	r0, r1
 80023cc:	4680      	mov	r8, r0
 80023ce:	4644      	mov	r4, r8
 80023d0:	1e61      	subs	r1, r4, #1
 80023d2:	418c      	sbcs	r4, r1
 80023d4:	4322      	orrs	r2, r4
 80023d6:	e5e9      	b.n	8001fac <__aeabi_dsub+0x9c>
 80023d8:	464c      	mov	r4, r9
 80023da:	4323      	orrs	r3, r4
 80023dc:	001c      	movs	r4, r3
 80023de:	1e63      	subs	r3, r4, #1
 80023e0:	419c      	sbcs	r4, r3
 80023e2:	1b04      	subs	r4, r0, r4
 80023e4:	42a0      	cmp	r0, r4
 80023e6:	419b      	sbcs	r3, r3
 80023e8:	425b      	negs	r3, r3
 80023ea:	1acb      	subs	r3, r1, r3
 80023ec:	4698      	mov	r8, r3
 80023ee:	465d      	mov	r5, fp
 80023f0:	0016      	movs	r6, r2
 80023f2:	e5e2      	b.n	8001fba <__aeabi_dsub+0xaa>
 80023f4:	464e      	mov	r6, r9
 80023f6:	431e      	orrs	r6, r3
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x4ec>
 80023fa:	e0ae      	b.n	800255a <__aeabi_dsub+0x64a>
 80023fc:	1e66      	subs	r6, r4, #1
 80023fe:	2c01      	cmp	r4, #1
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x4f4>
 8002402:	e0fd      	b.n	8002600 <__aeabi_dsub+0x6f0>
 8002404:	4f7b      	ldr	r7, [pc, #492]	; (80025f4 <__aeabi_dsub+0x6e4>)
 8002406:	42bc      	cmp	r4, r7
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x4fc>
 800240a:	e107      	b.n	800261c <__aeabi_dsub+0x70c>
 800240c:	46b4      	mov	ip, r6
 800240e:	e69b      	b.n	8002148 <__aeabi_dsub+0x238>
 8002410:	4664      	mov	r4, ip
 8002412:	2220      	movs	r2, #32
 8002414:	1b12      	subs	r2, r2, r4
 8002416:	000c      	movs	r4, r1
 8002418:	4094      	lsls	r4, r2
 800241a:	0007      	movs	r7, r0
 800241c:	4090      	lsls	r0, r2
 800241e:	46a0      	mov	r8, r4
 8002420:	4664      	mov	r4, ip
 8002422:	1e42      	subs	r2, r0, #1
 8002424:	4190      	sbcs	r0, r2
 8002426:	4662      	mov	r2, ip
 8002428:	40e7      	lsrs	r7, r4
 800242a:	4644      	mov	r4, r8
 800242c:	40d1      	lsrs	r1, r2
 800242e:	433c      	orrs	r4, r7
 8002430:	4304      	orrs	r4, r0
 8002432:	185b      	adds	r3, r3, r1
 8002434:	e6f3      	b.n	800221e <__aeabi_dsub+0x30e>
 8002436:	4c6f      	ldr	r4, [pc, #444]	; (80025f4 <__aeabi_dsub+0x6e4>)
 8002438:	42a2      	cmp	r2, r4
 800243a:	d100      	bne.n	800243e <__aeabi_dsub+0x52e>
 800243c:	e0d5      	b.n	80025ea <__aeabi_dsub+0x6da>
 800243e:	4448      	add	r0, r9
 8002440:	185b      	adds	r3, r3, r1
 8002442:	4548      	cmp	r0, r9
 8002444:	4189      	sbcs	r1, r1
 8002446:	4249      	negs	r1, r1
 8002448:	185b      	adds	r3, r3, r1
 800244a:	07dc      	lsls	r4, r3, #31
 800244c:	0840      	lsrs	r0, r0, #1
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	4698      	mov	r8, r3
 8002452:	0016      	movs	r6, r2
 8002454:	4304      	orrs	r4, r0
 8002456:	e6cc      	b.n	80021f2 <__aeabi_dsub+0x2e2>
 8002458:	2a00      	cmp	r2, #0
 800245a:	d000      	beq.n	800245e <__aeabi_dsub+0x54e>
 800245c:	e082      	b.n	8002564 <__aeabi_dsub+0x654>
 800245e:	000a      	movs	r2, r1
 8002460:	4302      	orrs	r2, r0
 8002462:	d140      	bne.n	80024e6 <__aeabi_dsub+0x5d6>
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	2500      	movs	r5, #0
 8002468:	031b      	lsls	r3, r3, #12
 800246a:	e713      	b.n	8002294 <__aeabi_dsub+0x384>
 800246c:	074b      	lsls	r3, r1, #29
 800246e:	08c2      	lsrs	r2, r0, #3
 8002470:	431a      	orrs	r2, r3
 8002472:	465d      	mov	r5, fp
 8002474:	08cb      	lsrs	r3, r1, #3
 8002476:	e6c5      	b.n	8002204 <__aeabi_dsub+0x2f4>
 8002478:	464a      	mov	r2, r9
 800247a:	1a84      	subs	r4, r0, r2
 800247c:	42a0      	cmp	r0, r4
 800247e:	4192      	sbcs	r2, r2
 8002480:	1acb      	subs	r3, r1, r3
 8002482:	4252      	negs	r2, r2
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	4698      	mov	r8, r3
 8002488:	465d      	mov	r5, fp
 800248a:	e59e      	b.n	8001fca <__aeabi_dsub+0xba>
 800248c:	464a      	mov	r2, r9
 800248e:	0759      	lsls	r1, r3, #29
 8002490:	08d2      	lsrs	r2, r2, #3
 8002492:	430a      	orrs	r2, r1
 8002494:	08db      	lsrs	r3, r3, #3
 8002496:	e6f9      	b.n	800228c <__aeabi_dsub+0x37c>
 8002498:	464a      	mov	r2, r9
 800249a:	1a14      	subs	r4, r2, r0
 800249c:	45a1      	cmp	r9, r4
 800249e:	4192      	sbcs	r2, r2
 80024a0:	1a5b      	subs	r3, r3, r1
 80024a2:	4252      	negs	r2, r2
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	4698      	mov	r8, r3
 80024a8:	2601      	movs	r6, #1
 80024aa:	e586      	b.n	8001fba <__aeabi_dsub+0xaa>
 80024ac:	464a      	mov	r2, r9
 80024ae:	0759      	lsls	r1, r3, #29
 80024b0:	08d2      	lsrs	r2, r2, #3
 80024b2:	430a      	orrs	r2, r1
 80024b4:	08db      	lsrs	r3, r3, #3
 80024b6:	e6a5      	b.n	8002204 <__aeabi_dsub+0x2f4>
 80024b8:	464c      	mov	r4, r9
 80024ba:	4323      	orrs	r3, r4
 80024bc:	001c      	movs	r4, r3
 80024be:	1e63      	subs	r3, r4, #1
 80024c0:	419c      	sbcs	r4, r3
 80024c2:	e65b      	b.n	800217c <__aeabi_dsub+0x26c>
 80024c4:	4665      	mov	r5, ip
 80024c6:	001e      	movs	r6, r3
 80024c8:	3d20      	subs	r5, #32
 80024ca:	40ee      	lsrs	r6, r5
 80024cc:	2c20      	cmp	r4, #32
 80024ce:	d005      	beq.n	80024dc <__aeabi_dsub+0x5cc>
 80024d0:	2540      	movs	r5, #64	; 0x40
 80024d2:	1b2d      	subs	r5, r5, r4
 80024d4:	40ab      	lsls	r3, r5
 80024d6:	464c      	mov	r4, r9
 80024d8:	431c      	orrs	r4, r3
 80024da:	46a2      	mov	sl, r4
 80024dc:	4654      	mov	r4, sl
 80024de:	1e63      	subs	r3, r4, #1
 80024e0:	419c      	sbcs	r4, r3
 80024e2:	4334      	orrs	r4, r6
 80024e4:	e77d      	b.n	80023e2 <__aeabi_dsub+0x4d2>
 80024e6:	074b      	lsls	r3, r1, #29
 80024e8:	08c2      	lsrs	r2, r0, #3
 80024ea:	431a      	orrs	r2, r3
 80024ec:	465d      	mov	r5, fp
 80024ee:	08cb      	lsrs	r3, r1, #3
 80024f0:	e6cc      	b.n	800228c <__aeabi_dsub+0x37c>
 80024f2:	000a      	movs	r2, r1
 80024f4:	4302      	orrs	r2, r0
 80024f6:	d100      	bne.n	80024fa <__aeabi_dsub+0x5ea>
 80024f8:	e736      	b.n	8002368 <__aeabi_dsub+0x458>
 80024fa:	074b      	lsls	r3, r1, #29
 80024fc:	08c2      	lsrs	r2, r0, #3
 80024fe:	431a      	orrs	r2, r3
 8002500:	465d      	mov	r5, fp
 8002502:	08cb      	lsrs	r3, r1, #3
 8002504:	e681      	b.n	800220a <__aeabi_dsub+0x2fa>
 8002506:	464a      	mov	r2, r9
 8002508:	1a84      	subs	r4, r0, r2
 800250a:	42a0      	cmp	r0, r4
 800250c:	4192      	sbcs	r2, r2
 800250e:	1acb      	subs	r3, r1, r3
 8002510:	4252      	negs	r2, r2
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	4698      	mov	r8, r3
 8002516:	465d      	mov	r5, fp
 8002518:	2601      	movs	r6, #1
 800251a:	e54e      	b.n	8001fba <__aeabi_dsub+0xaa>
 800251c:	074b      	lsls	r3, r1, #29
 800251e:	08c2      	lsrs	r2, r0, #3
 8002520:	431a      	orrs	r2, r3
 8002522:	08cb      	lsrs	r3, r1, #3
 8002524:	e6b2      	b.n	800228c <__aeabi_dsub+0x37c>
 8002526:	464a      	mov	r2, r9
 8002528:	1a14      	subs	r4, r2, r0
 800252a:	45a1      	cmp	r9, r4
 800252c:	4192      	sbcs	r2, r2
 800252e:	1a5f      	subs	r7, r3, r1
 8002530:	4252      	negs	r2, r2
 8002532:	1aba      	subs	r2, r7, r2
 8002534:	4690      	mov	r8, r2
 8002536:	0212      	lsls	r2, r2, #8
 8002538:	d56b      	bpl.n	8002612 <__aeabi_dsub+0x702>
 800253a:	464a      	mov	r2, r9
 800253c:	1a84      	subs	r4, r0, r2
 800253e:	42a0      	cmp	r0, r4
 8002540:	4192      	sbcs	r2, r2
 8002542:	1acb      	subs	r3, r1, r3
 8002544:	4252      	negs	r2, r2
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	4698      	mov	r8, r3
 800254a:	465d      	mov	r5, fp
 800254c:	e564      	b.n	8002018 <__aeabi_dsub+0x108>
 800254e:	074b      	lsls	r3, r1, #29
 8002550:	08c2      	lsrs	r2, r0, #3
 8002552:	431a      	orrs	r2, r3
 8002554:	465d      	mov	r5, fp
 8002556:	08cb      	lsrs	r3, r1, #3
 8002558:	e698      	b.n	800228c <__aeabi_dsub+0x37c>
 800255a:	074b      	lsls	r3, r1, #29
 800255c:	08c2      	lsrs	r2, r0, #3
 800255e:	431a      	orrs	r2, r3
 8002560:	08cb      	lsrs	r3, r1, #3
 8002562:	e64f      	b.n	8002204 <__aeabi_dsub+0x2f4>
 8002564:	000a      	movs	r2, r1
 8002566:	4302      	orrs	r2, r0
 8002568:	d090      	beq.n	800248c <__aeabi_dsub+0x57c>
 800256a:	464a      	mov	r2, r9
 800256c:	075c      	lsls	r4, r3, #29
 800256e:	08d2      	lsrs	r2, r2, #3
 8002570:	4314      	orrs	r4, r2
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	08db      	lsrs	r3, r3, #3
 8002576:	0312      	lsls	r2, r2, #12
 8002578:	4213      	tst	r3, r2
 800257a:	d008      	beq.n	800258e <__aeabi_dsub+0x67e>
 800257c:	08ce      	lsrs	r6, r1, #3
 800257e:	4216      	tst	r6, r2
 8002580:	d105      	bne.n	800258e <__aeabi_dsub+0x67e>
 8002582:	08c0      	lsrs	r0, r0, #3
 8002584:	0749      	lsls	r1, r1, #29
 8002586:	4308      	orrs	r0, r1
 8002588:	0004      	movs	r4, r0
 800258a:	465d      	mov	r5, fp
 800258c:	0033      	movs	r3, r6
 800258e:	0f61      	lsrs	r1, r4, #29
 8002590:	00e2      	lsls	r2, r4, #3
 8002592:	0749      	lsls	r1, r1, #29
 8002594:	08d2      	lsrs	r2, r2, #3
 8002596:	430a      	orrs	r2, r1
 8002598:	e678      	b.n	800228c <__aeabi_dsub+0x37c>
 800259a:	074b      	lsls	r3, r1, #29
 800259c:	08c2      	lsrs	r2, r0, #3
 800259e:	431a      	orrs	r2, r3
 80025a0:	08cb      	lsrs	r3, r1, #3
 80025a2:	e632      	b.n	800220a <__aeabi_dsub+0x2fa>
 80025a4:	4448      	add	r0, r9
 80025a6:	185b      	adds	r3, r3, r1
 80025a8:	4548      	cmp	r0, r9
 80025aa:	4192      	sbcs	r2, r2
 80025ac:	4698      	mov	r8, r3
 80025ae:	4252      	negs	r2, r2
 80025b0:	4490      	add	r8, r2
 80025b2:	4643      	mov	r3, r8
 80025b4:	0004      	movs	r4, r0
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	d400      	bmi.n	80025bc <__aeabi_dsub+0x6ac>
 80025ba:	e61a      	b.n	80021f2 <__aeabi_dsub+0x2e2>
 80025bc:	4642      	mov	r2, r8
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <__aeabi_dsub+0x6e8>)
 80025c0:	2601      	movs	r6, #1
 80025c2:	401a      	ands	r2, r3
 80025c4:	4690      	mov	r8, r2
 80025c6:	e614      	b.n	80021f2 <__aeabi_dsub+0x2e2>
 80025c8:	4666      	mov	r6, ip
 80025ca:	001f      	movs	r7, r3
 80025cc:	3e20      	subs	r6, #32
 80025ce:	40f7      	lsrs	r7, r6
 80025d0:	2c20      	cmp	r4, #32
 80025d2:	d005      	beq.n	80025e0 <__aeabi_dsub+0x6d0>
 80025d4:	2640      	movs	r6, #64	; 0x40
 80025d6:	1b36      	subs	r6, r6, r4
 80025d8:	40b3      	lsls	r3, r6
 80025da:	464c      	mov	r4, r9
 80025dc:	431c      	orrs	r4, r3
 80025de:	46a2      	mov	sl, r4
 80025e0:	4654      	mov	r4, sl
 80025e2:	1e63      	subs	r3, r4, #1
 80025e4:	419c      	sbcs	r4, r3
 80025e6:	433c      	orrs	r4, r7
 80025e8:	e5c8      	b.n	800217c <__aeabi_dsub+0x26c>
 80025ea:	0011      	movs	r1, r2
 80025ec:	2300      	movs	r3, #0
 80025ee:	2200      	movs	r2, #0
 80025f0:	e532      	b.n	8002058 <__aeabi_dsub+0x148>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	000007ff 	.word	0x000007ff
 80025f8:	ff7fffff 	.word	0xff7fffff
 80025fc:	000007fe 	.word	0x000007fe
 8002600:	464a      	mov	r2, r9
 8002602:	1814      	adds	r4, r2, r0
 8002604:	4284      	cmp	r4, r0
 8002606:	4192      	sbcs	r2, r2
 8002608:	185b      	adds	r3, r3, r1
 800260a:	4698      	mov	r8, r3
 800260c:	4252      	negs	r2, r2
 800260e:	4490      	add	r8, r2
 8002610:	e5e9      	b.n	80021e6 <__aeabi_dsub+0x2d6>
 8002612:	4642      	mov	r2, r8
 8002614:	4322      	orrs	r2, r4
 8002616:	d100      	bne.n	800261a <__aeabi_dsub+0x70a>
 8002618:	e6a6      	b.n	8002368 <__aeabi_dsub+0x458>
 800261a:	e5ea      	b.n	80021f2 <__aeabi_dsub+0x2e2>
 800261c:	074b      	lsls	r3, r1, #29
 800261e:	08c2      	lsrs	r2, r0, #3
 8002620:	431a      	orrs	r2, r3
 8002622:	08cb      	lsrs	r3, r1, #3
 8002624:	e632      	b.n	800228c <__aeabi_dsub+0x37c>
 8002626:	2200      	movs	r2, #0
 8002628:	4901      	ldr	r1, [pc, #4]	; (8002630 <__aeabi_dsub+0x720>)
 800262a:	0013      	movs	r3, r2
 800262c:	e514      	b.n	8002058 <__aeabi_dsub+0x148>
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	000007ff 	.word	0x000007ff

08002634 <__aeabi_dcmpun>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	0005      	movs	r5, r0
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <__aeabi_dcmpun+0x38>)
 800263a:	030c      	lsls	r4, r1, #12
 800263c:	0016      	movs	r6, r2
 800263e:	0049      	lsls	r1, r1, #1
 8002640:	031a      	lsls	r2, r3, #12
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	0b24      	lsrs	r4, r4, #12
 8002646:	0d49      	lsrs	r1, r1, #21
 8002648:	0b12      	lsrs	r2, r2, #12
 800264a:	0d5b      	lsrs	r3, r3, #21
 800264c:	4281      	cmp	r1, r0
 800264e:	d008      	beq.n	8002662 <__aeabi_dcmpun+0x2e>
 8002650:	4906      	ldr	r1, [pc, #24]	; (800266c <__aeabi_dcmpun+0x38>)
 8002652:	2000      	movs	r0, #0
 8002654:	428b      	cmp	r3, r1
 8002656:	d103      	bne.n	8002660 <__aeabi_dcmpun+0x2c>
 8002658:	4332      	orrs	r2, r6
 800265a:	0010      	movs	r0, r2
 800265c:	1e42      	subs	r2, r0, #1
 800265e:	4190      	sbcs	r0, r2
 8002660:	bd70      	pop	{r4, r5, r6, pc}
 8002662:	2001      	movs	r0, #1
 8002664:	432c      	orrs	r4, r5
 8002666:	d1fb      	bne.n	8002660 <__aeabi_dcmpun+0x2c>
 8002668:	e7f2      	b.n	8002650 <__aeabi_dcmpun+0x1c>
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	000007ff 	.word	0x000007ff

08002670 <__aeabi_d2iz>:
 8002670:	000a      	movs	r2, r1
 8002672:	b530      	push	{r4, r5, lr}
 8002674:	4c13      	ldr	r4, [pc, #76]	; (80026c4 <__aeabi_d2iz+0x54>)
 8002676:	0053      	lsls	r3, r2, #1
 8002678:	0309      	lsls	r1, r1, #12
 800267a:	0005      	movs	r5, r0
 800267c:	0b09      	lsrs	r1, r1, #12
 800267e:	2000      	movs	r0, #0
 8002680:	0d5b      	lsrs	r3, r3, #21
 8002682:	0fd2      	lsrs	r2, r2, #31
 8002684:	42a3      	cmp	r3, r4
 8002686:	dd04      	ble.n	8002692 <__aeabi_d2iz+0x22>
 8002688:	480f      	ldr	r0, [pc, #60]	; (80026c8 <__aeabi_d2iz+0x58>)
 800268a:	4283      	cmp	r3, r0
 800268c:	dd02      	ble.n	8002694 <__aeabi_d2iz+0x24>
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <__aeabi_d2iz+0x5c>)
 8002690:	18d0      	adds	r0, r2, r3
 8002692:	bd30      	pop	{r4, r5, pc}
 8002694:	2080      	movs	r0, #128	; 0x80
 8002696:	0340      	lsls	r0, r0, #13
 8002698:	4301      	orrs	r1, r0
 800269a:	480d      	ldr	r0, [pc, #52]	; (80026d0 <__aeabi_d2iz+0x60>)
 800269c:	1ac0      	subs	r0, r0, r3
 800269e:	281f      	cmp	r0, #31
 80026a0:	dd08      	ble.n	80026b4 <__aeabi_d2iz+0x44>
 80026a2:	480c      	ldr	r0, [pc, #48]	; (80026d4 <__aeabi_d2iz+0x64>)
 80026a4:	1ac3      	subs	r3, r0, r3
 80026a6:	40d9      	lsrs	r1, r3
 80026a8:	000b      	movs	r3, r1
 80026aa:	4258      	negs	r0, r3
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	d1f0      	bne.n	8002692 <__aeabi_d2iz+0x22>
 80026b0:	0018      	movs	r0, r3
 80026b2:	e7ee      	b.n	8002692 <__aeabi_d2iz+0x22>
 80026b4:	4c08      	ldr	r4, [pc, #32]	; (80026d8 <__aeabi_d2iz+0x68>)
 80026b6:	40c5      	lsrs	r5, r0
 80026b8:	46a4      	mov	ip, r4
 80026ba:	4463      	add	r3, ip
 80026bc:	4099      	lsls	r1, r3
 80026be:	000b      	movs	r3, r1
 80026c0:	432b      	orrs	r3, r5
 80026c2:	e7f2      	b.n	80026aa <__aeabi_d2iz+0x3a>
 80026c4:	000003fe 	.word	0x000003fe
 80026c8:	0000041d 	.word	0x0000041d
 80026cc:	7fffffff 	.word	0x7fffffff
 80026d0:	00000433 	.word	0x00000433
 80026d4:	00000413 	.word	0x00000413
 80026d8:	fffffbed 	.word	0xfffffbed

080026dc <__aeabi_i2d>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	2800      	cmp	r0, #0
 80026e0:	d016      	beq.n	8002710 <__aeabi_i2d+0x34>
 80026e2:	17c3      	asrs	r3, r0, #31
 80026e4:	18c5      	adds	r5, r0, r3
 80026e6:	405d      	eors	r5, r3
 80026e8:	0fc4      	lsrs	r4, r0, #31
 80026ea:	0028      	movs	r0, r5
 80026ec:	f000 f91c 	bl	8002928 <__clzsi2>
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <__aeabi_i2d+0x5c>)
 80026f2:	1a12      	subs	r2, r2, r0
 80026f4:	280a      	cmp	r0, #10
 80026f6:	dc16      	bgt.n	8002726 <__aeabi_i2d+0x4a>
 80026f8:	0003      	movs	r3, r0
 80026fa:	002e      	movs	r6, r5
 80026fc:	3315      	adds	r3, #21
 80026fe:	409e      	lsls	r6, r3
 8002700:	230b      	movs	r3, #11
 8002702:	1a18      	subs	r0, r3, r0
 8002704:	40c5      	lsrs	r5, r0
 8002706:	0553      	lsls	r3, r2, #21
 8002708:	032d      	lsls	r5, r5, #12
 800270a:	0b2d      	lsrs	r5, r5, #12
 800270c:	0d5b      	lsrs	r3, r3, #21
 800270e:	e003      	b.n	8002718 <__aeabi_i2d+0x3c>
 8002710:	2400      	movs	r4, #0
 8002712:	2300      	movs	r3, #0
 8002714:	2500      	movs	r5, #0
 8002716:	2600      	movs	r6, #0
 8002718:	051b      	lsls	r3, r3, #20
 800271a:	432b      	orrs	r3, r5
 800271c:	07e4      	lsls	r4, r4, #31
 800271e:	4323      	orrs	r3, r4
 8002720:	0030      	movs	r0, r6
 8002722:	0019      	movs	r1, r3
 8002724:	bd70      	pop	{r4, r5, r6, pc}
 8002726:	380b      	subs	r0, #11
 8002728:	4085      	lsls	r5, r0
 800272a:	0553      	lsls	r3, r2, #21
 800272c:	032d      	lsls	r5, r5, #12
 800272e:	2600      	movs	r6, #0
 8002730:	0b2d      	lsrs	r5, r5, #12
 8002732:	0d5b      	lsrs	r3, r3, #21
 8002734:	e7f0      	b.n	8002718 <__aeabi_i2d+0x3c>
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	0000041e 	.word	0x0000041e

0800273c <__aeabi_ui2d>:
 800273c:	b510      	push	{r4, lr}
 800273e:	1e04      	subs	r4, r0, #0
 8002740:	d010      	beq.n	8002764 <__aeabi_ui2d+0x28>
 8002742:	f000 f8f1 	bl	8002928 <__clzsi2>
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <__aeabi_ui2d+0x48>)
 8002748:	1a1b      	subs	r3, r3, r0
 800274a:	280a      	cmp	r0, #10
 800274c:	dc11      	bgt.n	8002772 <__aeabi_ui2d+0x36>
 800274e:	220b      	movs	r2, #11
 8002750:	0021      	movs	r1, r4
 8002752:	1a12      	subs	r2, r2, r0
 8002754:	40d1      	lsrs	r1, r2
 8002756:	3015      	adds	r0, #21
 8002758:	030a      	lsls	r2, r1, #12
 800275a:	055b      	lsls	r3, r3, #21
 800275c:	4084      	lsls	r4, r0
 800275e:	0b12      	lsrs	r2, r2, #12
 8002760:	0d5b      	lsrs	r3, r3, #21
 8002762:	e001      	b.n	8002768 <__aeabi_ui2d+0x2c>
 8002764:	2300      	movs	r3, #0
 8002766:	2200      	movs	r2, #0
 8002768:	051b      	lsls	r3, r3, #20
 800276a:	4313      	orrs	r3, r2
 800276c:	0020      	movs	r0, r4
 800276e:	0019      	movs	r1, r3
 8002770:	bd10      	pop	{r4, pc}
 8002772:	0022      	movs	r2, r4
 8002774:	380b      	subs	r0, #11
 8002776:	4082      	lsls	r2, r0
 8002778:	055b      	lsls	r3, r3, #21
 800277a:	0312      	lsls	r2, r2, #12
 800277c:	2400      	movs	r4, #0
 800277e:	0b12      	lsrs	r2, r2, #12
 8002780:	0d5b      	lsrs	r3, r3, #21
 8002782:	e7f1      	b.n	8002768 <__aeabi_ui2d+0x2c>
 8002784:	0000041e 	.word	0x0000041e

08002788 <__aeabi_f2d>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	0043      	lsls	r3, r0, #1
 800278c:	0246      	lsls	r6, r0, #9
 800278e:	0fc4      	lsrs	r4, r0, #31
 8002790:	20fe      	movs	r0, #254	; 0xfe
 8002792:	0e1b      	lsrs	r3, r3, #24
 8002794:	1c59      	adds	r1, r3, #1
 8002796:	0a75      	lsrs	r5, r6, #9
 8002798:	4208      	tst	r0, r1
 800279a:	d00c      	beq.n	80027b6 <__aeabi_f2d+0x2e>
 800279c:	22e0      	movs	r2, #224	; 0xe0
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	4694      	mov	ip, r2
 80027a2:	076d      	lsls	r5, r5, #29
 80027a4:	0b36      	lsrs	r6, r6, #12
 80027a6:	4463      	add	r3, ip
 80027a8:	051b      	lsls	r3, r3, #20
 80027aa:	4333      	orrs	r3, r6
 80027ac:	07e4      	lsls	r4, r4, #31
 80027ae:	4323      	orrs	r3, r4
 80027b0:	0028      	movs	r0, r5
 80027b2:	0019      	movs	r1, r3
 80027b4:	bd70      	pop	{r4, r5, r6, pc}
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d114      	bne.n	80027e4 <__aeabi_f2d+0x5c>
 80027ba:	2d00      	cmp	r5, #0
 80027bc:	d01b      	beq.n	80027f6 <__aeabi_f2d+0x6e>
 80027be:	0028      	movs	r0, r5
 80027c0:	f000 f8b2 	bl	8002928 <__clzsi2>
 80027c4:	280a      	cmp	r0, #10
 80027c6:	dc1c      	bgt.n	8002802 <__aeabi_f2d+0x7a>
 80027c8:	230b      	movs	r3, #11
 80027ca:	002a      	movs	r2, r5
 80027cc:	1a1b      	subs	r3, r3, r0
 80027ce:	40da      	lsrs	r2, r3
 80027d0:	0003      	movs	r3, r0
 80027d2:	3315      	adds	r3, #21
 80027d4:	409d      	lsls	r5, r3
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <__aeabi_f2d+0x88>)
 80027d8:	0312      	lsls	r2, r2, #12
 80027da:	1a1b      	subs	r3, r3, r0
 80027dc:	055b      	lsls	r3, r3, #21
 80027de:	0b16      	lsrs	r6, r2, #12
 80027e0:	0d5b      	lsrs	r3, r3, #21
 80027e2:	e7e1      	b.n	80027a8 <__aeabi_f2d+0x20>
 80027e4:	2d00      	cmp	r5, #0
 80027e6:	d009      	beq.n	80027fc <__aeabi_f2d+0x74>
 80027e8:	0b32      	lsrs	r2, r6, #12
 80027ea:	2680      	movs	r6, #128	; 0x80
 80027ec:	0336      	lsls	r6, r6, #12
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <__aeabi_f2d+0x8c>)
 80027f0:	076d      	lsls	r5, r5, #29
 80027f2:	4316      	orrs	r6, r2
 80027f4:	e7d8      	b.n	80027a8 <__aeabi_f2d+0x20>
 80027f6:	2300      	movs	r3, #0
 80027f8:	2600      	movs	r6, #0
 80027fa:	e7d5      	b.n	80027a8 <__aeabi_f2d+0x20>
 80027fc:	2600      	movs	r6, #0
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <__aeabi_f2d+0x8c>)
 8002800:	e7d2      	b.n	80027a8 <__aeabi_f2d+0x20>
 8002802:	0003      	movs	r3, r0
 8002804:	002a      	movs	r2, r5
 8002806:	3b0b      	subs	r3, #11
 8002808:	409a      	lsls	r2, r3
 800280a:	2500      	movs	r5, #0
 800280c:	e7e3      	b.n	80027d6 <__aeabi_f2d+0x4e>
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	00000389 	.word	0x00000389
 8002814:	000007ff 	.word	0x000007ff

08002818 <__aeabi_d2f>:
 8002818:	0002      	movs	r2, r0
 800281a:	004b      	lsls	r3, r1, #1
 800281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281e:	0308      	lsls	r0, r1, #12
 8002820:	0d5b      	lsrs	r3, r3, #21
 8002822:	4e3d      	ldr	r6, [pc, #244]	; (8002918 <__aeabi_d2f+0x100>)
 8002824:	0fcc      	lsrs	r4, r1, #31
 8002826:	0a40      	lsrs	r0, r0, #9
 8002828:	0f51      	lsrs	r1, r2, #29
 800282a:	1c5f      	adds	r7, r3, #1
 800282c:	4308      	orrs	r0, r1
 800282e:	00d5      	lsls	r5, r2, #3
 8002830:	4237      	tst	r7, r6
 8002832:	d00a      	beq.n	800284a <__aeabi_d2f+0x32>
 8002834:	4939      	ldr	r1, [pc, #228]	; (800291c <__aeabi_d2f+0x104>)
 8002836:	185e      	adds	r6, r3, r1
 8002838:	2efe      	cmp	r6, #254	; 0xfe
 800283a:	dd16      	ble.n	800286a <__aeabi_d2f+0x52>
 800283c:	23ff      	movs	r3, #255	; 0xff
 800283e:	2100      	movs	r1, #0
 8002840:	05db      	lsls	r3, r3, #23
 8002842:	430b      	orrs	r3, r1
 8002844:	07e0      	lsls	r0, r4, #31
 8002846:	4318      	orrs	r0, r3
 8002848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <__aeabi_d2f+0x44>
 800284e:	4328      	orrs	r0, r5
 8002850:	d027      	beq.n	80028a2 <__aeabi_d2f+0x8a>
 8002852:	2105      	movs	r1, #5
 8002854:	0189      	lsls	r1, r1, #6
 8002856:	0a49      	lsrs	r1, r1, #9
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e7f1      	b.n	8002840 <__aeabi_d2f+0x28>
 800285c:	4305      	orrs	r5, r0
 800285e:	d0ed      	beq.n	800283c <__aeabi_d2f+0x24>
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	03c9      	lsls	r1, r1, #15
 8002864:	23ff      	movs	r3, #255	; 0xff
 8002866:	4301      	orrs	r1, r0
 8002868:	e7ea      	b.n	8002840 <__aeabi_d2f+0x28>
 800286a:	2e00      	cmp	r6, #0
 800286c:	dd1c      	ble.n	80028a8 <__aeabi_d2f+0x90>
 800286e:	0192      	lsls	r2, r2, #6
 8002870:	0011      	movs	r1, r2
 8002872:	1e4a      	subs	r2, r1, #1
 8002874:	4191      	sbcs	r1, r2
 8002876:	00c0      	lsls	r0, r0, #3
 8002878:	0f6d      	lsrs	r5, r5, #29
 800287a:	4301      	orrs	r1, r0
 800287c:	4329      	orrs	r1, r5
 800287e:	074b      	lsls	r3, r1, #29
 8002880:	d048      	beq.n	8002914 <__aeabi_d2f+0xfc>
 8002882:	230f      	movs	r3, #15
 8002884:	400b      	ands	r3, r1
 8002886:	2b04      	cmp	r3, #4
 8002888:	d000      	beq.n	800288c <__aeabi_d2f+0x74>
 800288a:	3104      	adds	r1, #4
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	04db      	lsls	r3, r3, #19
 8002890:	400b      	ands	r3, r1
 8002892:	d03f      	beq.n	8002914 <__aeabi_d2f+0xfc>
 8002894:	1c72      	adds	r2, r6, #1
 8002896:	2efe      	cmp	r6, #254	; 0xfe
 8002898:	d0d0      	beq.n	800283c <__aeabi_d2f+0x24>
 800289a:	0189      	lsls	r1, r1, #6
 800289c:	0a49      	lsrs	r1, r1, #9
 800289e:	b2d3      	uxtb	r3, r2
 80028a0:	e7ce      	b.n	8002840 <__aeabi_d2f+0x28>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2100      	movs	r1, #0
 80028a6:	e7cb      	b.n	8002840 <__aeabi_d2f+0x28>
 80028a8:	0032      	movs	r2, r6
 80028aa:	3217      	adds	r2, #23
 80028ac:	db22      	blt.n	80028f4 <__aeabi_d2f+0xdc>
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	221e      	movs	r2, #30
 80028b2:	0409      	lsls	r1, r1, #16
 80028b4:	4308      	orrs	r0, r1
 80028b6:	1b92      	subs	r2, r2, r6
 80028b8:	2a1f      	cmp	r2, #31
 80028ba:	dd1d      	ble.n	80028f8 <__aeabi_d2f+0xe0>
 80028bc:	2102      	movs	r1, #2
 80028be:	4249      	negs	r1, r1
 80028c0:	1b8e      	subs	r6, r1, r6
 80028c2:	0001      	movs	r1, r0
 80028c4:	40f1      	lsrs	r1, r6
 80028c6:	000e      	movs	r6, r1
 80028c8:	2a20      	cmp	r2, #32
 80028ca:	d004      	beq.n	80028d6 <__aeabi_d2f+0xbe>
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <__aeabi_d2f+0x108>)
 80028ce:	4694      	mov	ip, r2
 80028d0:	4463      	add	r3, ip
 80028d2:	4098      	lsls	r0, r3
 80028d4:	4305      	orrs	r5, r0
 80028d6:	0029      	movs	r1, r5
 80028d8:	1e4d      	subs	r5, r1, #1
 80028da:	41a9      	sbcs	r1, r5
 80028dc:	4331      	orrs	r1, r6
 80028de:	2600      	movs	r6, #0
 80028e0:	074b      	lsls	r3, r1, #29
 80028e2:	d1ce      	bne.n	8002882 <__aeabi_d2f+0x6a>
 80028e4:	2080      	movs	r0, #128	; 0x80
 80028e6:	000b      	movs	r3, r1
 80028e8:	04c0      	lsls	r0, r0, #19
 80028ea:	2201      	movs	r2, #1
 80028ec:	4003      	ands	r3, r0
 80028ee:	4201      	tst	r1, r0
 80028f0:	d1d3      	bne.n	800289a <__aeabi_d2f+0x82>
 80028f2:	e7af      	b.n	8002854 <__aeabi_d2f+0x3c>
 80028f4:	2300      	movs	r3, #0
 80028f6:	e7ac      	b.n	8002852 <__aeabi_d2f+0x3a>
 80028f8:	490a      	ldr	r1, [pc, #40]	; (8002924 <__aeabi_d2f+0x10c>)
 80028fa:	468c      	mov	ip, r1
 80028fc:	0029      	movs	r1, r5
 80028fe:	4463      	add	r3, ip
 8002900:	40d1      	lsrs	r1, r2
 8002902:	409d      	lsls	r5, r3
 8002904:	000a      	movs	r2, r1
 8002906:	0029      	movs	r1, r5
 8002908:	4098      	lsls	r0, r3
 800290a:	1e4d      	subs	r5, r1, #1
 800290c:	41a9      	sbcs	r1, r5
 800290e:	4301      	orrs	r1, r0
 8002910:	4311      	orrs	r1, r2
 8002912:	e7e4      	b.n	80028de <__aeabi_d2f+0xc6>
 8002914:	0033      	movs	r3, r6
 8002916:	e79d      	b.n	8002854 <__aeabi_d2f+0x3c>
 8002918:	000007fe 	.word	0x000007fe
 800291c:	fffffc80 	.word	0xfffffc80
 8002920:	fffffca2 	.word	0xfffffca2
 8002924:	fffffc82 	.word	0xfffffc82

08002928 <__clzsi2>:
 8002928:	211c      	movs	r1, #28
 800292a:	2301      	movs	r3, #1
 800292c:	041b      	lsls	r3, r3, #16
 800292e:	4298      	cmp	r0, r3
 8002930:	d301      	bcc.n	8002936 <__clzsi2+0xe>
 8002932:	0c00      	lsrs	r0, r0, #16
 8002934:	3910      	subs	r1, #16
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	4298      	cmp	r0, r3
 800293a:	d301      	bcc.n	8002940 <__clzsi2+0x18>
 800293c:	0a00      	lsrs	r0, r0, #8
 800293e:	3908      	subs	r1, #8
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	4298      	cmp	r0, r3
 8002944:	d301      	bcc.n	800294a <__clzsi2+0x22>
 8002946:	0900      	lsrs	r0, r0, #4
 8002948:	3904      	subs	r1, #4
 800294a:	a202      	add	r2, pc, #8	; (adr r2, 8002954 <__clzsi2+0x2c>)
 800294c:	5c10      	ldrb	r0, [r2, r0]
 800294e:	1840      	adds	r0, r0, r1
 8002950:	4770      	bx	lr
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	02020304 	.word	0x02020304
 8002958:	01010101 	.word	0x01010101
	...

08002964 <__clzdi2>:
 8002964:	b510      	push	{r4, lr}
 8002966:	2900      	cmp	r1, #0
 8002968:	d103      	bne.n	8002972 <__clzdi2+0xe>
 800296a:	f7ff ffdd 	bl	8002928 <__clzsi2>
 800296e:	3020      	adds	r0, #32
 8002970:	e002      	b.n	8002978 <__clzdi2+0x14>
 8002972:	1c08      	adds	r0, r1, #0
 8002974:	f7ff ffd8 	bl	8002928 <__clzsi2>
 8002978:	bd10      	pop	{r4, pc}
 800297a:	46c0      	nop			; (mov r8, r8)

0800297c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_Init+0x3c>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_Init+0x3c>)
 800298e:	2140      	movs	r1, #64	; 0x40
 8002990:	430a      	orrs	r2, r1
 8002992:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002994:	2000      	movs	r0, #0
 8002996:	f006 feed 	bl	8009774 <HAL_InitTick>
 800299a:	1e03      	subs	r3, r0, #0
 800299c:	d003      	beq.n	80029a6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800299e:	1dfb      	adds	r3, r7, #7
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
 80029a4:	e001      	b.n	80029aa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029a6:	f006 fbc9 	bl	800913c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029aa:	1dfb      	adds	r3, r7, #7
 80029ac:	781b      	ldrb	r3, [r3, #0]
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b002      	add	sp, #8
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40022000 	.word	0x40022000

080029bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  uwTick++;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_IncTick+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <HAL_IncTick+0x14>)
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000234 	.word	0x20000234

080029d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  return uwTick;
 80029d8:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <HAL_GetTick+0x10>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	20000234 	.word	0x20000234

080029e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff fff0 	bl	80029d4 <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3301      	adds	r3, #1
 8002a00:	d002      	beq.n	8002a08 <HAL_Delay+0x20>
  {
    wait++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3301      	adds	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	f7ff ffe3 	bl	80029d4 <HAL_GetTick>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d8f7      	bhi.n	8002a0a <HAL_Delay+0x22>
  {
  }
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b004      	add	sp, #16
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e159      	b.n	8002cea <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10a      	bne.n	8002a54 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2250      	movs	r2, #80	; 0x50
 8002a48:	2100      	movs	r1, #0
 8002a4a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f006 fb88 	bl	8009164 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	2210      	movs	r2, #16
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d005      	beq.n	8002a6c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2204      	movs	r2, #4
 8002a68:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002a6a:	d00b      	beq.n	8002a84 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a70:	2210      	movs	r2, #16
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2250      	movs	r2, #80	; 0x50
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e132      	b.n	8002cea <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	4a9a      	ldr	r2, [pc, #616]	; (8002cf4 <HAL_ADC_Init+0x2d0>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d108      	bne.n	8002ab4 <HAL_ADC_Init+0x90>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_Init+0x90>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_ADC_Init+0x92>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d149      	bne.n	8002b4e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d00b      	beq.n	8002ade <HAL_ADC_Init+0xba>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	05db      	lsls	r3, r3, #23
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d005      	beq.n	8002ade <HAL_ADC_Init+0xba>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d111      	bne.n	8002b02 <HAL_ADC_Init+0xde>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0092      	lsls	r2, r2, #2
 8002aea:	0892      	lsrs	r2, r2, #2
 8002aec:	611a      	str	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6919      	ldr	r1, [r3, #16]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	611a      	str	r2, [r3, #16]
 8002b00:	e014      	b.n	8002b2c <HAL_ADC_Init+0x108>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0092      	lsls	r2, r2, #2
 8002b0e:	0892      	lsrs	r2, r2, #2
 8002b10:	611a      	str	r2, [r3, #16]
 8002b12:	4b79      	ldr	r3, [pc, #484]	; (8002cf8 <HAL_ADC_Init+0x2d4>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b78      	ldr	r3, [pc, #480]	; (8002cf8 <HAL_ADC_Init+0x2d4>)
 8002b18:	4978      	ldr	r1, [pc, #480]	; (8002cfc <HAL_ADC_Init+0x2d8>)
 8002b1a:	400a      	ands	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <HAL_ADC_Init+0x2d4>)
 8002b20:	6819      	ldr	r1, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	4b74      	ldr	r3, [pc, #464]	; (8002cf8 <HAL_ADC_Init+0x2d4>)
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2118      	movs	r1, #24
 8002b38:	438a      	bics	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68d9      	ldr	r1, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002b4e:	4b6a      	ldr	r3, [pc, #424]	; (8002cf8 <HAL_ADC_Init+0x2d4>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b69      	ldr	r3, [pc, #420]	; (8002cf8 <HAL_ADC_Init+0x2d4>)
 8002b54:	496a      	ldr	r1, [pc, #424]	; (8002d00 <HAL_ADC_Init+0x2dc>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002b5a:	4b67      	ldr	r3, [pc, #412]	; (8002cf8 <HAL_ADC_Init+0x2d4>)
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	065a      	lsls	r2, r3, #25
 8002b64:	4b64      	ldr	r3, [pc, #400]	; (8002cf8 <HAL_ADC_Init+0x2d4>)
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	055b      	lsls	r3, r3, #21
 8002b74:	4013      	ands	r3, r2
 8002b76:	d108      	bne.n	8002b8a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	0549      	lsls	r1, r1, #21
 8002b86:	430a      	orrs	r2, r1
 8002b88:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	495b      	ldr	r1, [pc, #364]	; (8002d04 <HAL_ADC_Init+0x2e0>)
 8002b96:	400a      	ands	r2, r1
 8002b98:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68d9      	ldr	r1, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_Init+0x18c>
 8002bac:	2304      	movs	r3, #4
 8002bae:	e000      	b.n	8002bb2 <HAL_ADC_Init+0x18e>
 8002bb0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002bb2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2020      	movs	r0, #32
 8002bb8:	5c1b      	ldrb	r3, [r3, r0]
 8002bba:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002bbc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	202c      	movs	r0, #44	; 0x2c
 8002bc2:	5c1b      	ldrb	r3, [r3, r0]
 8002bc4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bc6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002bcc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002bd4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002bdc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bea:	23c2      	movs	r3, #194	; 0xc2
 8002bec:	33ff      	adds	r3, #255	; 0xff
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d00b      	beq.n	8002c0a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68d9      	ldr	r1, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2221      	movs	r2, #33	; 0x21
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d11a      	bne.n	8002c4a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	5c9b      	ldrb	r3, [r3, r2]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2180      	movs	r1, #128	; 0x80
 8002c2a:	0249      	lsls	r1, r1, #9
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	e00b      	b.n	8002c4a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	2220      	movs	r2, #32
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	2201      	movs	r2, #1
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d11f      	bne.n	8002c92 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	492a      	ldr	r1, [pc, #168]	; (8002d08 <HAL_ADC_Init+0x2e4>)
 8002c5e:	400a      	ands	r2, r1
 8002c60:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6919      	ldr	r1, [r3, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002c70:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002c76:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	611a      	str	r2, [r3, #16]
 8002c90:	e00e      	b.n	8002cb0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d107      	bne.n	8002cb0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2101      	movs	r1, #1
 8002cac:	438a      	bics	r2, r1
 8002cae:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2107      	movs	r1, #7
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6959      	ldr	r1, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	2203      	movs	r2, #3
 8002cde:	4393      	bics	r3, r2
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b002      	add	sp, #8
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	fffffefd 	.word	0xfffffefd
 8002cf8:	40012708 	.word	0x40012708
 8002cfc:	ffc3ffff 	.word	0xffc3ffff
 8002d00:	fdffffff 	.word	0xfdffffff
 8002d04:	fffe0219 	.word	0xfffe0219
 8002d08:	fffffc03 	.word	0xfffffc03

08002d0c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d14:	230f      	movs	r3, #15
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2204      	movs	r2, #4
 8002d24:	4013      	ands	r3, r2
 8002d26:	d138      	bne.n	8002d9a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2250      	movs	r2, #80	; 0x50
 8002d2c:	5c9b      	ldrb	r3, [r3, r2]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_Start+0x2a>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e038      	b.n	8002da8 <HAL_ADC_Start+0x9c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2250      	movs	r2, #80	; 0x50
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d007      	beq.n	8002d56 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002d46:	230f      	movs	r3, #15
 8002d48:	18fc      	adds	r4, r7, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 f903 	bl	8002f58 <ADC_Enable>
 8002d52:	0003      	movs	r3, r0
 8002d54:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d56:	230f      	movs	r3, #15
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d120      	bne.n	8002da2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <HAL_ADC_Start+0xa4>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	0052      	lsls	r2, r2, #1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2250      	movs	r2, #80	; 0x50
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	221c      	movs	r2, #28
 8002d86:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2104      	movs	r1, #4
 8002d94:	430a      	orrs	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	e003      	b.n	8002da2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d9a:	230f      	movs	r3, #15
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	2202      	movs	r2, #2
 8002da0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002da2:	230f      	movs	r3, #15
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	781b      	ldrb	r3, [r3, #0]
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b005      	add	sp, #20
 8002dae:	bd90      	pop	{r4, r7, pc}
 8002db0:	fffff0fe 	.word	0xfffff0fe

08002db4 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002db4:	b5b0      	push	{r4, r5, r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbc:	230f      	movs	r3, #15
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2250      	movs	r2, #80	; 0x50
 8002dc8:	5c9b      	ldrb	r3, [r3, r2]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_Stop+0x1e>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e029      	b.n	8002e26 <HAL_ADC_Stop+0x72>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2250      	movs	r2, #80	; 0x50
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002dda:	250f      	movs	r5, #15
 8002ddc:	197c      	adds	r4, r7, r5
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	0018      	movs	r0, r3
 8002de2:	f000 f979 	bl	80030d8 <ADC_ConversionStop>
 8002de6:	0003      	movs	r3, r0
 8002de8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002dea:	197b      	adds	r3, r7, r5
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d112      	bne.n	8002e18 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002df2:	197c      	adds	r4, r7, r5
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 f90e 	bl	8003018 <ADC_Disable>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002e00:	197b      	adds	r3, r7, r5
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d107      	bne.n	8002e18 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <HAL_ADC_Stop+0x7c>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2201      	movs	r2, #1
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2250      	movs	r2, #80	; 0x50
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002e20:	230f      	movs	r3, #15
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	781b      	ldrb	r3, [r3, #0]
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b004      	add	sp, #16
 8002e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	fffffefe 	.word	0xfffffefe

08002e34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b002      	add	sp, #8
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2250      	movs	r2, #80	; 0x50
 8002e5a:	5c9b      	ldrb	r3, [r3, r2]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x18>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e06c      	b.n	8002f3e <HAL_ADC_ConfigChannel+0xf2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2250      	movs	r2, #80	; 0x50
 8002e68:	2101      	movs	r1, #1
 8002e6a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2204      	movs	r2, #4
 8002e74:	4013      	ands	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2250      	movs	r2, #80	; 0x50
 8002e88:	2100      	movs	r1, #0
 8002e8a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e056      	b.n	8002f3e <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <HAL_ADC_ConfigChannel+0xfc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d028      	beq.n	8002eec <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	035b      	lsls	r3, r3, #13
 8002ea6:	0b5a      	lsrs	r2, r3, #13
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	02db      	lsls	r3, r3, #11
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002ebc:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <HAL_ADC_ConfigChannel+0x100>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <HAL_ADC_ConfigChannel+0x100>)
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	0409      	lsls	r1, r1, #16
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002eca:	200a      	movs	r0, #10
 8002ecc:	f000 f94a 	bl	8003164 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	029b      	lsls	r3, r3, #10
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d02b      	beq.n	8002f34 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_ADC_ConfigChannel+0x100>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <HAL_ADC_ConfigChannel+0x100>)
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	03c9      	lsls	r1, r1, #15
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e023      	b.n	8002f34 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	035b      	lsls	r3, r3, #13
 8002ef8:	0b5b      	lsrs	r3, r3, #13
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	400a      	ands	r2, r1
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	02db      	lsls	r3, r3, #11
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d005      	beq.n	8002f1c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_ADC_ConfigChannel+0x100>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_ADC_ConfigChannel+0x100>)
 8002f16:	490e      	ldr	r1, [pc, #56]	; (8002f50 <HAL_ADC_ConfigChannel+0x104>)
 8002f18:	400a      	ands	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	4013      	ands	r3, r2
 8002f26:	d005      	beq.n	8002f34 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <HAL_ADC_ConfigChannel+0x100>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <HAL_ADC_ConfigChannel+0x100>)
 8002f2e:	4909      	ldr	r1, [pc, #36]	; (8002f54 <HAL_ADC_ConfigChannel+0x108>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2250      	movs	r2, #80	; 0x50
 8002f38:	2100      	movs	r1, #0
 8002f3a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b002      	add	sp, #8
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	00001001 	.word	0x00001001
 8002f4c:	40012708 	.word	0x40012708
 8002f50:	ff7fffff 	.word	0xff7fffff
 8002f54:	ffbfffff 	.word	0xffbfffff

08002f58 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d108      	bne.n	8002f84 <ADC_Enable+0x2c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <ADC_Enable+0x2c>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <ADC_Enable+0x2e>
 8002f84:	2300      	movs	r3, #0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d13f      	bne.n	800300a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4a20      	ldr	r2, [pc, #128]	; (8003014 <ADC_Enable+0xbc>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	d00d      	beq.n	8002fb2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	2210      	movs	r2, #16
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e02c      	b.n	800300c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f000 f8ce 	bl	8003164 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fc8:	f7ff fd04 	bl	80029d4 <HAL_GetTick>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fd0:	e014      	b.n	8002ffc <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fd2:	f7ff fcff 	bl	80029d4 <HAL_GetTick>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b0a      	cmp	r3, #10
 8002fde:	d90d      	bls.n	8002ffc <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e007      	b.n	800300c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2201      	movs	r2, #1
 8003004:	4013      	ands	r3, r2
 8003006:	2b01      	cmp	r3, #1
 8003008:	d1e3      	bne.n	8002fd2 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b004      	add	sp, #16
 8003012:	bd80      	pop	{r7, pc}
 8003014:	80000017 	.word	0x80000017

08003018 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2203      	movs	r2, #3
 800302c:	4013      	ands	r3, r2
 800302e:	2b01      	cmp	r3, #1
 8003030:	d108      	bne.n	8003044 <ADC_Disable+0x2c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2201      	movs	r2, #1
 800303a:	4013      	ands	r3, r2
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <ADC_Disable+0x2c>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <ADC_Disable+0x2e>
 8003044:	2300      	movs	r3, #0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d041      	beq.n	80030ce <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2205      	movs	r2, #5
 8003052:	4013      	ands	r3, r2
 8003054:	2b01      	cmp	r3, #1
 8003056:	d110      	bne.n	800307a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2102      	movs	r1, #2
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2203      	movs	r2, #3
 800306e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003070:	f7ff fcb0 	bl	80029d4 <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003078:	e022      	b.n	80030c0 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	2210      	movs	r2, #16
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	2201      	movs	r2, #1
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e01c      	b.n	80030d0 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003096:	f7ff fc9d 	bl	80029d4 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b0a      	cmp	r3, #10
 80030a2:	d90d      	bls.n	80030c0 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	2210      	movs	r2, #16
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	2201      	movs	r2, #1
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e007      	b.n	80030d0 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2201      	movs	r2, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d0e3      	beq.n	8003096 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b004      	add	sp, #16
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2204      	movs	r2, #4
 80030ec:	4013      	ands	r3, r2
 80030ee:	d034      	beq.n	800315a <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2204      	movs	r2, #4
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d10d      	bne.n	800311a <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2202      	movs	r2, #2
 8003106:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003108:	d107      	bne.n	800311a <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2110      	movs	r1, #16
 8003116:	430a      	orrs	r2, r1
 8003118:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800311a:	f7ff fc5b 	bl	80029d4 <HAL_GetTick>
 800311e:	0003      	movs	r3, r0
 8003120:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003122:	e014      	b.n	800314e <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003124:	f7ff fc56 	bl	80029d4 <HAL_GetTick>
 8003128:	0002      	movs	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b0a      	cmp	r3, #10
 8003130:	d90d      	bls.n	800314e <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003136:	2210      	movs	r2, #16
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	2201      	movs	r2, #1
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e006      	b.n	800315c <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2204      	movs	r2, #4
 8003156:	4013      	ands	r3, r2
 8003158:	d1e4      	bne.n	8003124 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b004      	add	sp, #16
 8003162:	bd80      	pop	{r7, pc}

08003164 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <ADC_DelayMicroSecond+0x38>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	490b      	ldr	r1, [pc, #44]	; (80031a0 <ADC_DelayMicroSecond+0x3c>)
 8003172:	0018      	movs	r0, r3
 8003174:	f7fc ffe4 	bl	8000140 <__udivsi3>
 8003178:	0003      	movs	r3, r0
 800317a:	001a      	movs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4353      	muls	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003182:	e002      	b.n	800318a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3b01      	subs	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f9      	bne.n	8003184 <ADC_DelayMicroSecond+0x20>
  } 
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b004      	add	sp, #16
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	20000038 	.word	0x20000038
 80031a0:	000f4240 	.word	0x000f4240

080031a4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	0002      	movs	r2, r0
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80031b0:	1dfb      	adds	r3, r7, #7
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	001a      	movs	r2, r3
 80031b6:	231f      	movs	r3, #31
 80031b8:	401a      	ands	r2, r3
 80031ba:	4b04      	ldr	r3, [pc, #16]	; (80031cc <NVIC_EnableIRQ+0x28>)
 80031bc:	2101      	movs	r1, #1
 80031be:	4091      	lsls	r1, r2
 80031c0:	000a      	movs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	0002      	movs	r2, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	1dfb      	adds	r3, r7, #7
 80031dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80031de:	1dfb      	adds	r3, r7, #7
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b7f      	cmp	r3, #127	; 0x7f
 80031e4:	d932      	bls.n	800324c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031e6:	4a2f      	ldr	r2, [pc, #188]	; (80032a4 <NVIC_SetPriority+0xd4>)
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	0019      	movs	r1, r3
 80031ee:	230f      	movs	r3, #15
 80031f0:	400b      	ands	r3, r1
 80031f2:	3b08      	subs	r3, #8
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	3306      	adds	r3, #6
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	18d3      	adds	r3, r2, r3
 80031fc:	3304      	adds	r3, #4
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	1dfa      	adds	r2, r7, #7
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	0011      	movs	r1, r2
 8003206:	2203      	movs	r2, #3
 8003208:	400a      	ands	r2, r1
 800320a:	00d2      	lsls	r2, r2, #3
 800320c:	21ff      	movs	r1, #255	; 0xff
 800320e:	4091      	lsls	r1, r2
 8003210:	000a      	movs	r2, r1
 8003212:	43d2      	mvns	r2, r2
 8003214:	401a      	ands	r2, r3
 8003216:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	019b      	lsls	r3, r3, #6
 800321c:	22ff      	movs	r2, #255	; 0xff
 800321e:	401a      	ands	r2, r3
 8003220:	1dfb      	adds	r3, r7, #7
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	0018      	movs	r0, r3
 8003226:	2303      	movs	r3, #3
 8003228:	4003      	ands	r3, r0
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800322e:	481d      	ldr	r0, [pc, #116]	; (80032a4 <NVIC_SetPriority+0xd4>)
 8003230:	1dfb      	adds	r3, r7, #7
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	001c      	movs	r4, r3
 8003236:	230f      	movs	r3, #15
 8003238:	4023      	ands	r3, r4
 800323a:	3b08      	subs	r3, #8
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	430a      	orrs	r2, r1
 8003240:	3306      	adds	r3, #6
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	18c3      	adds	r3, r0, r3
 8003246:	3304      	adds	r3, #4
 8003248:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800324a:	e027      	b.n	800329c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800324c:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <NVIC_SetPriority+0xd8>)
 800324e:	1dfb      	adds	r3, r7, #7
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b25b      	sxtb	r3, r3
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	33c0      	adds	r3, #192	; 0xc0
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	589b      	ldr	r3, [r3, r2]
 800325c:	1dfa      	adds	r2, r7, #7
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	0011      	movs	r1, r2
 8003262:	2203      	movs	r2, #3
 8003264:	400a      	ands	r2, r1
 8003266:	00d2      	lsls	r2, r2, #3
 8003268:	21ff      	movs	r1, #255	; 0xff
 800326a:	4091      	lsls	r1, r2
 800326c:	000a      	movs	r2, r1
 800326e:	43d2      	mvns	r2, r2
 8003270:	401a      	ands	r2, r3
 8003272:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	019b      	lsls	r3, r3, #6
 8003278:	22ff      	movs	r2, #255	; 0xff
 800327a:	401a      	ands	r2, r3
 800327c:	1dfb      	adds	r3, r7, #7
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	0018      	movs	r0, r3
 8003282:	2303      	movs	r3, #3
 8003284:	4003      	ands	r3, r0
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800328a:	4807      	ldr	r0, [pc, #28]	; (80032a8 <NVIC_SetPriority+0xd8>)
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	b25b      	sxtb	r3, r3
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	430a      	orrs	r2, r1
 8003296:	33c0      	adds	r3, #192	; 0xc0
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	501a      	str	r2, [r3, r0]
}
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	b003      	add	sp, #12
 80032a2:	bd90      	pop	{r4, r7, pc}
 80032a4:	e000ed00 	.word	0xe000ed00
 80032a8:	e000e100 	.word	0xe000e100

080032ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	210f      	movs	r1, #15
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	1c02      	adds	r2, r0, #0
 80032bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	187b      	adds	r3, r7, r1
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	0011      	movs	r1, r2
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7ff ff81 	bl	80031d0 <NVIC_SetPriority>
}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b004      	add	sp, #16
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	0002      	movs	r2, r0
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e2:	1dfb      	adds	r3, r7, #7
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	b25b      	sxtb	r3, r3
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff ff5b 	bl	80031a4 <NVIC_EnableIRQ>
}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b002      	add	sp, #8
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e056      	b.n	80033b8 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7f5b      	ldrb	r3, [r3, #29]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d106      	bne.n	8003322 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f005 ff5d 	bl	80091dc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	791b      	ldrb	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10c      	bne.n	800334a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <HAL_CRC_Init+0xc8>)
 8003336:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2118      	movs	r1, #24
 8003344:	438a      	bics	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	e00b      	b.n	8003362 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6899      	ldr	r1, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	0018      	movs	r0, r3
 8003356:	f000 f835 	bl	80033c4 <HAL_CRCEx_Polynomial_Set>
 800335a:	1e03      	subs	r3, r0, #0
 800335c:	d001      	beq.n	8003362 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e02a      	b.n	80033b8 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	795b      	ldrb	r3, [r3, #5]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d105      	bne.n	8003376 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	4252      	negs	r2, r2
 8003372:	611a      	str	r2, [r3, #16]
 8003374:	e004      	b.n	8003380 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6912      	ldr	r2, [r2, #16]
 800337e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2260      	movs	r2, #96	; 0x60
 8003388:	4393      	bics	r3, r2
 800338a:	0019      	movs	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	4393      	bics	r3, r2
 80033a2:	0019      	movs	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b002      	add	sp, #8
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	04c11db7 	.word	0x04c11db7

080033c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d0:	2317      	movs	r3, #23
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80033d8:	231f      	movs	r3, #31
 80033da:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1e5a      	subs	r2, r3, #1
 80033e2:	613a      	str	r2, [r7, #16]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_CRCEx_Polynomial_Set+0x36>
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	221f      	movs	r2, #31
 80033ec:	4013      	ands	r3, r2
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	40da      	lsrs	r2, r3
 80033f2:	0013      	movs	r3, r2
 80033f4:	2201      	movs	r2, #1
 80033f6:	4013      	ands	r3, r2
 80033f8:	d0f1      	beq.n	80033de <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b18      	cmp	r3, #24
 80033fe:	d00f      	beq.n	8003420 <HAL_CRCEx_Polynomial_Set+0x5c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b18      	cmp	r3, #24
 8003404:	d824      	bhi.n	8003450 <HAL_CRCEx_Polynomial_Set+0x8c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b10      	cmp	r3, #16
 800340a:	d011      	beq.n	8003430 <HAL_CRCEx_Polynomial_Set+0x6c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b10      	cmp	r3, #16
 8003410:	d81e      	bhi.n	8003450 <HAL_CRCEx_Polynomial_Set+0x8c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_CRCEx_Polynomial_Set+0x96>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d010      	beq.n	8003440 <HAL_CRCEx_Polynomial_Set+0x7c>
 800341e:	e017      	b.n	8003450 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b06      	cmp	r3, #6
 8003424:	d91b      	bls.n	800345e <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8003426:	2317      	movs	r3, #23
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	2201      	movs	r2, #1
 800342c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800342e:	e016      	b.n	800345e <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b07      	cmp	r3, #7
 8003434:	d915      	bls.n	8003462 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8003436:	2317      	movs	r3, #23
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800343e:	e010      	b.n	8003462 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	d90f      	bls.n	8003466 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8003446:	2317      	movs	r3, #23
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800344e:	e00a      	b.n	8003466 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003450:	2317      	movs	r3, #23
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
      break;
 8003458:	e006      	b.n	8003468 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	e004      	b.n	8003468 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	e002      	b.n	8003468 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	e000      	b.n	8003468 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003466:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8003468:	2317      	movs	r3, #23
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10e      	bne.n	8003490 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2218      	movs	r2, #24
 8003482:	4393      	bics	r3, r2
 8003484:	0019      	movs	r1, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003490:	2317      	movs	r3, #23
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	781b      	ldrb	r3, [r3, #0]
}
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	b006      	add	sp, #24
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e061      	b.n	8003576 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a32      	ldr	r2, [pc, #200]	; (8003580 <HAL_DMA_Init+0xe0>)
 80034b8:	4694      	mov	ip, r2
 80034ba:	4463      	add	r3, ip
 80034bc:	2114      	movs	r1, #20
 80034be:	0018      	movs	r0, r3
 80034c0:	f7fc fe3e 	bl	8000140 <__udivsi3>
 80034c4:	0003      	movs	r3, r0
 80034c6:	009a      	lsls	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a2d      	ldr	r2, [pc, #180]	; (8003584 <HAL_DMA_Init+0xe4>)
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2225      	movs	r2, #37	; 0x25
 80034d6:	2102      	movs	r1, #2
 80034d8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a28      	ldr	r2, [pc, #160]	; (8003588 <HAL_DMA_Init+0xe8>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	01db      	lsls	r3, r3, #7
 8003528:	429a      	cmp	r2, r3
 800352a:	d018      	beq.n	800355e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <HAL_DMA_Init+0xec>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	211c      	movs	r1, #28
 8003536:	400b      	ands	r3, r1
 8003538:	210f      	movs	r1, #15
 800353a:	4099      	lsls	r1, r3
 800353c:	000b      	movs	r3, r1
 800353e:	43d9      	mvns	r1, r3
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_DMA_Init+0xec>)
 8003542:	400a      	ands	r2, r1
 8003544:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <HAL_DMA_Init+0xec>)
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	201c      	movs	r0, #28
 8003554:	4003      	ands	r3, r0
 8003556:	409a      	lsls	r2, r3
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_DMA_Init+0xec>)
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2225      	movs	r2, #37	; 0x25
 8003568:	2101      	movs	r1, #1
 800356a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	; 0x24
 8003570:	2100      	movs	r1, #0
 8003572:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b004      	add	sp, #16
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	bffdfff8 	.word	0xbffdfff8
 8003584:	40020000 	.word	0x40020000
 8003588:	ffff800f 	.word	0xffff800f
 800358c:	400200a8 	.word	0x400200a8

08003590 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800359e:	2317      	movs	r3, #23
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2224      	movs	r2, #36	; 0x24
 80035aa:	5c9b      	ldrb	r3, [r3, r2]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_DMA_Start_IT+0x24>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e04f      	b.n	8003654 <HAL_DMA_Start_IT+0xc4>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	2101      	movs	r1, #1
 80035ba:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2225      	movs	r2, #37	; 0x25
 80035c0:	5c9b      	ldrb	r3, [r3, r2]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d13a      	bne.n	800363e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2225      	movs	r2, #37	; 0x25
 80035cc:	2102      	movs	r1, #2
 80035ce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	438a      	bics	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f974 	bl	80038da <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	210e      	movs	r1, #14
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e00f      	b.n	800362c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2104      	movs	r1, #4
 8003618:	438a      	bics	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	210a      	movs	r1, #10
 8003628:	430a      	orrs	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2101      	movs	r1, #1
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e007      	b.n	800364e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2224      	movs	r2, #36	; 0x24
 8003642:	2100      	movs	r1, #0
 8003644:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003646:	2317      	movs	r3, #23
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800364e:	2317      	movs	r3, #23
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	781b      	ldrb	r3, [r3, #0]
}
 8003654:	0018      	movs	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	b006      	add	sp, #24
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	230f      	movs	r3, #15
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2225      	movs	r2, #37	; 0x25
 8003670:	5c9b      	ldrb	r3, [r3, r2]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d008      	beq.n	800368a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2204      	movs	r2, #4
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2224      	movs	r2, #36	; 0x24
 8003682:	2100      	movs	r1, #0
 8003684:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e024      	b.n	80036d4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	210e      	movs	r1, #14
 8003696:	438a      	bics	r2, r1
 8003698:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2101      	movs	r1, #1
 80036a6:	438a      	bics	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	221c      	movs	r2, #28
 80036b0:	401a      	ands	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2101      	movs	r1, #1
 80036b8:	4091      	lsls	r1, r2
 80036ba:	000a      	movs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2225      	movs	r2, #37	; 0x25
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2224      	movs	r2, #36	; 0x24
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

    return status;
 80036ce:	230f      	movs	r3, #15
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b004      	add	sp, #16
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e4:	210f      	movs	r1, #15
 80036e6:	187b      	adds	r3, r7, r1
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2225      	movs	r2, #37	; 0x25
 80036f0:	5c9b      	ldrb	r3, [r3, r2]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d006      	beq.n	8003706 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2204      	movs	r2, #4
 80036fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e02a      	b.n	800375c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	210e      	movs	r1, #14
 8003712:	438a      	bics	r2, r1
 8003714:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	438a      	bics	r2, r1
 8003724:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	221c      	movs	r2, #28
 800372c:	401a      	ands	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2101      	movs	r1, #1
 8003734:	4091      	lsls	r1, r2
 8003736:	000a      	movs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2225      	movs	r2, #37	; 0x25
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2224      	movs	r2, #36	; 0x24
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	0010      	movs	r0, r2
 800375a:	4798      	blx	r3
    }
  }
  return status;
 800375c:	230f      	movs	r3, #15
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	781b      	ldrb	r3, [r3, #0]
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	221c      	movs	r2, #28
 8003788:	4013      	ands	r3, r2
 800378a:	2204      	movs	r2, #4
 800378c:	409a      	lsls	r2, r3
 800378e:	0013      	movs	r3, r2
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4013      	ands	r3, r2
 8003794:	d026      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x7a>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2204      	movs	r2, #4
 800379a:	4013      	ands	r3, r2
 800379c:	d022      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2220      	movs	r2, #32
 80037a6:	4013      	ands	r3, r2
 80037a8:	d107      	bne.n	80037ba <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2104      	movs	r1, #4
 80037b6:	438a      	bics	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	221c      	movs	r2, #28
 80037c0:	401a      	ands	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2104      	movs	r1, #4
 80037c8:	4091      	lsls	r1, r2
 80037ca:	000a      	movs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d100      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x6e>
 80037d6:	e071      	b.n	80038bc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	0010      	movs	r0, r2
 80037e0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80037e2:	e06b      	b.n	80038bc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	221c      	movs	r2, #28
 80037ea:	4013      	ands	r3, r2
 80037ec:	2202      	movs	r2, #2
 80037ee:	409a      	lsls	r2, r3
 80037f0:	0013      	movs	r3, r2
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	d02d      	beq.n	8003854 <HAL_DMA_IRQHandler+0xea>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2202      	movs	r2, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	d029      	beq.n	8003854 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2220      	movs	r2, #32
 8003808:	4013      	ands	r3, r2
 800380a:	d10b      	bne.n	8003824 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	210a      	movs	r1, #10
 8003818:	438a      	bics	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2225      	movs	r2, #37	; 0x25
 8003820:	2101      	movs	r1, #1
 8003822:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	221c      	movs	r2, #28
 800382a:	401a      	ands	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	2102      	movs	r1, #2
 8003832:	4091      	lsls	r1, r2
 8003834:	000a      	movs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	2100      	movs	r1, #0
 800383e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d039      	beq.n	80038bc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	0010      	movs	r0, r2
 8003850:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003852:	e033      	b.n	80038bc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	221c      	movs	r2, #28
 800385a:	4013      	ands	r3, r2
 800385c:	2208      	movs	r2, #8
 800385e:	409a      	lsls	r2, r3
 8003860:	0013      	movs	r3, r2
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4013      	ands	r3, r2
 8003866:	d02a      	beq.n	80038be <HAL_DMA_IRQHandler+0x154>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2208      	movs	r2, #8
 800386c:	4013      	ands	r3, r2
 800386e:	d026      	beq.n	80038be <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	210e      	movs	r1, #14
 800387c:	438a      	bics	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	221c      	movs	r2, #28
 8003886:	401a      	ands	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2101      	movs	r1, #1
 800388e:	4091      	lsls	r1, r2
 8003890:	000a      	movs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2225      	movs	r2, #37	; 0x25
 800389e:	2101      	movs	r1, #1
 80038a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2224      	movs	r2, #36	; 0x24
 80038a6:	2100      	movs	r1, #0
 80038a8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	0010      	movs	r0, r2
 80038ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46c0      	nop			; (mov r8, r8)
}
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b004      	add	sp, #16
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b002      	add	sp, #8
 80038d8:	bd80      	pop	{r7, pc}

080038da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ec:	221c      	movs	r2, #28
 80038ee:	401a      	ands	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	2101      	movs	r1, #1
 80038f6:	4091      	lsls	r1, r2
 80038f8:	000a      	movs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b10      	cmp	r3, #16
 800390a:	d108      	bne.n	800391e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800391c:	e007      	b.n	800392e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	60da      	str	r2, [r3, #12]
}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	b004      	add	sp, #16
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800394e:	e155      	b.n	8003bfc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2101      	movs	r1, #1
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4091      	lsls	r1, r2
 800395a:	000a      	movs	r2, r1
 800395c:	4013      	ands	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d100      	bne.n	8003968 <HAL_GPIO_Init+0x30>
 8003966:	e146      	b.n	8003bf6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x40>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b12      	cmp	r3, #18
 8003976:	d123      	bne.n	80039c0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	08da      	lsrs	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3208      	adds	r2, #8
 8003980:	0092      	lsls	r2, r2, #2
 8003982:	58d3      	ldr	r3, [r2, r3]
 8003984:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2207      	movs	r2, #7
 800398a:	4013      	ands	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	220f      	movs	r2, #15
 8003990:	409a      	lsls	r2, r3
 8003992:	0013      	movs	r3, r2
 8003994:	43da      	mvns	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2107      	movs	r1, #7
 80039a4:	400b      	ands	r3, r1
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	409a      	lsls	r2, r3
 80039aa:	0013      	movs	r3, r2
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	08da      	lsrs	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3208      	adds	r2, #8
 80039ba:	0092      	lsls	r2, r2, #2
 80039bc:	6939      	ldr	r1, [r7, #16]
 80039be:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d00b      	beq.n	80039e0 <HAL_GPIO_Init+0xa8>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d007      	beq.n	80039e0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039d4:	2b11      	cmp	r3, #17
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b12      	cmp	r3, #18
 80039de:	d130      	bne.n	8003a42 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2203      	movs	r2, #3
 80039ec:	409a      	lsls	r2, r3
 80039ee:	0013      	movs	r3, r2
 80039f0:	43da      	mvns	r2, r3
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	409a      	lsls	r2, r3
 8003a02:	0013      	movs	r3, r2
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a16:	2201      	movs	r2, #1
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	0013      	movs	r3, r2
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4013      	ands	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	401a      	ands	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	409a      	lsls	r2, r3
 8003a34:	0013      	movs	r3, r2
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	0013      	movs	r3, r2
 8003a52:	43da      	mvns	r2, r3
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4013      	ands	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	401a      	ands	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	409a      	lsls	r2, r3
 8003a68:	0013      	movs	r3, r2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	2203      	movs	r2, #3
 8003a82:	409a      	lsls	r2, r3
 8003a84:	0013      	movs	r3, r2
 8003a86:	43da      	mvns	r2, r3
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	409a      	lsls	r2, r3
 8003a98:	0013      	movs	r3, r2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	055b      	lsls	r3, r3, #21
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d100      	bne.n	8003ab4 <HAL_GPIO_Init+0x17c>
 8003ab2:	e0a0      	b.n	8003bf6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab4:	4b57      	ldr	r3, [pc, #348]	; (8003c14 <HAL_GPIO_Init+0x2dc>)
 8003ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab8:	4b56      	ldr	r3, [pc, #344]	; (8003c14 <HAL_GPIO_Init+0x2dc>)
 8003aba:	2101      	movs	r1, #1
 8003abc:	430a      	orrs	r2, r1
 8003abe:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8003ac0:	4a55      	ldr	r2, [pc, #340]	; (8003c18 <HAL_GPIO_Init+0x2e0>)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	3302      	adds	r3, #2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	589b      	ldr	r3, [r3, r2]
 8003acc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	0013      	movs	r3, r2
 8003adc:	43da      	mvns	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	23a0      	movs	r3, #160	; 0xa0
 8003ae8:	05db      	lsls	r3, r3, #23
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d01f      	beq.n	8003b2e <HAL_GPIO_Init+0x1f6>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a4a      	ldr	r2, [pc, #296]	; (8003c1c <HAL_GPIO_Init+0x2e4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d019      	beq.n	8003b2a <HAL_GPIO_Init+0x1f2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a49      	ldr	r2, [pc, #292]	; (8003c20 <HAL_GPIO_Init+0x2e8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_GPIO_Init+0x1ee>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a48      	ldr	r2, [pc, #288]	; (8003c24 <HAL_GPIO_Init+0x2ec>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00d      	beq.n	8003b22 <HAL_GPIO_Init+0x1ea>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a47      	ldr	r2, [pc, #284]	; (8003c28 <HAL_GPIO_Init+0x2f0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <HAL_GPIO_Init+0x1e6>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a46      	ldr	r2, [pc, #280]	; (8003c2c <HAL_GPIO_Init+0x2f4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d101      	bne.n	8003b1a <HAL_GPIO_Init+0x1e2>
 8003b16:	2305      	movs	r3, #5
 8003b18:	e00a      	b.n	8003b30 <HAL_GPIO_Init+0x1f8>
 8003b1a:	2306      	movs	r3, #6
 8003b1c:	e008      	b.n	8003b30 <HAL_GPIO_Init+0x1f8>
 8003b1e:	2304      	movs	r3, #4
 8003b20:	e006      	b.n	8003b30 <HAL_GPIO_Init+0x1f8>
 8003b22:	2303      	movs	r3, #3
 8003b24:	e004      	b.n	8003b30 <HAL_GPIO_Init+0x1f8>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e002      	b.n	8003b30 <HAL_GPIO_Init+0x1f8>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <HAL_GPIO_Init+0x1f8>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	2103      	movs	r1, #3
 8003b34:	400a      	ands	r2, r1
 8003b36:	0092      	lsls	r2, r2, #2
 8003b38:	4093      	lsls	r3, r2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b40:	4935      	ldr	r1, [pc, #212]	; (8003c18 <HAL_GPIO_Init+0x2e0>)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	3302      	adds	r3, #2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b4e:	4b38      	ldr	r3, [pc, #224]	; (8003c30 <HAL_GPIO_Init+0x2f8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	43da      	mvns	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	025b      	lsls	r3, r3, #9
 8003b66:	4013      	ands	r3, r2
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b72:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <HAL_GPIO_Init+0x2f8>)
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003b78:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <HAL_GPIO_Init+0x2f8>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	43da      	mvns	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	029b      	lsls	r3, r3, #10
 8003b90:	4013      	ands	r3, r2
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b9c:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <HAL_GPIO_Init+0x2f8>)
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ba2:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <HAL_GPIO_Init+0x2f8>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	43da      	mvns	r2, r3
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	035b      	lsls	r3, r3, #13
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <HAL_GPIO_Init+0x2f8>)
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003bcc:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <HAL_GPIO_Init+0x2f8>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	039b      	lsls	r3, r3, #14
 8003be4:	4013      	ands	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <HAL_GPIO_Init+0x2f8>)
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	40da      	lsrs	r2, r3
 8003c04:	1e13      	subs	r3, r2, #0
 8003c06:	d000      	beq.n	8003c0a <HAL_GPIO_Init+0x2d2>
 8003c08:	e6a2      	b.n	8003950 <HAL_GPIO_Init+0x18>
  }
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b006      	add	sp, #24
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	50000400 	.word	0x50000400
 8003c20:	50000800 	.word	0x50000800
 8003c24:	50000c00 	.word	0x50000c00
 8003c28:	50001000 	.word	0x50001000
 8003c2c:	50001c00 	.word	0x50001c00
 8003c30:	40010400 	.word	0x40010400

08003c34 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	000a      	movs	r2, r1
 8003c3e:	1cbb      	adds	r3, r7, #2
 8003c40:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	1cba      	adds	r2, r7, #2
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003c4e:	230f      	movs	r3, #15
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e003      	b.n	8003c60 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c58:	230f      	movs	r3, #15
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003c60:	230f      	movs	r3, #15
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	781b      	ldrb	r3, [r3, #0]
}
 8003c66:	0018      	movs	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b004      	add	sp, #16
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	0008      	movs	r0, r1
 8003c78:	0011      	movs	r1, r2
 8003c7a:	1cbb      	adds	r3, r7, #2
 8003c7c:	1c02      	adds	r2, r0, #0
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	1c7b      	adds	r3, r7, #1
 8003c82:	1c0a      	adds	r2, r1, #0
 8003c84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8003c86:	1c7b      	adds	r3, r7, #1
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8e:	1cbb      	adds	r3, r7, #2
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003c96:	e003      	b.n	8003ca0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003c98:	1cbb      	adds	r3, r7, #2
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	000a      	movs	r2, r1
 8003cb2:	1cfb      	adds	r3, r7, #3
 8003cb4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003cba:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_PWR_EnterSTOPMode+0x68>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <HAL_PWR_EnterSTOPMode+0x68>)
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003cdc:	2104      	movs	r1, #4
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003ce2:	1cfb      	adds	r3, r7, #3
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8003cea:	bf30      	wfi
}
 8003cec:	e005      	b.n	8003cfa <HAL_PWR_EnterSTOPMode+0x52>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8003cee:	bf40      	sev
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("wfe");
 8003cf2:	bf20      	wfe
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("wfe");
 8003cf6:	bf20      	wfe
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003d00:	2104      	movs	r1, #4
 8003d02:	438a      	bics	r2, r1
 8003d04:	611a      	str	r2, [r3, #16]

}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b004      	add	sp, #16
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	40007000 	.word	0x40007000
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b5b0      	push	{r4, r5, r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f000 fb68 	bl	80043fc <HAL_RCC_OscConfig+0x6e4>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d2c:	4bc7      	ldr	r3, [pc, #796]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	220c      	movs	r2, #12
 8003d32:	4013      	ands	r3, r2
 8003d34:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d36:	4bc5      	ldr	r3, [pc, #788]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	025b      	lsls	r3, r3, #9
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2201      	movs	r2, #1
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d100      	bne.n	8003d4e <HAL_RCC_OscConfig+0x36>
 8003d4c:	e07d      	b.n	8003e4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d007      	beq.n	8003d64 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d112      	bne.n	8003d80 <HAL_RCC_OscConfig+0x68>
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	025b      	lsls	r3, r3, #9
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d10d      	bne.n	8003d80 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d64:	4bb9      	ldr	r3, [pc, #740]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	029b      	lsls	r3, r3, #10
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <HAL_RCC_OscConfig+0x5a>
 8003d70:	e06a      	b.n	8003e48 <HAL_RCC_OscConfig+0x130>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d166      	bne.n	8003e48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f000 fb3e 	bl	80043fc <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	025b      	lsls	r3, r3, #9
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d107      	bne.n	8003d9c <HAL_RCC_OscConfig+0x84>
 8003d8c:	4baf      	ldr	r3, [pc, #700]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4bae      	ldr	r3, [pc, #696]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003d92:	2180      	movs	r1, #128	; 0x80
 8003d94:	0249      	lsls	r1, r1, #9
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e027      	b.n	8003dec <HAL_RCC_OscConfig+0xd4>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	23a0      	movs	r3, #160	; 0xa0
 8003da2:	02db      	lsls	r3, r3, #11
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d10e      	bne.n	8003dc6 <HAL_RCC_OscConfig+0xae>
 8003da8:	4ba8      	ldr	r3, [pc, #672]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4ba7      	ldr	r3, [pc, #668]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	02c9      	lsls	r1, r1, #11
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	4ba5      	ldr	r3, [pc, #660]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4ba4      	ldr	r3, [pc, #656]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	0249      	lsls	r1, r1, #9
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e012      	b.n	8003dec <HAL_RCC_OscConfig+0xd4>
 8003dc6:	4ba1      	ldr	r3, [pc, #644]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4ba0      	ldr	r3, [pc, #640]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003dcc:	49a0      	ldr	r1, [pc, #640]	; (8004050 <HAL_RCC_OscConfig+0x338>)
 8003dce:	400a      	ands	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	4b9e      	ldr	r3, [pc, #632]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	025b      	lsls	r3, r3, #9
 8003dda:	4013      	ands	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4b9a      	ldr	r3, [pc, #616]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b99      	ldr	r3, [pc, #612]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003de6:	499b      	ldr	r1, [pc, #620]	; (8004054 <HAL_RCC_OscConfig+0x33c>)
 8003de8:	400a      	ands	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d014      	beq.n	8003e1e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fe fdee 	bl	80029d4 <HAL_GetTick>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dfe:	f7fe fde9 	bl	80029d4 <HAL_GetTick>
 8003e02:	0002      	movs	r2, r0
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b64      	cmp	r3, #100	; 0x64
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e2f5      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e10:	4b8e      	ldr	r3, [pc, #568]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	029b      	lsls	r3, r3, #10
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0xe6>
 8003e1c:	e015      	b.n	8003e4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fe fdd9 	bl	80029d4 <HAL_GetTick>
 8003e22:	0003      	movs	r3, r0
 8003e24:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e28:	f7fe fdd4 	bl	80029d4 <HAL_GetTick>
 8003e2c:	0002      	movs	r2, r0
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	; 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e2e0      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e3a:	4b84      	ldr	r3, [pc, #528]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	029b      	lsls	r3, r3, #10
 8003e42:	4013      	ands	r3, r2
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x110>
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	4013      	ands	r3, r2
 8003e52:	d100      	bne.n	8003e56 <HAL_RCC_OscConfig+0x13e>
 8003e54:	e098      	b.n	8003f88 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	2220      	movs	r2, #32
 8003e60:	4013      	ands	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003e64:	4b79      	ldr	r3, [pc, #484]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b78      	ldr	r3, [pc, #480]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003e6a:	2120      	movs	r1, #32
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	2220      	movs	r2, #32
 8003e74:	4393      	bics	r3, r2
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d005      	beq.n	8003e8a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	2b0c      	cmp	r3, #12
 8003e82:	d13d      	bne.n	8003f00 <HAL_RCC_OscConfig+0x1e8>
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d13a      	bne.n	8003f00 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003e8a:	4b70      	ldr	r3, [pc, #448]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2204      	movs	r2, #4
 8003e90:	4013      	ands	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_RCC_OscConfig+0x186>
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e2ae      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9e:	4b6b      	ldr	r3, [pc, #428]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4a6d      	ldr	r2, [pc, #436]	; (8004058 <HAL_RCC_OscConfig+0x340>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	021a      	lsls	r2, r3, #8
 8003eae:	4b67      	ldr	r3, [pc, #412]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003eb4:	4b65      	ldr	r3, [pc, #404]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2209      	movs	r2, #9
 8003eba:	4393      	bics	r3, r2
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	4b63      	ldr	r3, [pc, #396]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ec6:	f000 fbc9 	bl	800465c <HAL_RCC_GetSysClockFreq>
 8003eca:	0001      	movs	r1, r0
 8003ecc:	4b5f      	ldr	r3, [pc, #380]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	220f      	movs	r2, #15
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	4a61      	ldr	r2, [pc, #388]	; (800405c <HAL_RCC_OscConfig+0x344>)
 8003ed8:	5cd3      	ldrb	r3, [r2, r3]
 8003eda:	000a      	movs	r2, r1
 8003edc:	40da      	lsrs	r2, r3
 8003ede:	4b60      	ldr	r3, [pc, #384]	; (8004060 <HAL_RCC_OscConfig+0x348>)
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003ee2:	2513      	movs	r5, #19
 8003ee4:	197c      	adds	r4, r7, r5
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	f005 fc44 	bl	8009774 <HAL_InitTick>
 8003eec:	0003      	movs	r3, r0
 8003eee:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003ef0:	002a      	movs	r2, r5
 8003ef2:	18bb      	adds	r3, r7, r2
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d046      	beq.n	8003f88 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8003efa:	18bb      	adds	r3, r7, r2
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	e27d      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d027      	beq.n	8003f56 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f06:	4b51      	ldr	r3, [pc, #324]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2209      	movs	r2, #9
 8003f0c:	4393      	bics	r3, r2
 8003f0e:	0019      	movs	r1, r3
 8003f10:	4b4e      	ldr	r3, [pc, #312]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fe fd5c 	bl	80029d4 <HAL_GetTick>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f22:	f7fe fd57 	bl	80029d4 <HAL_GetTick>
 8003f26:	0002      	movs	r2, r0
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e263      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f34:	4b45      	ldr	r3, [pc, #276]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2204      	movs	r2, #4
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d0f1      	beq.n	8003f22 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3e:	4b43      	ldr	r3, [pc, #268]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4a45      	ldr	r2, [pc, #276]	; (8004058 <HAL_RCC_OscConfig+0x340>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	0019      	movs	r1, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	021a      	lsls	r2, r3, #8
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	e018      	b.n	8003f88 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f56:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b3c      	ldr	r3, [pc, #240]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	438a      	bics	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fe fd37 	bl	80029d4 <HAL_GetTick>
 8003f66:	0003      	movs	r3, r0
 8003f68:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f6c:	f7fe fd32 	bl	80029d4 <HAL_GetTick>
 8003f70:	0002      	movs	r2, r0
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e23e      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f7e:	4b33      	ldr	r3, [pc, #204]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2204      	movs	r2, #4
 8003f84:	4013      	ands	r3, r2
 8003f86:	d1f1      	bne.n	8003f6c <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d100      	bne.n	8003f94 <HAL_RCC_OscConfig+0x27c>
 8003f92:	e09e      	b.n	80040d2 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d13f      	bne.n	800401a <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d005      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x29a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e224      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fb2:	4b26      	ldr	r3, [pc, #152]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4a2b      	ldr	r2, [pc, #172]	; (8004064 <HAL_RCC_OscConfig+0x34c>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	0019      	movs	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fc6:	4b21      	ldr	r3, [pc, #132]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	0a19      	lsrs	r1, r3, #8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	061a      	lsls	r2, r3, #24
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	0b5b      	lsrs	r3, r3, #13
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	2280      	movs	r2, #128	; 0x80
 8003fe4:	0212      	lsls	r2, r2, #8
 8003fe6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003fe8:	4b18      	ldr	r3, [pc, #96]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	210f      	movs	r1, #15
 8003ff0:	400b      	ands	r3, r1
 8003ff2:	491a      	ldr	r1, [pc, #104]	; (800405c <HAL_RCC_OscConfig+0x344>)
 8003ff4:	5ccb      	ldrb	r3, [r1, r3]
 8003ff6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCC_OscConfig+0x348>)
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003ffc:	2513      	movs	r5, #19
 8003ffe:	197c      	adds	r4, r7, r5
 8004000:	2000      	movs	r0, #0
 8004002:	f005 fbb7 	bl	8009774 <HAL_InitTick>
 8004006:	0003      	movs	r3, r0
 8004008:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800400a:	002a      	movs	r2, r5
 800400c:	18bb      	adds	r3, r7, r2
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d05e      	beq.n	80040d2 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8004014:	18bb      	adds	r3, r7, r2
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	e1f0      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d03d      	beq.n	800409e <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_RCC_OscConfig+0x334>)
 8004028:	2180      	movs	r1, #128	; 0x80
 800402a:	0049      	lsls	r1, r1, #1
 800402c:	430a      	orrs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe fcd0 	bl	80029d4 <HAL_GetTick>
 8004034:	0003      	movs	r3, r0
 8004036:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004038:	e016      	b.n	8004068 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800403a:	f7fe fccb 	bl	80029d4 <HAL_GetTick>
 800403e:	0002      	movs	r2, r0
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d90f      	bls.n	8004068 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e1d7      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
 800404c:	40021000 	.word	0x40021000
 8004050:	fffeffff 	.word	0xfffeffff
 8004054:	fffbffff 	.word	0xfffbffff
 8004058:	ffffe0ff 	.word	0xffffe0ff
 800405c:	0800d990 	.word	0x0800d990
 8004060:	20000038 	.word	0x20000038
 8004064:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004068:	4bc9      	ldr	r3, [pc, #804]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4013      	ands	r3, r2
 8004072:	d0e2      	beq.n	800403a <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004074:	4bc6      	ldr	r3, [pc, #792]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4ac6      	ldr	r2, [pc, #792]	; (8004394 <HAL_RCC_OscConfig+0x67c>)
 800407a:	4013      	ands	r3, r2
 800407c:	0019      	movs	r1, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	4bc3      	ldr	r3, [pc, #780]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004088:	4bc1      	ldr	r3, [pc, #772]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	0a19      	lsrs	r1, r3, #8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	061a      	lsls	r2, r3, #24
 8004096:	4bbe      	ldr	r3, [pc, #760]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	e019      	b.n	80040d2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800409e:	4bbc      	ldr	r3, [pc, #752]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4bbb      	ldr	r3, [pc, #748]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80040a4:	49bc      	ldr	r1, [pc, #752]	; (8004398 <HAL_RCC_OscConfig+0x680>)
 80040a6:	400a      	ands	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040aa:	f7fe fc93 	bl	80029d4 <HAL_GetTick>
 80040ae:	0003      	movs	r3, r0
 80040b0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040b4:	f7fe fc8e 	bl	80029d4 <HAL_GetTick>
 80040b8:	0002      	movs	r2, r0
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e19a      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040c6:	4bb2      	ldr	r3, [pc, #712]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4013      	ands	r3, r2
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2208      	movs	r2, #8
 80040d8:	4013      	ands	r3, r2
 80040da:	d036      	beq.n	800414a <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d019      	beq.n	8004118 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e4:	4baa      	ldr	r3, [pc, #680]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80040e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040e8:	4ba9      	ldr	r3, [pc, #676]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80040ea:	2101      	movs	r1, #1
 80040ec:	430a      	orrs	r2, r1
 80040ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f0:	f7fe fc70 	bl	80029d4 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fa:	f7fe fc6b 	bl	80029d4 <HAL_GetTick>
 80040fe:	0002      	movs	r2, r0
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e177      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800410c:	4ba0      	ldr	r3, [pc, #640]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800410e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004110:	2202      	movs	r2, #2
 8004112:	4013      	ands	r3, r2
 8004114:	d0f1      	beq.n	80040fa <HAL_RCC_OscConfig+0x3e2>
 8004116:	e018      	b.n	800414a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004118:	4b9d      	ldr	r3, [pc, #628]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800411a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800411c:	4b9c      	ldr	r3, [pc, #624]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800411e:	2101      	movs	r1, #1
 8004120:	438a      	bics	r2, r1
 8004122:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004124:	f7fe fc56 	bl	80029d4 <HAL_GetTick>
 8004128:	0003      	movs	r3, r0
 800412a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412e:	f7fe fc51 	bl	80029d4 <HAL_GetTick>
 8004132:	0002      	movs	r2, r0
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e15d      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004140:	4b93      	ldr	r3, [pc, #588]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004144:	2202      	movs	r2, #2
 8004146:	4013      	ands	r3, r2
 8004148:	d1f1      	bne.n	800412e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2204      	movs	r2, #4
 8004150:	4013      	ands	r3, r2
 8004152:	d100      	bne.n	8004156 <HAL_RCC_OscConfig+0x43e>
 8004154:	e0ae      	b.n	80042b4 <HAL_RCC_OscConfig+0x59c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004156:	2023      	movs	r0, #35	; 0x23
 8004158:	183b      	adds	r3, r7, r0
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415e:	4b8c      	ldr	r3, [pc, #560]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	055b      	lsls	r3, r3, #21
 8004166:	4013      	ands	r3, r2
 8004168:	d109      	bne.n	800417e <HAL_RCC_OscConfig+0x466>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416a:	4b89      	ldr	r3, [pc, #548]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800416c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416e:	4b88      	ldr	r3, [pc, #544]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	0549      	lsls	r1, r1, #21
 8004174:	430a      	orrs	r2, r1
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004178:	183b      	adds	r3, r7, r0
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417e:	4b87      	ldr	r3, [pc, #540]	; (800439c <HAL_RCC_OscConfig+0x684>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4013      	ands	r3, r2
 8004188:	d11a      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418a:	4b84      	ldr	r3, [pc, #528]	; (800439c <HAL_RCC_OscConfig+0x684>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b83      	ldr	r3, [pc, #524]	; (800439c <HAL_RCC_OscConfig+0x684>)
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	0049      	lsls	r1, r1, #1
 8004194:	430a      	orrs	r2, r1
 8004196:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004198:	f7fe fc1c 	bl	80029d4 <HAL_GetTick>
 800419c:	0003      	movs	r3, r0
 800419e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x49c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a2:	f7fe fc17 	bl	80029d4 <HAL_GetTick>
 80041a6:	0002      	movs	r2, r0
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b64      	cmp	r3, #100	; 0x64
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x49c>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e123      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	4b79      	ldr	r3, [pc, #484]	; (800439c <HAL_RCC_OscConfig+0x684>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	2380      	movs	r3, #128	; 0x80
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4013      	ands	r3, r2
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d107      	bne.n	80041dc <HAL_RCC_OscConfig+0x4c4>
 80041cc:	4b70      	ldr	r3, [pc, #448]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80041ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041d0:	4b6f      	ldr	r3, [pc, #444]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80041d2:	2180      	movs	r1, #128	; 0x80
 80041d4:	0049      	lsls	r1, r1, #1
 80041d6:	430a      	orrs	r2, r1
 80041d8:	651a      	str	r2, [r3, #80]	; 0x50
 80041da:	e031      	b.n	8004240 <HAL_RCC_OscConfig+0x528>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10c      	bne.n	80041fe <HAL_RCC_OscConfig+0x4e6>
 80041e4:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80041e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041e8:	4b69      	ldr	r3, [pc, #420]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80041ea:	496b      	ldr	r1, [pc, #428]	; (8004398 <HAL_RCC_OscConfig+0x680>)
 80041ec:	400a      	ands	r2, r1
 80041ee:	651a      	str	r2, [r3, #80]	; 0x50
 80041f0:	4b67      	ldr	r3, [pc, #412]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80041f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041f4:	4b66      	ldr	r3, [pc, #408]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80041f6:	496a      	ldr	r1, [pc, #424]	; (80043a0 <HAL_RCC_OscConfig+0x688>)
 80041f8:	400a      	ands	r2, r1
 80041fa:	651a      	str	r2, [r3, #80]	; 0x50
 80041fc:	e020      	b.n	8004240 <HAL_RCC_OscConfig+0x528>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	23a0      	movs	r3, #160	; 0xa0
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	429a      	cmp	r2, r3
 8004208:	d10e      	bne.n	8004228 <HAL_RCC_OscConfig+0x510>
 800420a:	4b61      	ldr	r3, [pc, #388]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800420c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800420e:	4b60      	ldr	r3, [pc, #384]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004210:	2180      	movs	r1, #128	; 0x80
 8004212:	00c9      	lsls	r1, r1, #3
 8004214:	430a      	orrs	r2, r1
 8004216:	651a      	str	r2, [r3, #80]	; 0x50
 8004218:	4b5d      	ldr	r3, [pc, #372]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800421a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800421c:	4b5c      	ldr	r3, [pc, #368]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800421e:	2180      	movs	r1, #128	; 0x80
 8004220:	0049      	lsls	r1, r1, #1
 8004222:	430a      	orrs	r2, r1
 8004224:	651a      	str	r2, [r3, #80]	; 0x50
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0x528>
 8004228:	4b59      	ldr	r3, [pc, #356]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800422a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800422c:	4b58      	ldr	r3, [pc, #352]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800422e:	495a      	ldr	r1, [pc, #360]	; (8004398 <HAL_RCC_OscConfig+0x680>)
 8004230:	400a      	ands	r2, r1
 8004232:	651a      	str	r2, [r3, #80]	; 0x50
 8004234:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004236:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004238:	4b55      	ldr	r3, [pc, #340]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800423a:	4959      	ldr	r1, [pc, #356]	; (80043a0 <HAL_RCC_OscConfig+0x688>)
 800423c:	400a      	ands	r2, r1
 800423e:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d015      	beq.n	8004274 <HAL_RCC_OscConfig+0x55c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004248:	f7fe fbc4 	bl	80029d4 <HAL_GetTick>
 800424c:	0003      	movs	r3, r0
 800424e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004250:	e009      	b.n	8004266 <HAL_RCC_OscConfig+0x54e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fe fbbf 	bl	80029d4 <HAL_GetTick>
 8004256:	0002      	movs	r2, r0
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	4a51      	ldr	r2, [pc, #324]	; (80043a4 <HAL_RCC_OscConfig+0x68c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x54e>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e0ca      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004266:	4b4a      	ldr	r3, [pc, #296]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800426a:	2380      	movs	r3, #128	; 0x80
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4013      	ands	r3, r2
 8004270:	d0ef      	beq.n	8004252 <HAL_RCC_OscConfig+0x53a>
 8004272:	e014      	b.n	800429e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004274:	f7fe fbae 	bl	80029d4 <HAL_GetTick>
 8004278:	0003      	movs	r3, r0
 800427a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800427c:	e009      	b.n	8004292 <HAL_RCC_OscConfig+0x57a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427e:	f7fe fba9 	bl	80029d4 <HAL_GetTick>
 8004282:	0002      	movs	r2, r0
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	4a46      	ldr	r2, [pc, #280]	; (80043a4 <HAL_RCC_OscConfig+0x68c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x57a>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e0b4      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004292:	4b3f      	ldr	r3, [pc, #252]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4013      	ands	r3, r2
 800429c:	d1ef      	bne.n	800427e <HAL_RCC_OscConfig+0x566>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800429e:	2323      	movs	r3, #35	; 0x23
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d105      	bne.n	80042b4 <HAL_RCC_OscConfig+0x59c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a8:	4b39      	ldr	r3, [pc, #228]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80042aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ac:	4b38      	ldr	r3, [pc, #224]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80042ae:	493e      	ldr	r1, [pc, #248]	; (80043a8 <HAL_RCC_OscConfig+0x690>)
 80042b0:	400a      	ands	r2, r1
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d100      	bne.n	80042be <HAL_RCC_OscConfig+0x5a6>
 80042bc:	e09d      	b.n	80043fa <HAL_RCC_OscConfig+0x6e2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d100      	bne.n	80042c6 <HAL_RCC_OscConfig+0x5ae>
 80042c4:	e076      	b.n	80043b4 <HAL_RCC_OscConfig+0x69c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d145      	bne.n	800435a <HAL_RCC_OscConfig+0x642>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ce:	4b30      	ldr	r3, [pc, #192]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	4b2f      	ldr	r3, [pc, #188]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80042d4:	4935      	ldr	r1, [pc, #212]	; (80043ac <HAL_RCC_OscConfig+0x694>)
 80042d6:	400a      	ands	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042da:	f7fe fb7b 	bl	80029d4 <HAL_GetTick>
 80042de:	0003      	movs	r3, r0
 80042e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fe fb76 	bl	80029d4 <HAL_GetTick>
 80042e8:	0002      	movs	r2, r0
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e082      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042f6:	4b26      	ldr	r3, [pc, #152]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	049b      	lsls	r3, r3, #18
 80042fe:	4013      	ands	r3, r2
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5cc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004302:	4b23      	ldr	r3, [pc, #140]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	4a2a      	ldr	r2, [pc, #168]	; (80043b0 <HAL_RCC_OscConfig+0x698>)
 8004308:	4013      	ands	r3, r2
 800430a:	0019      	movs	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	431a      	orrs	r2, r3
 800431c:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800431e:	430a      	orrs	r2, r1
 8004320:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004322:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	0449      	lsls	r1, r1, #17
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fe fb50 	bl	80029d4 <HAL_GetTick>
 8004334:	0003      	movs	r3, r0
 8004336:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x634>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433a:	f7fe fb4b 	bl	80029d4 <HAL_GetTick>
 800433e:	0002      	movs	r2, r0
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x634>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e057      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	049b      	lsls	r3, r3, #18
 8004354:	4013      	ands	r3, r2
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x622>
 8004358:	e04f      	b.n	80043fa <HAL_RCC_OscConfig+0x6e2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004360:	4912      	ldr	r1, [pc, #72]	; (80043ac <HAL_RCC_OscConfig+0x694>)
 8004362:	400a      	ands	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004366:	f7fe fb35 	bl	80029d4 <HAL_GetTick>
 800436a:	0003      	movs	r3, r0
 800436c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004370:	f7fe fb30 	bl	80029d4 <HAL_GetTick>
 8004374:	0002      	movs	r2, r0
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x66a>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e03c      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004382:	4b03      	ldr	r3, [pc, #12]	; (8004390 <HAL_RCC_OscConfig+0x678>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	049b      	lsls	r3, r3, #18
 800438a:	4013      	ands	r3, r2
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x658>
 800438e:	e034      	b.n	80043fa <HAL_RCC_OscConfig+0x6e2>
 8004390:	40021000 	.word	0x40021000
 8004394:	ffff1fff 	.word	0xffff1fff
 8004398:	fffffeff 	.word	0xfffffeff
 800439c:	40007000 	.word	0x40007000
 80043a0:	fffffbff 	.word	0xfffffbff
 80043a4:	00001388 	.word	0x00001388
 80043a8:	efffffff 	.word	0xefffffff
 80043ac:	feffffff 	.word	0xfeffffff
 80043b0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_OscConfig+0x6a8>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e01d      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043c0:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_RCC_OscConfig+0x6ec>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	025b      	lsls	r3, r3, #9
 80043cc:	401a      	ands	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d10f      	bne.n	80043f6 <HAL_RCC_OscConfig+0x6de>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	23f0      	movs	r3, #240	; 0xf0
 80043da:	039b      	lsls	r3, r3, #14
 80043dc:	401a      	ands	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_OscConfig+0x6de>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	23c0      	movs	r3, #192	; 0xc0
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	401a      	ands	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d001      	beq.n	80043fa <HAL_RCC_OscConfig+0x6e2>
        {
          return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <HAL_RCC_OscConfig+0x6e4>
        }
      }
    }
  }

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	0018      	movs	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	b00a      	add	sp, #40	; 0x28
 8004402:	bdb0      	pop	{r4, r5, r7, pc}
 8004404:	40021000 	.word	0x40021000

08004408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004408:	b5b0      	push	{r4, r5, r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e10d      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800441c:	4b88      	ldr	r3, [pc, #544]	; (8004640 <HAL_RCC_ClockConfig+0x238>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2201      	movs	r2, #1
 8004422:	4013      	ands	r3, r2
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d911      	bls.n	800444e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b85      	ldr	r3, [pc, #532]	; (8004640 <HAL_RCC_ClockConfig+0x238>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2201      	movs	r2, #1
 8004430:	4393      	bics	r3, r2
 8004432:	0019      	movs	r1, r3
 8004434:	4b82      	ldr	r3, [pc, #520]	; (8004640 <HAL_RCC_ClockConfig+0x238>)
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443c:	4b80      	ldr	r3, [pc, #512]	; (8004640 <HAL_RCC_ClockConfig+0x238>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	4013      	ands	r3, r2
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d001      	beq.n	800444e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e0f4      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2202      	movs	r2, #2
 8004454:	4013      	ands	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004458:	4b7a      	ldr	r3, [pc, #488]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	22f0      	movs	r2, #240	; 0xf0
 800445e:	4393      	bics	r3, r2
 8004460:	0019      	movs	r1, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	4b77      	ldr	r3, [pc, #476]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 8004468:	430a      	orrs	r2, r1
 800446a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	4013      	ands	r3, r2
 8004474:	d100      	bne.n	8004478 <HAL_RCC_ClockConfig+0x70>
 8004476:	e089      	b.n	800458c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d107      	bne.n	8004490 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004480:	4b70      	ldr	r3, [pc, #448]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	029b      	lsls	r3, r3, #10
 8004488:	4013      	ands	r3, r2
 800448a:	d120      	bne.n	80044ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0d3      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004498:	4b6a      	ldr	r3, [pc, #424]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	049b      	lsls	r3, r3, #18
 80044a0:	4013      	ands	r3, r2
 80044a2:	d114      	bne.n	80044ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0c7      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d106      	bne.n	80044be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044b0:	4b64      	ldr	r3, [pc, #400]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2204      	movs	r2, #4
 80044b6:	4013      	ands	r3, r2
 80044b8:	d109      	bne.n	80044ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0bc      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	2380      	movs	r3, #128	; 0x80
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e0b4      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ce:	4b5d      	ldr	r3, [pc, #372]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2203      	movs	r2, #3
 80044d4:	4393      	bics	r3, r2
 80044d6:	0019      	movs	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	4b59      	ldr	r3, [pc, #356]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 80044de:	430a      	orrs	r2, r1
 80044e0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e2:	f7fe fa77 	bl	80029d4 <HAL_GetTick>
 80044e6:	0003      	movs	r3, r0
 80044e8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d111      	bne.n	8004516 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044f2:	e009      	b.n	8004508 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f4:	f7fe fa6e 	bl	80029d4 <HAL_GetTick>
 80044f8:	0002      	movs	r2, r0
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	4a52      	ldr	r2, [pc, #328]	; (8004648 <HAL_RCC_ClockConfig+0x240>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e097      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004508:	4b4e      	ldr	r3, [pc, #312]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	220c      	movs	r2, #12
 800450e:	4013      	ands	r3, r2
 8004510:	2b08      	cmp	r3, #8
 8004512:	d1ef      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xec>
 8004514:	e03a      	b.n	800458c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b03      	cmp	r3, #3
 800451c:	d111      	bne.n	8004542 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800451e:	e009      	b.n	8004534 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004520:	f7fe fa58 	bl	80029d4 <HAL_GetTick>
 8004524:	0002      	movs	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	4a47      	ldr	r2, [pc, #284]	; (8004648 <HAL_RCC_ClockConfig+0x240>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e081      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	220c      	movs	r2, #12
 800453a:	4013      	ands	r3, r2
 800453c:	2b0c      	cmp	r3, #12
 800453e:	d1ef      	bne.n	8004520 <HAL_RCC_ClockConfig+0x118>
 8004540:	e024      	b.n	800458c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d11b      	bne.n	8004582 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800454a:	e009      	b.n	8004560 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fe fa42 	bl	80029d4 <HAL_GetTick>
 8004550:	0002      	movs	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	4a3c      	ldr	r2, [pc, #240]	; (8004648 <HAL_RCC_ClockConfig+0x240>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e06b      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004560:	4b38      	ldr	r3, [pc, #224]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	220c      	movs	r2, #12
 8004566:	4013      	ands	r3, r2
 8004568:	2b04      	cmp	r3, #4
 800456a:	d1ef      	bne.n	800454c <HAL_RCC_ClockConfig+0x144>
 800456c:	e00e      	b.n	800458c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456e:	f7fe fa31 	bl	80029d4 <HAL_GetTick>
 8004572:	0002      	movs	r2, r0
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	4a33      	ldr	r2, [pc, #204]	; (8004648 <HAL_RCC_ClockConfig+0x240>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e05a      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004582:	4b30      	ldr	r3, [pc, #192]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	220c      	movs	r2, #12
 8004588:	4013      	ands	r3, r2
 800458a:	d1f0      	bne.n	800456e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800458c:	4b2c      	ldr	r3, [pc, #176]	; (8004640 <HAL_RCC_ClockConfig+0x238>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2201      	movs	r2, #1
 8004592:	4013      	ands	r3, r2
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d211      	bcs.n	80045be <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459a:	4b29      	ldr	r3, [pc, #164]	; (8004640 <HAL_RCC_ClockConfig+0x238>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	4393      	bics	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	4b26      	ldr	r3, [pc, #152]	; (8004640 <HAL_RCC_ClockConfig+0x238>)
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ac:	4b24      	ldr	r3, [pc, #144]	; (8004640 <HAL_RCC_ClockConfig+0x238>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2201      	movs	r2, #1
 80045b2:	4013      	ands	r3, r2
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d001      	beq.n	80045be <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e03c      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2204      	movs	r2, #4
 80045c4:	4013      	ands	r3, r2
 80045c6:	d009      	beq.n	80045dc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a1f      	ldr	r2, [pc, #124]	; (800464c <HAL_RCC_ClockConfig+0x244>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	0019      	movs	r1, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 80045d8:	430a      	orrs	r2, r1
 80045da:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2208      	movs	r2, #8
 80045e2:	4013      	ands	r3, r2
 80045e4:	d00a      	beq.n	80045fc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045e6:	4b17      	ldr	r3, [pc, #92]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_RCC_ClockConfig+0x248>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	0019      	movs	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	00da      	lsls	r2, r3, #3
 80045f6:	4b13      	ldr	r3, [pc, #76]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 80045f8:	430a      	orrs	r2, r1
 80045fa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045fc:	f000 f82e 	bl	800465c <HAL_RCC_GetSysClockFreq>
 8004600:	0001      	movs	r1, r0
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_RCC_ClockConfig+0x23c>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	220f      	movs	r2, #15
 800460a:	4013      	ands	r3, r2
 800460c:	4a11      	ldr	r2, [pc, #68]	; (8004654 <HAL_RCC_ClockConfig+0x24c>)
 800460e:	5cd3      	ldrb	r3, [r2, r3]
 8004610:	000a      	movs	r2, r1
 8004612:	40da      	lsrs	r2, r3
 8004614:	4b10      	ldr	r3, [pc, #64]	; (8004658 <HAL_RCC_ClockConfig+0x250>)
 8004616:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004618:	250b      	movs	r5, #11
 800461a:	197c      	adds	r4, r7, r5
 800461c:	2000      	movs	r0, #0
 800461e:	f005 f8a9 	bl	8009774 <HAL_InitTick>
 8004622:	0003      	movs	r3, r0
 8004624:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004626:	002a      	movs	r2, r5
 8004628:	18bb      	adds	r3, r7, r2
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8004630:	18bb      	adds	r3, r7, r2
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	e000      	b.n	8004638 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	0018      	movs	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	b004      	add	sp, #16
 800463e:	bdb0      	pop	{r4, r5, r7, pc}
 8004640:	40022000 	.word	0x40022000
 8004644:	40021000 	.word	0x40021000
 8004648:	00001388 	.word	0x00001388
 800464c:	fffff8ff 	.word	0xfffff8ff
 8004650:	ffffc7ff 	.word	0xffffc7ff
 8004654:	0800d990 	.word	0x0800d990
 8004658:	20000038 	.word	0x20000038

0800465c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004662:	4b3c      	ldr	r3, [pc, #240]	; (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	220c      	movs	r2, #12
 800466c:	4013      	ands	r3, r2
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d013      	beq.n	800469a <HAL_RCC_GetSysClockFreq+0x3e>
 8004672:	d85c      	bhi.n	800472e <HAL_RCC_GetSysClockFreq+0xd2>
 8004674:	2b04      	cmp	r3, #4
 8004676:	d002      	beq.n	800467e <HAL_RCC_GetSysClockFreq+0x22>
 8004678:	2b08      	cmp	r3, #8
 800467a:	d00b      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0x38>
 800467c:	e057      	b.n	800472e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800467e:	4b35      	ldr	r3, [pc, #212]	; (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2210      	movs	r2, #16
 8004684:	4013      	ands	r3, r2
 8004686:	d002      	beq.n	800468e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004688:	4b33      	ldr	r3, [pc, #204]	; (8004758 <HAL_RCC_GetSysClockFreq+0xfc>)
 800468a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800468c:	e05d      	b.n	800474a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800468e:	4b33      	ldr	r3, [pc, #204]	; (800475c <HAL_RCC_GetSysClockFreq+0x100>)
 8004690:	613b      	str	r3, [r7, #16]
      break;
 8004692:	e05a      	b.n	800474a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004694:	4b32      	ldr	r3, [pc, #200]	; (8004760 <HAL_RCC_GetSysClockFreq+0x104>)
 8004696:	613b      	str	r3, [r7, #16]
      break;
 8004698:	e057      	b.n	800474a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	0c9b      	lsrs	r3, r3, #18
 800469e:	220f      	movs	r2, #15
 80046a0:	4013      	ands	r3, r2
 80046a2:	4a30      	ldr	r2, [pc, #192]	; (8004764 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a4:	5cd3      	ldrb	r3, [r2, r3]
 80046a6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	0d9b      	lsrs	r3, r3, #22
 80046ac:	2203      	movs	r2, #3
 80046ae:	4013      	ands	r3, r2
 80046b0:	3301      	adds	r3, #1
 80046b2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b4:	4b27      	ldr	r3, [pc, #156]	; (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	025b      	lsls	r3, r3, #9
 80046bc:	4013      	ands	r3, r2
 80046be:	d00f      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	000a      	movs	r2, r1
 80046c4:	0152      	lsls	r2, r2, #5
 80046c6:	1a52      	subs	r2, r2, r1
 80046c8:	0193      	lsls	r3, r2, #6
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	185b      	adds	r3, r3, r1
 80046d0:	025b      	lsls	r3, r3, #9
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7fb fd33 	bl	8000140 <__udivsi3>
 80046da:	0003      	movs	r3, r0
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e023      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80046e0:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2210      	movs	r2, #16
 80046e6:	4013      	ands	r3, r2
 80046e8:	d00f      	beq.n	800470a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	000a      	movs	r2, r1
 80046ee:	0152      	lsls	r2, r2, #5
 80046f0:	1a52      	subs	r2, r2, r1
 80046f2:	0193      	lsls	r3, r2, #6
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	185b      	adds	r3, r3, r1
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	0018      	movs	r0, r3
 8004700:	f7fb fd1e 	bl	8000140 <__udivsi3>
 8004704:	0003      	movs	r3, r0
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e00e      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	000a      	movs	r2, r1
 800470e:	0152      	lsls	r2, r2, #5
 8004710:	1a52      	subs	r2, r2, r1
 8004712:	0193      	lsls	r3, r2, #6
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	185b      	adds	r3, r3, r1
 800471a:	029b      	lsls	r3, r3, #10
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	0018      	movs	r0, r3
 8004720:	f7fb fd0e 	bl	8000140 <__udivsi3>
 8004724:	0003      	movs	r3, r0
 8004726:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	613b      	str	r3, [r7, #16]
      break;
 800472c:	e00d      	b.n	800474a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	0b5b      	lsrs	r3, r3, #13
 8004734:	2207      	movs	r2, #7
 8004736:	4013      	ands	r3, r2
 8004738:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	2280      	movs	r2, #128	; 0x80
 8004740:	0212      	lsls	r2, r2, #8
 8004742:	409a      	lsls	r2, r3
 8004744:	0013      	movs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
      break;
 8004748:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800474a:	693b      	ldr	r3, [r7, #16]
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b006      	add	sp, #24
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40021000 	.word	0x40021000
 8004758:	003d0900 	.word	0x003d0900
 800475c:	00f42400 	.word	0x00f42400
 8004760:	007a1200 	.word	0x007a1200
 8004764:	0800d9a8 	.word	0x0800d9a8

08004768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800476c:	4b02      	ldr	r3, [pc, #8]	; (8004778 <HAL_RCC_GetHCLKFreq+0x10>)
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	20000038 	.word	0x20000038

0800477c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004780:	f7ff fff2 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 8004784:	0001      	movs	r1, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	2207      	movs	r2, #7
 800478e:	4013      	ands	r3, r2
 8004790:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004792:	5cd3      	ldrb	r3, [r2, r3]
 8004794:	40d9      	lsrs	r1, r3
 8004796:	000b      	movs	r3, r1
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	40021000 	.word	0x40021000
 80047a4:	0800d9a0 	.word	0x0800d9a0

080047a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047ac:	f7ff ffdc 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 80047b0:	0001      	movs	r1, r0
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	0adb      	lsrs	r3, r3, #11
 80047b8:	2207      	movs	r2, #7
 80047ba:	4013      	ands	r3, r2
 80047bc:	4a04      	ldr	r2, [pc, #16]	; (80047d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047be:	5cd3      	ldrb	r3, [r2, r3]
 80047c0:	40d9      	lsrs	r1, r3
 80047c2:	000b      	movs	r3, r1
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	40021000 	.word	0x40021000
 80047d0:	0800d9a0 	.word	0x0800d9a0

080047d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	220f      	movs	r2, #15
 80047e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047e4:	4b12      	ldr	r3, [pc, #72]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2203      	movs	r2, #3
 80047ea:	401a      	ands	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	22f0      	movs	r2, #240	; 0xf0
 80047f6:	401a      	ands	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	23e0      	movs	r3, #224	; 0xe0
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	401a      	ands	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800480a:	4b09      	ldr	r3, [pc, #36]	; (8004830 <HAL_RCC_GetClockConfig+0x5c>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	08da      	lsrs	r2, r3, #3
 8004810:	23e0      	movs	r3, #224	; 0xe0
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	401a      	ands	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCC_GetClockConfig+0x60>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2201      	movs	r2, #1
 8004820:	401a      	ands	r2, r3
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	601a      	str	r2, [r3, #0]
}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	46bd      	mov	sp, r7
 800482a:	b002      	add	sp, #8
 800482c:	bd80      	pop	{r7, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	40021000 	.word	0x40021000
 8004834:	40022000 	.word	0x40022000

08004838 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2220      	movs	r2, #32
 8004846:	4013      	ands	r3, r2
 8004848:	d100      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x14>
 800484a:	e0c6      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800484c:	2017      	movs	r0, #23
 800484e:	183b      	adds	r3, r7, r0
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004854:	4b91      	ldr	r3, [pc, #580]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	055b      	lsls	r3, r3, #21
 800485c:	4013      	ands	r3, r2
 800485e:	d109      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004860:	4b8e      	ldr	r3, [pc, #568]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004864:	4b8d      	ldr	r3, [pc, #564]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004866:	2180      	movs	r1, #128	; 0x80
 8004868:	0549      	lsls	r1, r1, #21
 800486a:	430a      	orrs	r2, r1
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800486e:	183b      	adds	r3, r7, r0
 8004870:	2201      	movs	r2, #1
 8004872:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004874:	4b8a      	ldr	r3, [pc, #552]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	4013      	ands	r3, r2
 800487e:	d11a      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004880:	4b87      	ldr	r3, [pc, #540]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4b86      	ldr	r3, [pc, #536]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004886:	2180      	movs	r1, #128	; 0x80
 8004888:	0049      	lsls	r1, r1, #1
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488e:	f7fe f8a1 	bl	80029d4 <HAL_GetTick>
 8004892:	0003      	movs	r3, r0
 8004894:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004896:	e008      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004898:	f7fe f89c 	bl	80029d4 <HAL_GetTick>
 800489c:	0002      	movs	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0f3      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048aa:	4b7d      	ldr	r3, [pc, #500]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80048b6:	4b79      	ldr	r3, [pc, #484]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	23c0      	movs	r3, #192	; 0xc0
 80048bc:	039b      	lsls	r3, r3, #14
 80048be:	4013      	ands	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	23c0      	movs	r3, #192	; 0xc0
 80048c8:	039b      	lsls	r3, r3, #14
 80048ca:	4013      	ands	r3, r2
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d013      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	23c0      	movs	r3, #192	; 0xc0
 80048d8:	029b      	lsls	r3, r3, #10
 80048da:	401a      	ands	r2, r3
 80048dc:	23c0      	movs	r3, #192	; 0xc0
 80048de:	029b      	lsls	r3, r3, #10
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d10a      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80048e4:	4b6d      	ldr	r3, [pc, #436]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	029b      	lsls	r3, r3, #10
 80048ec:	401a      	ands	r2, r3
 80048ee:	2380      	movs	r3, #128	; 0x80
 80048f0:	029b      	lsls	r3, r3, #10
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d101      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0cb      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80048fa:	4b68      	ldr	r3, [pc, #416]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048fe:	23c0      	movs	r3, #192	; 0xc0
 8004900:	029b      	lsls	r3, r3, #10
 8004902:	4013      	ands	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d03b      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	23c0      	movs	r3, #192	; 0xc0
 8004912:	029b      	lsls	r3, r3, #10
 8004914:	4013      	ands	r3, r2
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	d033      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2220      	movs	r2, #32
 8004922:	4013      	ands	r3, r2
 8004924:	d02e      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004926:	4b5d      	ldr	r3, [pc, #372]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492a:	4a5e      	ldr	r2, [pc, #376]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800492c:	4013      	ands	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004930:	4b5a      	ldr	r3, [pc, #360]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004934:	4b59      	ldr	r3, [pc, #356]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004936:	2180      	movs	r1, #128	; 0x80
 8004938:	0309      	lsls	r1, r1, #12
 800493a:	430a      	orrs	r2, r1
 800493c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800493e:	4b57      	ldr	r3, [pc, #348]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004942:	4b56      	ldr	r3, [pc, #344]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004944:	4958      	ldr	r1, [pc, #352]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004946:	400a      	ands	r2, r1
 8004948:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800494a:	4b54      	ldr	r3, [pc, #336]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4013      	ands	r3, r2
 8004958:	d014      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495a:	f7fe f83b 	bl	80029d4 <HAL_GetTick>
 800495e:	0003      	movs	r3, r0
 8004960:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004962:	e009      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004964:	f7fe f836 	bl	80029d4 <HAL_GetTick>
 8004968:	0002      	movs	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	4a4f      	ldr	r2, [pc, #316]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d901      	bls.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e08c      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004978:	4b48      	ldr	r3, [pc, #288]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800497a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4013      	ands	r3, r2
 8004982:	d0ef      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	23c0      	movs	r3, #192	; 0xc0
 800498a:	029b      	lsls	r3, r3, #10
 800498c:	401a      	ands	r2, r3
 800498e:	23c0      	movs	r3, #192	; 0xc0
 8004990:	029b      	lsls	r3, r3, #10
 8004992:	429a      	cmp	r2, r3
 8004994:	d10c      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004996:	4b41      	ldr	r3, [pc, #260]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a45      	ldr	r2, [pc, #276]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800499c:	4013      	ands	r3, r2
 800499e:	0019      	movs	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	23c0      	movs	r3, #192	; 0xc0
 80049a6:	039b      	lsls	r3, r3, #14
 80049a8:	401a      	ands	r2, r3
 80049aa:	4b3c      	ldr	r3, [pc, #240]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	4b3a      	ldr	r3, [pc, #232]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049b2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	23c0      	movs	r3, #192	; 0xc0
 80049ba:	029b      	lsls	r3, r3, #10
 80049bc:	401a      	ands	r2, r3
 80049be:	4b37      	ldr	r3, [pc, #220]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049c0:	430a      	orrs	r2, r1
 80049c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049c4:	2317      	movs	r3, #23
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d105      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ce:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	4b32      	ldr	r3, [pc, #200]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049d4:	4937      	ldr	r1, [pc, #220]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80049d6:	400a      	ands	r2, r1
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2201      	movs	r2, #1
 80049e0:	4013      	ands	r3, r2
 80049e2:	d009      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049e4:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e8:	2203      	movs	r2, #3
 80049ea:	4393      	bics	r3, r2
 80049ec:	0019      	movs	r1, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049f4:	430a      	orrs	r2, r1
 80049f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2202      	movs	r2, #2
 80049fe:	4013      	ands	r3, r2
 8004a00:	d009      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a02:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	220c      	movs	r2, #12
 8004a08:	4393      	bics	r3, r2
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a12:	430a      	orrs	r2, r1
 8004a14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a20:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a24:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	0019      	movs	r1, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a30:	430a      	orrs	r2, r1
 8004a32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d009      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a3e:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a42:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	0019      	movs	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d009      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	0019      	movs	r1, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699a      	ldr	r2, [r3, #24]
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d009      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a80:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	0019      	movs	r1, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69da      	ldr	r2, [r3, #28]
 8004a8a:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	0018      	movs	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b006      	add	sp, #24
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	fffcffff 	.word	0xfffcffff
 8004aa8:	fff7ffff 	.word	0xfff7ffff
 8004aac:	00001388 	.word	0x00001388
 8004ab0:	ffcfffff 	.word	0xffcfffff
 8004ab4:	efffffff 	.word	0xefffffff
 8004ab8:	fffff3ff 	.word	0xfffff3ff
 8004abc:	ffffcfff 	.word	0xffffcfff
 8004ac0:	fff3ffff 	.word	0xfff3ffff

08004ac4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e08e      	b.n	8004bf4 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2221      	movs	r2, #33	; 0x21
 8004ada:	5c9b      	ldrb	r3, [r3, r2]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d107      	bne.n	8004af2 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	0018      	movs	r0, r3
 8004aee:	f004 fb95 	bl	800921c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2221      	movs	r2, #33	; 0x21
 8004af6:	2102      	movs	r1, #2
 8004af8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	22ca      	movs	r2, #202	; 0xca
 8004b00:	625a      	str	r2, [r3, #36]	; 0x24
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2253      	movs	r2, #83	; 0x53
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f000 faba 	bl	8005086 <RTC_EnterInitMode>
 8004b12:	1e03      	subs	r3, r0, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	22ff      	movs	r2, #255	; 0xff
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2221      	movs	r2, #33	; 0x21
 8004b22:	2104      	movs	r1, #4
 8004b24:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e064      	b.n	8004bf4 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4931      	ldr	r1, [pc, #196]	; (8004bfc <HAL_RTC_Init+0x138>)
 8004b36:	400a      	ands	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6899      	ldr	r1, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	68d2      	ldr	r2, [r2, #12]
 8004b60:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6919      	ldr	r1, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	041a      	lsls	r2, r3, #16
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	438a      	bics	r2, r1
 8004b84:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2103      	movs	r1, #3
 8004b92:	438a      	bics	r2, r1
 8004b94:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d113      	bne.n	8004be2 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 fa3b 	bl	8005038 <HAL_RTC_WaitForSynchro>
 8004bc2:	1e03      	subs	r3, r0, #0
 8004bc4:	d00d      	beq.n	8004be2 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	22ff      	movs	r2, #255	; 0xff
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2221      	movs	r2, #33	; 0x21
 8004bd2:	2104      	movs	r1, #4
 8004bd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	2100      	movs	r1, #0
 8004bdc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e008      	b.n	8004bf4 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	22ff      	movs	r2, #255	; 0xff
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2221      	movs	r2, #33	; 0x21
 8004bee:	2101      	movs	r1, #1
 8004bf0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
  }
}
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b002      	add	sp, #8
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	ff8fffbf 	.word	0xff8fffbf

08004c00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	5c9b      	ldrb	r3, [r3, r2]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_RTC_SetTime+0x1a>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0ad      	b.n	8004d76 <HAL_RTC_SetTime+0x176>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	2101      	movs	r1, #1
 8004c20:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2221      	movs	r2, #33	; 0x21
 8004c26:	2102      	movs	r1, #2
 8004c28:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d125      	bne.n	8004c7c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2240      	movs	r2, #64	; 0x40
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d102      	bne.n	8004c42 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	0018      	movs	r0, r3
 8004c48:	f000 fa47 	bl	80050da <RTC_ByteToBcd2>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	785b      	ldrb	r3, [r3, #1]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f000 fa40 	bl	80050da <RTC_ByteToBcd2>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c5e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	789b      	ldrb	r3, [r3, #2]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f000 fa38 	bl	80050da <RTC_ByteToBcd2>
 8004c6a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c6c:	0022      	movs	r2, r4
 8004c6e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	78db      	ldrb	r3, [r3, #3]
 8004c74:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	e017      	b.n	8004cac <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2240      	movs	r2, #64	; 0x40
 8004c84:	4013      	ands	r3, r2
 8004c86:	d102      	bne.n	8004c8e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c9a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004ca0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	78db      	ldrb	r3, [r3, #3]
 8004ca6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	22ca      	movs	r2, #202	; 0xca
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2253      	movs	r2, #83	; 0x53
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f000 f9e1 	bl	8005086 <RTC_EnterInitMode>
 8004cc4:	1e03      	subs	r3, r0, #0
 8004cc6:	d00d      	beq.n	8004ce4 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	22ff      	movs	r2, #255	; 0xff
 8004cce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2221      	movs	r2, #33	; 0x21
 8004cd4:	2104      	movs	r1, #4
 8004cd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	2100      	movs	r1, #0
 8004cde:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e048      	b.n	8004d76 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4925      	ldr	r1, [pc, #148]	; (8004d80 <HAL_RTC_SetTime+0x180>)
 8004cec:	400a      	ands	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4922      	ldr	r1, [pc, #136]	; (8004d84 <HAL_RTC_SetTime+0x184>)
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6899      	ldr	r1, [r3, #8]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	438a      	bics	r2, r1
 8004d26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	4013      	ands	r3, r2
 8004d32:	d113      	bne.n	8004d5c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f000 f97e 	bl	8005038 <HAL_RTC_WaitForSynchro>
 8004d3c:	1e03      	subs	r3, r0, #0
 8004d3e:	d00d      	beq.n	8004d5c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	22ff      	movs	r2, #255	; 0xff
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2221      	movs	r2, #33	; 0x21
 8004d4c:	2104      	movs	r1, #4
 8004d4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	2100      	movs	r1, #0
 8004d56:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e00c      	b.n	8004d76 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2221      	movs	r2, #33	; 0x21
 8004d68:	2101      	movs	r1, #1
 8004d6a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	2100      	movs	r1, #0
 8004d72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d74:	2300      	movs	r3, #0
  }
}
 8004d76:	0018      	movs	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b007      	add	sp, #28
 8004d7c:	bd90      	pop	{r4, r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	007f7f7f 	.word	0x007f7f7f
 8004d84:	fffbffff 	.word	0xfffbffff

08004d88 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	045b      	lsls	r3, r3, #17
 8004da6:	0c5a      	lsrs	r2, r3, #17
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a22      	ldr	r2, [pc, #136]	; (8004e3c <HAL_RTC_GetTime+0xb4>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	0c1b      	lsrs	r3, r3, #16
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	223f      	movs	r2, #63	; 0x3f
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	227f      	movs	r2, #127	; 0x7f
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	227f      	movs	r2, #127	; 0x7f
 8004dde:	4013      	ands	r3, r2
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2240      	movs	r2, #64	; 0x40
 8004dee:	4013      	ands	r3, r2
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11a      	bne.n	8004e32 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	0018      	movs	r0, r3
 8004e02:	f000 f992 	bl	800512a <RTC_Bcd2ToByte>
 8004e06:	0003      	movs	r3, r0
 8004e08:	001a      	movs	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 f989 	bl	800512a <RTC_Bcd2ToByte>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	001a      	movs	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	789b      	ldrb	r3, [r3, #2]
 8004e24:	0018      	movs	r0, r3
 8004e26:	f000 f980 	bl	800512a <RTC_Bcd2ToByte>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b006      	add	sp, #24
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	007f7f7f 	.word	0x007f7f7f

08004e40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	5c9b      	ldrb	r3, [r3, r2]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_RTC_SetDate+0x1a>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e099      	b.n	8004f8e <HAL_RTC_SetDate+0x14e>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	2101      	movs	r1, #1
 8004e60:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2221      	movs	r2, #33	; 0x21
 8004e66:	2102      	movs	r1, #2
 8004e68:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10e      	bne.n	8004e8e <HAL_RTC_SetDate+0x4e>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	001a      	movs	r2, r3
 8004e76:	2310      	movs	r3, #16
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d008      	beq.n	8004e8e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	2210      	movs	r2, #16
 8004e82:	4393      	bics	r3, r2
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	330a      	adds	r3, #10
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d11c      	bne.n	8004ece <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	78db      	ldrb	r3, [r3, #3]
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f000 f91e 	bl	80050da <RTC_ByteToBcd2>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f000 f917 	bl	80050da <RTC_ByteToBcd2>
 8004eac:	0003      	movs	r3, r0
 8004eae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004eb0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	789b      	ldrb	r3, [r3, #2]
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f000 f90f 	bl	80050da <RTC_ByteToBcd2>
 8004ebc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ebe:	0022      	movs	r2, r4
 8004ec0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e00e      	b.n	8004eec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	78db      	ldrb	r3, [r3, #3]
 8004ed2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	785b      	ldrb	r3, [r3, #1]
 8004ed8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004eda:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ee0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	22ca      	movs	r2, #202	; 0xca
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2253      	movs	r2, #83	; 0x53
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	0018      	movs	r0, r3
 8004f00:	f000 f8c1 	bl	8005086 <RTC_EnterInitMode>
 8004f04:	1e03      	subs	r3, r0, #0
 8004f06:	d00d      	beq.n	8004f24 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	22ff      	movs	r2, #255	; 0xff
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2221      	movs	r2, #33	; 0x21
 8004f14:	2104      	movs	r1, #4
 8004f16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e034      	b.n	8004f8e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	491b      	ldr	r1, [pc, #108]	; (8004f98 <HAL_RTC_SetDate+0x158>)
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2180      	movs	r1, #128	; 0x80
 8004f3c:	438a      	bics	r2, r1
 8004f3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2220      	movs	r2, #32
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d113      	bne.n	8004f74 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f000 f872 	bl	8005038 <HAL_RTC_WaitForSynchro>
 8004f54:	1e03      	subs	r3, r0, #0
 8004f56:	d00d      	beq.n	8004f74 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	22ff      	movs	r2, #255	; 0xff
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2221      	movs	r2, #33	; 0x21
 8004f64:	2104      	movs	r1, #4
 8004f66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e00c      	b.n	8004f8e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	22ff      	movs	r2, #255	; 0xff
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2221      	movs	r2, #33	; 0x21
 8004f80:	2101      	movs	r1, #1
 8004f82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	2100      	movs	r1, #0
 8004f8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
  }
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b007      	add	sp, #28
 8004f94:	bd90      	pop	{r4, r7, pc}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	00ffff3f 	.word	0x00ffff3f

08004f9c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4a21      	ldr	r2, [pc, #132]	; (8005034 <HAL_RTC_GetDate+0x98>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	0c1b      	lsrs	r3, r3, #16
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	0a1b      	lsrs	r3, r3, #8
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	221f      	movs	r2, #31
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	223f      	movs	r2, #63	; 0x3f
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	0b5b      	lsrs	r3, r3, #13
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2207      	movs	r2, #7
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d11a      	bne.n	8005028 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	78db      	ldrb	r3, [r3, #3]
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f000 f897 	bl	800512a <RTC_Bcd2ToByte>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	001a      	movs	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	0018      	movs	r0, r3
 800500a:	f000 f88e 	bl	800512a <RTC_Bcd2ToByte>
 800500e:	0003      	movs	r3, r0
 8005010:	001a      	movs	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	789b      	ldrb	r3, [r3, #2]
 800501a:	0018      	movs	r0, r3
 800501c:	f000 f885 	bl	800512a <RTC_Bcd2ToByte>
 8005020:	0003      	movs	r3, r0
 8005022:	001a      	movs	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	0018      	movs	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	b006      	add	sp, #24
 8005030:	bd80      	pop	{r7, pc}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	00ffff3f 	.word	0x00ffff3f

08005038 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	21a0      	movs	r1, #160	; 0xa0
 800504c:	438a      	bics	r2, r1
 800504e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005050:	f7fd fcc0 	bl	80029d4 <HAL_GetTick>
 8005054:	0003      	movs	r3, r0
 8005056:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005058:	e00a      	b.n	8005070 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800505a:	f7fd fcbb 	bl	80029d4 <HAL_GetTick>
 800505e:	0002      	movs	r2, r0
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1ad2      	subs	r2, r2, r3
 8005064:	23fa      	movs	r3, #250	; 0xfa
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	429a      	cmp	r2, r3
 800506a:	d901      	bls.n	8005070 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e006      	b.n	800507e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	4013      	ands	r3, r2
 800507a:	d0ee      	beq.n	800505a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	0018      	movs	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	b004      	add	sp, #16
 8005084:	bd80      	pop	{r7, pc}

08005086 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2240      	movs	r2, #64	; 0x40
 8005096:	4013      	ands	r3, r2
 8005098:	d11a      	bne.n	80050d0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2201      	movs	r2, #1
 80050a0:	4252      	negs	r2, r2
 80050a2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80050a4:	f7fd fc96 	bl	80029d4 <HAL_GetTick>
 80050a8:	0003      	movs	r3, r0
 80050aa:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80050ac:	e00a      	b.n	80050c4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80050ae:	f7fd fc91 	bl	80029d4 <HAL_GetTick>
 80050b2:	0002      	movs	r2, r0
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1ad2      	subs	r2, r2, r3
 80050b8:	23fa      	movs	r3, #250	; 0xfa
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	429a      	cmp	r2, r3
 80050be:	d901      	bls.n	80050c4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e006      	b.n	80050d2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2240      	movs	r2, #64	; 0x40
 80050cc:	4013      	ands	r3, r2
 80050ce:	d0ee      	beq.n	80050ae <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	0018      	movs	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b004      	add	sp, #16
 80050d8:	bd80      	pop	{r7, pc}

080050da <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	0002      	movs	r2, r0
 80050e2:	1dfb      	adds	r3, r7, #7
 80050e4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80050ea:	230b      	movs	r3, #11
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	1dfa      	adds	r2, r7, #7
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80050f4:	e008      	b.n	8005108 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3301      	adds	r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80050fc:	220b      	movs	r2, #11
 80050fe:	18bb      	adds	r3, r7, r2
 8005100:	18ba      	adds	r2, r7, r2
 8005102:	7812      	ldrb	r2, [r2, #0]
 8005104:	3a0a      	subs	r2, #10
 8005106:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8005108:	210b      	movs	r1, #11
 800510a:	187b      	adds	r3, r7, r1
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b09      	cmp	r3, #9
 8005110:	d8f1      	bhi.n	80050f6 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	b2da      	uxtb	r2, r3
 800511a:	187b      	adds	r3, r7, r1
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	4313      	orrs	r3, r2
 8005120:	b2db      	uxtb	r3, r3
}
 8005122:	0018      	movs	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	b004      	add	sp, #16
 8005128:	bd80      	pop	{r7, pc}

0800512a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	0002      	movs	r2, r0
 8005132:	1dfb      	adds	r3, r7, #7
 8005134:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005136:	1dfb      	adds	r3, r7, #7
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	b2db      	uxtb	r3, r3
 800513e:	001a      	movs	r2, r3
 8005140:	0013      	movs	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	189b      	adds	r3, r3, r2
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	1dfb      	adds	r3, r7, #7
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	210f      	movs	r1, #15
 8005154:	400b      	ands	r3, r1
 8005156:	b2db      	uxtb	r3, r3
 8005158:	18d3      	adds	r3, r2, r3
 800515a:	b2db      	uxtb	r3, r3
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	b004      	add	sp, #16
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	5c9b      	ldrb	r3, [r3, r2]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800517a:	2302      	movs	r3, #2
 800517c:	e0ad      	b.n	80052da <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	2101      	movs	r1, #1
 8005184:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2221      	movs	r2, #33	; 0x21
 800518a:	2102      	movs	r1, #2
 800518c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	22ca      	movs	r2, #202	; 0xca
 8005194:	625a      	str	r2, [r3, #36]	; 0x24
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2253      	movs	r2, #83	; 0x53
 800519c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4013      	ands	r3, r2
 80051aa:	d021      	beq.n	80051f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 80051ac:	f7fd fc12 	bl	80029d4 <HAL_GetTick>
 80051b0:	0003      	movs	r3, r0
 80051b2:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80051b4:	e016      	b.n	80051e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051b6:	f7fd fc0d 	bl	80029d4 <HAL_GetTick>
 80051ba:	0002      	movs	r2, r0
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	23fa      	movs	r3, #250	; 0xfa
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d90d      	bls.n	80051e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	22ff      	movs	r2, #255	; 0xff
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2221      	movs	r2, #33	; 0x21
 80051d4:	2103      	movs	r1, #3
 80051d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	2100      	movs	r1, #0
 80051de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e07a      	b.n	80052da <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2204      	movs	r2, #4
 80051ec:	4013      	ands	r3, r2
 80051ee:	d1e2      	bne.n	80051b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	493a      	ldr	r1, [pc, #232]	; (80052e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80051fc:	400a      	ands	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	22ff      	movs	r2, #255	; 0xff
 8005208:	401a      	ands	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4936      	ldr	r1, [pc, #216]	; (80052e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8005210:	430a      	orrs	r2, r1
 8005212:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005214:	f7fd fbde 	bl	80029d4 <HAL_GetTick>
 8005218:	0003      	movs	r3, r0
 800521a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800521c:	e016      	b.n	800524c <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800521e:	f7fd fbd9 	bl	80029d4 <HAL_GetTick>
 8005222:	0002      	movs	r2, r0
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1ad2      	subs	r2, r2, r3
 8005228:	23fa      	movs	r3, #250	; 0xfa
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	429a      	cmp	r2, r3
 800522e:	d90d      	bls.n	800524c <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	22ff      	movs	r2, #255	; 0xff
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2221      	movs	r2, #33	; 0x21
 800523c:	2103      	movs	r1, #3
 800523e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	2100      	movs	r1, #0
 8005246:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e046      	b.n	80052da <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2204      	movs	r2, #4
 8005254:	4013      	ands	r3, r2
 8005256:	d0e2      	beq.n	800521e <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2107      	movs	r1, #7
 800526c:	438a      	bics	r2, r1
 800526e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6899      	ldr	r1, [r3, #8]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	430a      	orrs	r2, r1
 800527e:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005280:	4b1a      	ldr	r3, [pc, #104]	; (80052ec <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4b19      	ldr	r3, [pc, #100]	; (80052ec <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	0349      	lsls	r1, r1, #13
 800528a:	430a      	orrs	r2, r1
 800528c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	4b16      	ldr	r3, [pc, #88]	; (80052ec <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8005294:	2180      	movs	r1, #128	; 0x80
 8005296:	0349      	lsls	r1, r1, #13
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2180      	movs	r1, #128	; 0x80
 80052a8:	01c9      	lsls	r1, r1, #7
 80052aa:	430a      	orrs	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2180      	movs	r1, #128	; 0x80
 80052ba:	00c9      	lsls	r1, r1, #3
 80052bc:	430a      	orrs	r2, r1
 80052be:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	22ff      	movs	r2, #255	; 0xff
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2221      	movs	r2, #33	; 0x21
 80052cc:	2101      	movs	r1, #1
 80052ce:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	2100      	movs	r1, #0
 80052d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	0018      	movs	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	b006      	add	sp, #24
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	fffffbff 	.word	0xfffffbff
 80052e8:	fffffb7f 	.word	0xfffffb7f
 80052ec:	40010400 	.word	0x40010400

080052f0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	5c9b      	ldrb	r3, [r3, r2]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8005302:	2302      	movs	r3, #2
 8005304:	e04e      	b.n	80053a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	2101      	movs	r1, #1
 800530c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2221      	movs	r2, #33	; 0x21
 8005312:	2102      	movs	r1, #2
 8005314:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	22ca      	movs	r2, #202	; 0xca
 800531c:	625a      	str	r2, [r3, #36]	; 0x24
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2253      	movs	r2, #83	; 0x53
 8005324:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	491e      	ldr	r1, [pc, #120]	; (80053ac <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8005332:	400a      	ands	r2, r1
 8005334:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	491b      	ldr	r1, [pc, #108]	; (80053b0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8005342:	400a      	ands	r2, r1
 8005344:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005346:	f7fd fb45 	bl	80029d4 <HAL_GetTick>
 800534a:	0003      	movs	r3, r0
 800534c:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800534e:	e016      	b.n	800537e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005350:	f7fd fb40 	bl	80029d4 <HAL_GetTick>
 8005354:	0002      	movs	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad2      	subs	r2, r2, r3
 800535a:	23fa      	movs	r3, #250	; 0xfa
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	429a      	cmp	r2, r3
 8005360:	d90d      	bls.n	800537e <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	22ff      	movs	r2, #255	; 0xff
 8005368:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2221      	movs	r2, #33	; 0x21
 800536e:	2103      	movs	r1, #3
 8005370:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	2100      	movs	r1, #0
 8005378:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e012      	b.n	80053a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2204      	movs	r2, #4
 8005386:	4013      	ands	r3, r2
 8005388:	d0e2      	beq.n	8005350 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	22ff      	movs	r2, #255	; 0xff
 8005390:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2221      	movs	r2, #33	; 0x21
 8005396:	2101      	movs	r1, #1
 8005398:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	2100      	movs	r1, #0
 80053a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	0018      	movs	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b004      	add	sp, #16
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	fffffbff 	.word	0xfffffbff
 80053b0:	ffffbfff 	.word	0xffffbfff

080053b4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	4013      	ands	r3, r2
 80053c8:	d00d      	beq.n	80053e6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f002 f945 	bl	800765c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	22ff      	movs	r2, #255	; 0xff
 80053da:	401a      	ands	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4907      	ldr	r1, [pc, #28]	; (8005400 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 80053e2:	430a      	orrs	r2, r1
 80053e4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80053e6:	4b07      	ldr	r3, [pc, #28]	; (8005404 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 80053e8:	2280      	movs	r2, #128	; 0x80
 80053ea:	0352      	lsls	r2, r2, #13
 80053ec:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2221      	movs	r2, #33	; 0x21
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]
}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b002      	add	sp, #8
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	fffffb7f 	.word	0xfffffb7f
 8005404:	40010400 	.word	0x40010400

08005408 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e059      	b.n	80054ce <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2251      	movs	r2, #81	; 0x51
 8005424:	5c9b      	ldrb	r3, [r3, r2]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d107      	bne.n	800543c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2250      	movs	r2, #80	; 0x50
 8005430:	2100      	movs	r1, #0
 8005432:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	0018      	movs	r0, r3
 8005438:	f003 ff10 	bl	800925c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2251      	movs	r2, #81	; 0x51
 8005440:	2102      	movs	r1, #2
 8005442:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2140      	movs	r1, #64	; 0x40
 8005450:	438a      	bics	r2, r1
 8005452:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6999      	ldr	r1, [r3, #24]
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	400b      	ands	r3, r1
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	431a      	orrs	r2, r3
 8005488:	0011      	movs	r1, r2
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	0c1b      	lsrs	r3, r3, #16
 800549c:	2204      	movs	r2, #4
 800549e:	4013      	ands	r3, r2
 80054a0:	0019      	movs	r1, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4907      	ldr	r1, [pc, #28]	; (80054d8 <HAL_SPI_Init+0xd0>)
 80054ba:	400a      	ands	r2, r1
 80054bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2251      	movs	r2, #81	; 0x51
 80054c8:	2101      	movs	r1, #1
 80054ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	0018      	movs	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b002      	add	sp, #8
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	fffff7ff 	.word	0xfffff7ff

080054dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08c      	sub	sp, #48	; 0x30
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	001a      	movs	r2, r3
 80054ea:	1cbb      	adds	r3, r7, #2
 80054ec:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054ee:	2301      	movs	r3, #1
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054f2:	232b      	movs	r3, #43	; 0x2b
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2250      	movs	r2, #80	; 0x50
 80054fe:	5c9b      	ldrb	r3, [r3, r2]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_SPI_TransmitReceive+0x2c>
 8005504:	2302      	movs	r3, #2
 8005506:	e1a0      	b.n	800584a <HAL_SPI_TransmitReceive+0x36e>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2250      	movs	r2, #80	; 0x50
 800550c:	2101      	movs	r1, #1
 800550e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005510:	f7fd fa60 	bl	80029d4 <HAL_GetTick>
 8005514:	0003      	movs	r3, r0
 8005516:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005518:	2023      	movs	r0, #35	; 0x23
 800551a:	183b      	adds	r3, r7, r0
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	2151      	movs	r1, #81	; 0x51
 8005520:	5c52      	ldrb	r2, [r2, r1]
 8005522:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800552a:	231a      	movs	r3, #26
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	1cba      	adds	r2, r7, #2
 8005530:	8812      	ldrh	r2, [r2, #0]
 8005532:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005534:	183b      	adds	r3, r7, r0
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d011      	beq.n	8005560 <HAL_SPI_TransmitReceive+0x84>
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	2382      	movs	r3, #130	; 0x82
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	429a      	cmp	r2, r3
 8005544:	d107      	bne.n	8005556 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d103      	bne.n	8005556 <HAL_SPI_TransmitReceive+0x7a>
 800554e:	183b      	adds	r3, r7, r0
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b04      	cmp	r3, #4
 8005554:	d004      	beq.n	8005560 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005556:	232b      	movs	r3, #43	; 0x2b
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	2202      	movs	r2, #2
 800555c:	701a      	strb	r2, [r3, #0]
    goto error;
 800555e:	e169      	b.n	8005834 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d006      	beq.n	8005574 <HAL_SPI_TransmitReceive+0x98>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <HAL_SPI_TransmitReceive+0x98>
 800556c:	1cbb      	adds	r3, r7, #2
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005574:	232b      	movs	r3, #43	; 0x2b
 8005576:	18fb      	adds	r3, r7, r3
 8005578:	2201      	movs	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]
    goto error;
 800557c:	e15a      	b.n	8005834 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2251      	movs	r2, #81	; 0x51
 8005582:	5c9b      	ldrb	r3, [r3, r2]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b04      	cmp	r3, #4
 8005588:	d003      	beq.n	8005592 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2251      	movs	r2, #81	; 0x51
 800558e:	2105      	movs	r1, #5
 8005590:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1cba      	adds	r2, r7, #2
 80055a2:	8812      	ldrh	r2, [r2, #0]
 80055a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	1cba      	adds	r2, r7, #2
 80055aa:	8812      	ldrh	r2, [r2, #0]
 80055ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	1cba      	adds	r2, r7, #2
 80055b8:	8812      	ldrh	r2, [r2, #0]
 80055ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1cba      	adds	r2, r7, #2
 80055c0:	8812      	ldrh	r2, [r2, #0]
 80055c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2240      	movs	r2, #64	; 0x40
 80055d8:	4013      	ands	r3, r2
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d007      	beq.n	80055ee <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2140      	movs	r1, #64	; 0x40
 80055ea:	430a      	orrs	r2, r1
 80055ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d000      	beq.n	80055fc <HAL_SPI_TransmitReceive+0x120>
 80055fa:	e07a      	b.n	80056f2 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d004      	beq.n	800560e <HAL_SPI_TransmitReceive+0x132>
 8005604:	231a      	movs	r3, #26
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d166      	bne.n	80056dc <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	881a      	ldrh	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	1c9a      	adds	r2, r3, #2
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005632:	e053      	b.n	80056dc <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2202      	movs	r2, #2
 800563c:	4013      	ands	r3, r2
 800563e:	2b02      	cmp	r3, #2
 8005640:	d11b      	bne.n	800567a <HAL_SPI_TransmitReceive+0x19e>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d016      	beq.n	800567a <HAL_SPI_TransmitReceive+0x19e>
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	2b01      	cmp	r3, #1
 8005650:	d113      	bne.n	800567a <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	881a      	ldrh	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	1c9a      	adds	r2, r3, #2
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2201      	movs	r2, #1
 8005682:	4013      	ands	r3, r2
 8005684:	2b01      	cmp	r3, #1
 8005686:	d119      	bne.n	80056bc <HAL_SPI_TransmitReceive+0x1e0>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d014      	beq.n	80056bc <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	b292      	uxth	r2, r2
 800569e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	1c9a      	adds	r2, r3, #2
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056b8:	2301      	movs	r3, #1
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056bc:	f7fd f98a 	bl	80029d4 <HAL_GetTick>
 80056c0:	0002      	movs	r2, r0
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d807      	bhi.n	80056dc <HAL_SPI_TransmitReceive+0x200>
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	3301      	adds	r3, #1
 80056d0:	d004      	beq.n	80056dc <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80056d2:	232b      	movs	r3, #43	; 0x2b
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	2203      	movs	r2, #3
 80056d8:	701a      	strb	r2, [r3, #0]
        goto error;
 80056da:	e0ab      	b.n	8005834 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1a6      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x158>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1a1      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x158>
 80056f0:	e07f      	b.n	80057f2 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_SPI_TransmitReceive+0x22a>
 80056fa:	231a      	movs	r3, #26
 80056fc:	18fb      	adds	r3, r7, r3
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d000      	beq.n	8005706 <HAL_SPI_TransmitReceive+0x22a>
 8005704:	e06b      	b.n	80057de <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	7812      	ldrb	r2, [r2, #0]
 8005712:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800572c:	e057      	b.n	80057de <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2202      	movs	r2, #2
 8005736:	4013      	ands	r3, r2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d11c      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x29a>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d017      	beq.n	8005776 <HAL_SPI_TransmitReceive+0x29a>
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d114      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	7812      	ldrb	r2, [r2, #0]
 8005758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2201      	movs	r2, #1
 800577e:	4013      	ands	r3, r2
 8005780:	2b01      	cmp	r3, #1
 8005782:	d119      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x2dc>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d014      	beq.n	80057b8 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057b4:	2301      	movs	r3, #1
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057b8:	f7fd f90c 	bl	80029d4 <HAL_GetTick>
 80057bc:	0002      	movs	r2, r0
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d802      	bhi.n	80057ce <HAL_SPI_TransmitReceive+0x2f2>
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	3301      	adds	r3, #1
 80057cc:	d102      	bne.n	80057d4 <HAL_SPI_TransmitReceive+0x2f8>
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80057d4:	232b      	movs	r3, #43	; 0x2b
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	2203      	movs	r2, #3
 80057da:	701a      	strb	r2, [r3, #0]
        goto error;
 80057dc:	e02a      	b.n	8005834 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1a2      	bne.n	800572e <HAL_SPI_TransmitReceive+0x252>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d19d      	bne.n	800572e <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	0018      	movs	r0, r3
 80057fa:	f000 f89b 	bl	8005934 <SPI_EndRxTxTransaction>
 80057fe:	1e03      	subs	r3, r0, #0
 8005800:	d007      	beq.n	8005812 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8005802:	232b      	movs	r3, #43	; 0x2b
 8005804:	18fb      	adds	r3, r7, r3
 8005806:	2201      	movs	r2, #1
 8005808:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005810:	e010      	b.n	8005834 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	e000      	b.n	8005834 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8005832:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2251      	movs	r2, #81	; 0x51
 8005838:	2101      	movs	r1, #1
 800583a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2250      	movs	r2, #80	; 0x50
 8005840:	2100      	movs	r1, #0
 8005842:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005844:	232b      	movs	r3, #43	; 0x2b
 8005846:	18fb      	adds	r3, r7, r3
 8005848:	781b      	ldrb	r3, [r3, #0]
}
 800584a:	0018      	movs	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	b00c      	add	sp, #48	; 0x30
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	1dfb      	adds	r3, r7, #7
 8005862:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005864:	e050      	b.n	8005908 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	d04d      	beq.n	8005908 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800586c:	f7fd f8b2 	bl	80029d4 <HAL_GetTick>
 8005870:	0002      	movs	r2, r0
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d902      	bls.n	8005882 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d142      	bne.n	8005908 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	21e0      	movs	r1, #224	; 0xe0
 800588e:	438a      	bics	r2, r1
 8005890:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	2382      	movs	r3, #130	; 0x82
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	429a      	cmp	r2, r3
 800589c:	d113      	bne.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0x72>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	2380      	movs	r3, #128	; 0x80
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d005      	beq.n	80058b6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d107      	bne.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2140      	movs	r1, #64	; 0x40
 80058c2:	438a      	bics	r2, r1
 80058c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d110      	bne.n	80058f4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4914      	ldr	r1, [pc, #80]	; (8005930 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80058de:	400a      	ands	r2, r1
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2180      	movs	r1, #128	; 0x80
 80058ee:	0189      	lsls	r1, r1, #6
 80058f0:	430a      	orrs	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2251      	movs	r2, #81	; 0x51
 80058f8:	2101      	movs	r1, #1
 80058fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2250      	movs	r2, #80	; 0x50
 8005900:	2100      	movs	r1, #0
 8005902:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e00f      	b.n	8005928 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	4013      	ands	r3, r2
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	425a      	negs	r2, r3
 8005918:	4153      	adcs	r3, r2
 800591a:	b2db      	uxtb	r3, r3
 800591c:	001a      	movs	r2, r3
 800591e:	1dfb      	adds	r3, r7, #7
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d19f      	bne.n	8005866 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	0018      	movs	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	b004      	add	sp, #16
 800592e:	bd80      	pop	{r7, pc}
 8005930:	ffffdfff 	.word	0xffffdfff

08005934 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	2382      	movs	r3, #130	; 0x82
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	429a      	cmp	r2, r3
 800594a:	d112      	bne.n	8005972 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	0013      	movs	r3, r2
 8005956:	2200      	movs	r2, #0
 8005958:	2180      	movs	r1, #128	; 0x80
 800595a:	f7ff ff7b 	bl	8005854 <SPI_WaitFlagStateUntilTimeout>
 800595e:	1e03      	subs	r3, r0, #0
 8005960:	d020      	beq.n	80059a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005966:	2220      	movs	r2, #32
 8005968:	431a      	orrs	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e019      	b.n	80059a6 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2251      	movs	r2, #81	; 0x51
 8005976:	5c9b      	ldrb	r3, [r3, r2]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b05      	cmp	r3, #5
 800597c:	d112      	bne.n	80059a4 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	0013      	movs	r3, r2
 8005988:	2200      	movs	r2, #0
 800598a:	2101      	movs	r1, #1
 800598c:	f7ff ff62 	bl	8005854 <SPI_WaitFlagStateUntilTimeout>
 8005990:	1e03      	subs	r3, r0, #0
 8005992:	d007      	beq.n	80059a4 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	2220      	movs	r2, #32
 800599a:	431a      	orrs	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e000      	b.n	80059a6 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	0018      	movs	r0, r3
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b004      	add	sp, #16
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e01e      	b.n	80059fe <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2239      	movs	r2, #57	; 0x39
 80059c4:	5c9b      	ldrb	r3, [r3, r2]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d107      	bne.n	80059dc <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2238      	movs	r2, #56	; 0x38
 80059d0:	2100      	movs	r1, #0
 80059d2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	0018      	movs	r0, r3
 80059d8:	f003 fc86 	bl	80092e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2239      	movs	r2, #57	; 0x39
 80059e0:	2102      	movs	r1, #2
 80059e2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3304      	adds	r3, #4
 80059ec:	0019      	movs	r1, r3
 80059ee:	0010      	movs	r0, r2
 80059f0:	f000 f934 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2239      	movs	r2, #57	; 0x39
 80059f8:	2101      	movs	r1, #1
 80059fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	0018      	movs	r0, r3
 8005a00:	46bd      	mov	sp, r7
 8005a02:	b002      	add	sp, #8
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2101      	movs	r1, #1
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2207      	movs	r2, #7
 8005a26:	4013      	ands	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b06      	cmp	r3, #6
 8005a2e:	d007      	beq.n	8005a40 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	0018      	movs	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b004      	add	sp, #16
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d124      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	2202      	movs	r2, #2
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d11d      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2203      	movs	r2, #3
 8005a74:	4252      	negs	r2, r2
 8005a76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	2203      	movs	r2, #3
 8005a86:	4013      	ands	r3, r2
 8005a88:	d004      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f000 f8cc 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 8005a92:	e007      	b.n	8005aa4 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	0018      	movs	r0, r3
 8005a98:	f000 f8bf 	bl	8005c1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f000 f8cb 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d125      	bne.n	8005b04 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d11e      	bne.n	8005b04 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2205      	movs	r2, #5
 8005acc:	4252      	negs	r2, r2
 8005ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	23c0      	movs	r3, #192	; 0xc0
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d004      	beq.n	8005aee <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 f89f 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 8005aec:	e007      	b.n	8005afe <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f000 f892 	bl	8005c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	0018      	movs	r0, r3
 8005afa:	f000 f89e 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2208      	movs	r2, #8
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d124      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d11d      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2209      	movs	r2, #9
 8005b26:	4252      	negs	r2, r2
 8005b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2203      	movs	r2, #3
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d004      	beq.n	8005b46 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 f873 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 8005b44:	e007      	b.n	8005b56 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f000 f866 	bl	8005c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f000 f872 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	2210      	movs	r2, #16
 8005b64:	4013      	ands	r3, r2
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d125      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2210      	movs	r2, #16
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b10      	cmp	r3, #16
 8005b76:	d11e      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2211      	movs	r2, #17
 8005b7e:	4252      	negs	r2, r2
 8005b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2208      	movs	r2, #8
 8005b86:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69da      	ldr	r2, [r3, #28]
 8005b8e:	23c0      	movs	r3, #192	; 0xc0
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4013      	ands	r3, r2
 8005b94:	d004      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 f846 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 8005b9e:	e007      	b.n	8005bb0 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f000 f839 	bl	8005c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	0018      	movs	r0, r3
 8005bac:	f000 f845 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d10f      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	4013      	ands	r3, r2
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d108      	bne.n	8005be4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	4252      	negs	r2, r2
 8005bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	0018      	movs	r0, r3
 8005be0:	f003 fa8c 	bl	80090fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2240      	movs	r2, #64	; 0x40
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	d10f      	bne.n	8005c12 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2240      	movs	r2, #64	; 0x40
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	d108      	bne.n	8005c12 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2241      	movs	r2, #65	; 0x41
 8005c06:	4252      	negs	r2, r2
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f000 f81c 	bl	8005c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b002      	add	sp, #8
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	46bd      	mov	sp, r7
 8005c26:	b002      	add	sp, #8
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b002      	add	sp, #8
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	46bd      	mov	sp, r7
 8005c46:	b002      	add	sp, #8
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b002      	add	sp, #8
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	05db      	lsls	r3, r3, #23
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d00b      	beq.n	8005c8e <TIM_Base_SetConfig+0x32>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a23      	ldr	r2, [pc, #140]	; (8005d08 <TIM_Base_SetConfig+0xac>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d007      	beq.n	8005c8e <TIM_Base_SetConfig+0x32>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a22      	ldr	r2, [pc, #136]	; (8005d0c <TIM_Base_SetConfig+0xb0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_Base_SetConfig+0x32>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a21      	ldr	r2, [pc, #132]	; (8005d10 <TIM_Base_SetConfig+0xb4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d108      	bne.n	8005ca0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2270      	movs	r2, #112	; 0x70
 8005c92:	4393      	bics	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	2380      	movs	r3, #128	; 0x80
 8005ca4:	05db      	lsls	r3, r3, #23
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d00b      	beq.n	8005cc2 <TIM_Base_SetConfig+0x66>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a16      	ldr	r2, [pc, #88]	; (8005d08 <TIM_Base_SetConfig+0xac>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d007      	beq.n	8005cc2 <TIM_Base_SetConfig+0x66>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a15      	ldr	r2, [pc, #84]	; (8005d0c <TIM_Base_SetConfig+0xb0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_Base_SetConfig+0x66>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <TIM_Base_SetConfig+0xb4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d108      	bne.n	8005cd4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <TIM_Base_SetConfig+0xb8>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2280      	movs	r2, #128	; 0x80
 8005cd8:	4393      	bics	r3, r2
 8005cda:	001a      	movs	r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	615a      	str	r2, [r3, #20]
}
 8005d00:	46c0      	nop			; (mov r8, r8)
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b004      	add	sp, #16
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40010800 	.word	0x40010800
 8005d10:	40011400 	.word	0x40011400
 8005d14:	fffffcff 	.word	0xfffffcff

08005d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2238      	movs	r2, #56	; 0x38
 8005d26:	5c9b      	ldrb	r3, [r3, r2]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e032      	b.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2238      	movs	r2, #56	; 0x38
 8005d34:	2101      	movs	r1, #1
 8005d36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2239      	movs	r2, #57	; 0x39
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2270      	movs	r2, #112	; 0x70
 8005d54:	4393      	bics	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2280      	movs	r2, #128	; 0x80
 8005d66:	4393      	bics	r3, r2
 8005d68:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2239      	movs	r2, #57	; 0x39
 8005d88:	2101      	movs	r1, #1
 8005d8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2238      	movs	r2, #56	; 0x38
 8005d90:	2100      	movs	r1, #0
 8005d92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	0018      	movs	r0, r3
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	b004      	add	sp, #16
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e044      	b.n	8005e3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d107      	bne.n	8005dca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2270      	movs	r2, #112	; 0x70
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f003 faaf 	bl	8009328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2224      	movs	r2, #36	; 0x24
 8005dce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2101      	movs	r1, #1
 8005ddc:	438a      	bics	r2, r1
 8005dde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	0018      	movs	r0, r3
 8005de4:	f000 fbb8 	bl	8006558 <UART_SetConfig>
 8005de8:	0003      	movs	r3, r0
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e024      	b.n	8005e3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f000 fee1 	bl	8006bc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	490d      	ldr	r1, [pc, #52]	; (8005e44 <HAL_UART_Init+0xa4>)
 8005e0e:	400a      	ands	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	212a      	movs	r1, #42	; 0x2a
 8005e1e:	438a      	bics	r2, r1
 8005e20:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	0018      	movs	r0, r3
 8005e36:	f000 ff79 	bl	8006d2c <UART_CheckIdleState>
 8005e3a:	0003      	movs	r3, r0
}
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b002      	add	sp, #8
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	ffffb7ff 	.word	0xffffb7ff

08005e48 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	1dbb      	adds	r3, r7, #6
 8005e56:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d000      	beq.n	8005e62 <HAL_UART_Transmit+0x1a>
 8005e60:	e094      	b.n	8005f8c <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_UART_Transmit+0x28>
 8005e68:	1dbb      	adds	r3, r7, #6
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e08c      	b.n	8005f8e <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	2380      	movs	r3, #128	; 0x80
 8005e7a:	015b      	lsls	r3, r3, #5
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d109      	bne.n	8005e94 <HAL_UART_Transmit+0x4c>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d001      	beq.n	8005e94 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e07c      	b.n	8005f8e <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2270      	movs	r2, #112	; 0x70
 8005e98:	5c9b      	ldrb	r3, [r3, r2]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UART_Transmit+0x5a>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e075      	b.n	8005f8e <HAL_UART_Transmit+0x146>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2270      	movs	r2, #112	; 0x70
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2221      	movs	r2, #33	; 0x21
 8005eb4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005eb6:	f7fc fd8d 	bl	80029d4 <HAL_GetTick>
 8005eba:	0003      	movs	r3, r0
 8005ebc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1dba      	adds	r2, r7, #6
 8005ec2:	2150      	movs	r1, #80	; 0x50
 8005ec4:	8812      	ldrh	r2, [r2, #0]
 8005ec6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	1dba      	adds	r2, r7, #6
 8005ecc:	2152      	movs	r1, #82	; 0x52
 8005ece:	8812      	ldrh	r2, [r2, #0]
 8005ed0:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	015b      	lsls	r3, r3, #5
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d108      	bne.n	8005ef0 <HAL_UART_Transmit+0xa8>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d104      	bne.n	8005ef0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	e003      	b.n	8005ef8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ef8:	e02c      	b.n	8005f54 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	0013      	movs	r3, r2
 8005f04:	2200      	movs	r2, #0
 8005f06:	2180      	movs	r1, #128	; 0x80
 8005f08:	f000 ff54 	bl	8006db4 <UART_WaitOnFlagUntilTimeout>
 8005f0c:	1e03      	subs	r3, r0, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e03c      	b.n	8005f8e <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10b      	bne.n	8005f32 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	001a      	movs	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	05d2      	lsls	r2, r2, #23
 8005f26:	0dd2      	lsrs	r2, r2, #23
 8005f28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	3302      	adds	r3, #2
 8005f2e:	61bb      	str	r3, [r7, #24]
 8005f30:	e007      	b.n	8005f42 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	781a      	ldrb	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2252      	movs	r2, #82	; 0x52
 8005f46:	5a9b      	ldrh	r3, [r3, r2]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b299      	uxth	r1, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2252      	movs	r2, #82	; 0x52
 8005f52:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2252      	movs	r2, #82	; 0x52
 8005f58:	5a9b      	ldrh	r3, [r3, r2]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1cc      	bne.n	8005efa <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	0013      	movs	r3, r2
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2140      	movs	r1, #64	; 0x40
 8005f6e:	f000 ff21 	bl	8006db4 <UART_WaitOnFlagUntilTimeout>
 8005f72:	1e03      	subs	r3, r0, #0
 8005f74:	d001      	beq.n	8005f7a <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e009      	b.n	8005f8e <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2270      	movs	r2, #112	; 0x70
 8005f84:	2100      	movs	r1, #0
 8005f86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e000      	b.n	8005f8e <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8005f8c:	2302      	movs	r3, #2
  }
}
 8005f8e:	0018      	movs	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b008      	add	sp, #32
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	1dbb      	adds	r3, r7, #6
 8005fa4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d000      	beq.n	8005fb0 <HAL_UART_Transmit_DMA+0x18>
 8005fae:	e077      	b.n	80060a0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_UART_Transmit_DMA+0x26>
 8005fb6:	1dbb      	adds	r3, r7, #6
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e06f      	b.n	80060a2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	2380      	movs	r3, #128	; 0x80
 8005fc8:	015b      	lsls	r3, r3, #5
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d109      	bne.n	8005fe2 <HAL_UART_Transmit_DMA+0x4a>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d105      	bne.n	8005fe2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d001      	beq.n	8005fe2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e05f      	b.n	80060a2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2270      	movs	r2, #112	; 0x70
 8005fe6:	5c9b      	ldrb	r3, [r3, r2]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_UART_Transmit_DMA+0x58>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e058      	b.n	80060a2 <HAL_UART_Transmit_DMA+0x10a>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2270      	movs	r2, #112	; 0x70
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1dba      	adds	r2, r7, #6
 8006002:	2150      	movs	r1, #80	; 0x50
 8006004:	8812      	ldrh	r2, [r2, #0]
 8006006:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	1dba      	adds	r2, r7, #6
 800600c:	2152      	movs	r1, #82	; 0x52
 800600e:	8812      	ldrh	r2, [r2, #0]
 8006010:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2221      	movs	r2, #33	; 0x21
 800601c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006022:	2b00      	cmp	r3, #0
 8006024:	d02a      	beq.n	800607c <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800602a:	4a20      	ldr	r2, [pc, #128]	; (80060ac <HAL_UART_Transmit_DMA+0x114>)
 800602c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006032:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <HAL_UART_Transmit_DMA+0x118>)
 8006034:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800603a:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <HAL_UART_Transmit_DMA+0x11c>)
 800603c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006042:	2200      	movs	r2, #0
 8006044:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604e:	0019      	movs	r1, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3328      	adds	r3, #40	; 0x28
 8006056:	001a      	movs	r2, r3
 8006058:	1dbb      	adds	r3, r7, #6
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	f7fd fa98 	bl	8003590 <HAL_DMA_Start_IT>
 8006060:	1e03      	subs	r3, r0, #0
 8006062:	d00b      	beq.n	800607c <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2210      	movs	r2, #16
 8006068:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2270      	movs	r2, #112	; 0x70
 800606e:	2100      	movs	r1, #0
 8006070:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e012      	b.n	80060a2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2240      	movs	r2, #64	; 0x40
 8006082:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2270      	movs	r2, #112	; 0x70
 8006088:	2100      	movs	r1, #0
 800608a:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2180      	movs	r1, #128	; 0x80
 8006098:	430a      	orrs	r2, r1
 800609a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
  }
}
 80060a2:	0018      	movs	r0, r3
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b004      	add	sp, #16
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	08006eb1 	.word	0x08006eb1
 80060b0:	08006f05 	.word	0x08006f05
 80060b4:	08006faf 	.word	0x08006faf

080060b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	1dbb      	adds	r3, r7, #6
 80060c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d000      	beq.n	80060d0 <HAL_UART_Receive_DMA+0x18>
 80060ce:	e07f      	b.n	80061d0 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_UART_Receive_DMA+0x26>
 80060d6:	1dbb      	adds	r3, r7, #6
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e077      	b.n	80061d2 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	015b      	lsls	r3, r3, #5
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d109      	bne.n	8006102 <HAL_UART_Receive_DMA+0x4a>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d105      	bne.n	8006102 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2201      	movs	r2, #1
 80060fa:	4013      	ands	r3, r2
 80060fc:	d001      	beq.n	8006102 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e067      	b.n	80061d2 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2270      	movs	r2, #112	; 0x70
 8006106:	5c9b      	ldrb	r3, [r3, r2]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_UART_Receive_DMA+0x58>
 800610c:	2302      	movs	r3, #2
 800610e:	e060      	b.n	80061d2 <HAL_UART_Receive_DMA+0x11a>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2270      	movs	r2, #112	; 0x70
 8006114:	2101      	movs	r1, #1
 8006116:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1dba      	adds	r2, r7, #6
 8006122:	2158      	movs	r1, #88	; 0x58
 8006124:	8812      	ldrh	r2, [r2, #0]
 8006126:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2222      	movs	r2, #34	; 0x22
 8006132:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d02a      	beq.n	8006192 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006140:	4a26      	ldr	r2, [pc, #152]	; (80061dc <HAL_UART_Receive_DMA+0x124>)
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006148:	4a25      	ldr	r2, [pc, #148]	; (80061e0 <HAL_UART_Receive_DMA+0x128>)
 800614a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006150:	4a24      	ldr	r2, [pc, #144]	; (80061e4 <HAL_UART_Receive_DMA+0x12c>)
 8006152:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006158:	2200      	movs	r2, #0
 800615a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3324      	adds	r3, #36	; 0x24
 8006166:	0019      	movs	r1, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616c:	001a      	movs	r2, r3
 800616e:	1dbb      	adds	r3, r7, #6
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	f7fd fa0d 	bl	8003590 <HAL_DMA_Start_IT>
 8006176:	1e03      	subs	r3, r0, #0
 8006178:	d00b      	beq.n	8006192 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2210      	movs	r2, #16
 800617e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2270      	movs	r2, #112	; 0x70
 8006184:	2100      	movs	r1, #0
 8006186:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e01f      	b.n	80061d2 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2270      	movs	r2, #112	; 0x70
 8006196:	2100      	movs	r1, #0
 8006198:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2180      	movs	r1, #128	; 0x80
 80061a6:	0049      	lsls	r1, r1, #1
 80061a8:	430a      	orrs	r2, r1
 80061aa:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2101      	movs	r1, #1
 80061b8:	430a      	orrs	r2, r1
 80061ba:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2140      	movs	r1, #64	; 0x40
 80061c8:	430a      	orrs	r2, r1
 80061ca:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	e000      	b.n	80061d2 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80061d0:	2302      	movs	r3, #2
  }
}
 80061d2:	0018      	movs	r0, r3
 80061d4:	46bd      	mov	sp, r7
 80061d6:	b004      	add	sp, #16
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	08006f25 	.word	0x08006f25
 80061e0:	08006f91 	.word	0x08006f91
 80061e4:	08006faf 	.word	0x08006faf

080061e8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4927      	ldr	r1, [pc, #156]	; (8006298 <HAL_UART_AbortReceive+0xb0>)
 80061fc:	400a      	ands	r2, r1
 80061fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2101      	movs	r1, #1
 800620c:	438a      	bics	r2, r1
 800620e:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2240      	movs	r2, #64	; 0x40
 8006218:	4013      	ands	r3, r2
 800621a:	2b40      	cmp	r3, #64	; 0x40
 800621c:	d123      	bne.n	8006266 <HAL_UART_AbortReceive+0x7e>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2140      	movs	r1, #64	; 0x40
 800622a:	438a      	bics	r2, r1
 800622c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d017      	beq.n	8006266 <HAL_UART_AbortReceive+0x7e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800623a:	2200      	movs	r2, #0
 800623c:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006242:	0018      	movs	r0, r3
 8006244:	f7fd fa0a 	bl	800365c <HAL_DMA_Abort>
 8006248:	1e03      	subs	r3, r0, #0
 800624a:	d00c      	beq.n	8006266 <HAL_UART_AbortReceive+0x7e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006250:	0018      	movs	r0, r3
 8006252:	f7fd fb38 	bl	80038c6 <HAL_DMA_GetError>
 8006256:	0003      	movs	r3, r0
 8006258:	2b20      	cmp	r3, #32
 800625a:	d104      	bne.n	8006266 <HAL_UART_AbortReceive+0x7e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2210      	movs	r2, #16
 8006260:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e013      	b.n	800628e <HAL_UART_AbortReceive+0xa6>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	225a      	movs	r2, #90	; 0x5a
 800626a:	2100      	movs	r1, #0
 800626c:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	220f      	movs	r2, #15
 8006274:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2108      	movs	r1, #8
 8006282:	430a      	orrs	r2, r1
 8006284:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	0018      	movs	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	b002      	add	sp, #8
 8006294:	bd80      	pop	{r7, pc}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	fffffedf 	.word	0xfffffedf

0800629c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	220f      	movs	r2, #15
 80062c0:	4013      	ands	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d112      	bne.n	80062f0 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2220      	movs	r2, #32
 80062ce:	4013      	ands	r3, r2
 80062d0:	d00e      	beq.n	80062f0 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2220      	movs	r2, #32
 80062d6:	4013      	ands	r3, r2
 80062d8:	d00a      	beq.n	80062f0 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d100      	bne.n	80062e4 <HAL_UART_IRQHandler+0x48>
 80062e2:	e0f5      	b.n	80064d0 <HAL_UART_IRQHandler+0x234>
      {
        huart->RxISR(huart);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	0010      	movs	r0, r2
 80062ec:	4798      	blx	r3
      }
      return;
 80062ee:	e0ef      	b.n	80064d0 <HAL_UART_IRQHandler+0x234>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d100      	bne.n	80062f8 <HAL_UART_IRQHandler+0x5c>
 80062f6:	e0b8      	b.n	800646a <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2201      	movs	r2, #1
 80062fc:	4013      	ands	r3, r2
 80062fe:	d105      	bne.n	800630c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	2390      	movs	r3, #144	; 0x90
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	4013      	ands	r3, r2
 8006308:	d100      	bne.n	800630c <HAL_UART_IRQHandler+0x70>
 800630a:	e0ae      	b.n	800646a <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2201      	movs	r2, #1
 8006310:	4013      	ands	r3, r2
 8006312:	d00e      	beq.n	8006332 <HAL_UART_IRQHandler+0x96>
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	2380      	movs	r3, #128	; 0x80
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4013      	ands	r3, r2
 800631c:	d009      	beq.n	8006332 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2201      	movs	r2, #1
 8006324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800632a:	2201      	movs	r2, #1
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2202      	movs	r2, #2
 8006336:	4013      	ands	r3, r2
 8006338:	d00d      	beq.n	8006356 <HAL_UART_IRQHandler+0xba>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2201      	movs	r2, #1
 800633e:	4013      	ands	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2202      	movs	r2, #2
 8006348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800634e:	2204      	movs	r2, #4
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	2204      	movs	r2, #4
 800635a:	4013      	ands	r3, r2
 800635c:	d00d      	beq.n	800637a <HAL_UART_IRQHandler+0xde>
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2201      	movs	r2, #1
 8006362:	4013      	ands	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2204      	movs	r2, #4
 800636c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006372:	2202      	movs	r2, #2
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	2208      	movs	r2, #8
 800637e:	4013      	ands	r3, r2
 8006380:	d011      	beq.n	80063a6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2220      	movs	r2, #32
 8006386:	4013      	ands	r3, r2
 8006388:	d103      	bne.n	8006392 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2201      	movs	r2, #1
 800638e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006390:	d009      	beq.n	80063a6 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2208      	movs	r2, #8
 8006398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800639e:	2208      	movs	r2, #8
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d100      	bne.n	80063b0 <HAL_UART_IRQHandler+0x114>
 80063ae:	e091      	b.n	80064d4 <HAL_UART_IRQHandler+0x238>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	2220      	movs	r2, #32
 80063b4:	4013      	ands	r3, r2
 80063b6:	d00c      	beq.n	80063d2 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	2220      	movs	r2, #32
 80063bc:	4013      	ands	r3, r2
 80063be:	d008      	beq.n	80063d2 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d004      	beq.n	80063d2 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	0010      	movs	r0, r2
 80063d0:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2240      	movs	r2, #64	; 0x40
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d003      	beq.n	80063ee <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2208      	movs	r2, #8
 80063ea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063ec:	d033      	beq.n	8006456 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f000 fd3d 	bl	8006e70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2240      	movs	r2, #64	; 0x40
 80063fe:	4013      	ands	r3, r2
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d123      	bne.n	800644c <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2140      	movs	r1, #64	; 0x40
 8006410:	438a      	bics	r2, r1
 8006412:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d012      	beq.n	8006442 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006420:	4a2f      	ldr	r2, [pc, #188]	; (80064e0 <HAL_UART_IRQHandler+0x244>)
 8006422:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006428:	0018      	movs	r0, r3
 800642a:	f7fd f957 	bl	80036dc <HAL_DMA_Abort_IT>
 800642e:	1e03      	subs	r3, r0, #0
 8006430:	d019      	beq.n	8006466 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800643c:	0018      	movs	r0, r3
 800643e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	e011      	b.n	8006466 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	0018      	movs	r0, r3
 8006446:	f000 f86d 	bl	8006524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644a:	e00c      	b.n	8006466 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	0018      	movs	r0, r3
 8006450:	f000 f868 	bl	8006524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006454:	e007      	b.n	8006466 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	0018      	movs	r0, r3
 800645a:	f000 f863 	bl	8006524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006464:	e036      	b.n	80064d4 <HAL_UART_IRQHandler+0x238>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006466:	46c0      	nop			; (mov r8, r8)
    return;
 8006468:	e034      	b.n	80064d4 <HAL_UART_IRQHandler+0x238>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	035b      	lsls	r3, r3, #13
 8006470:	4013      	ands	r3, r2
 8006472:	d00e      	beq.n	8006492 <HAL_UART_IRQHandler+0x1f6>
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	2380      	movs	r3, #128	; 0x80
 8006478:	03db      	lsls	r3, r3, #15
 800647a:	4013      	ands	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2280      	movs	r2, #128	; 0x80
 8006484:	0352      	lsls	r2, r2, #13
 8006486:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	0018      	movs	r0, r3
 800648c:	f000 fe70 	bl	8007170 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006490:	e023      	b.n	80064da <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	2280      	movs	r2, #128	; 0x80
 8006496:	4013      	ands	r3, r2
 8006498:	d00d      	beq.n	80064b6 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2280      	movs	r2, #128	; 0x80
 800649e:	4013      	ands	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <HAL_UART_IRQHandler+0x23c>
    {
      huart->TxISR(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	0010      	movs	r0, r2
 80064b2:	4798      	blx	r3
    }
    return;
 80064b4:	e010      	b.n	80064d8 <HAL_UART_IRQHandler+0x23c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	2240      	movs	r2, #64	; 0x40
 80064ba:	4013      	ands	r3, r2
 80064bc:	d00d      	beq.n	80064da <HAL_UART_IRQHandler+0x23e>
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2240      	movs	r2, #64	; 0x40
 80064c2:	4013      	ands	r3, r2
 80064c4:	d009      	beq.n	80064da <HAL_UART_IRQHandler+0x23e>
  {
    UART_EndTransmit_IT(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	0018      	movs	r0, r3
 80064ca:	f000 fdc6 	bl	800705a <UART_EndTransmit_IT>
    return;
 80064ce:	e004      	b.n	80064da <HAL_UART_IRQHandler+0x23e>
      return;
 80064d0:	46c0      	nop			; (mov r8, r8)
 80064d2:	e002      	b.n	80064da <HAL_UART_IRQHandler+0x23e>
    return;
 80064d4:	46c0      	nop			; (mov r8, r8)
 80064d6:	e000      	b.n	80064da <HAL_UART_IRQHandler+0x23e>
    return;
 80064d8:	46c0      	nop			; (mov r8, r8)
  }

}
 80064da:	46bd      	mov	sp, r7
 80064dc:	b008      	add	sp, #32
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	0800702d 	.word	0x0800702d

080064e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064ec:	46c0      	nop			; (mov r8, r8)
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b002      	add	sp, #8
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80064fc:	46c0      	nop			; (mov r8, r8)
 80064fe:	46bd      	mov	sp, r7
 8006500:	b002      	add	sp, #8
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800650c:	46c0      	nop			; (mov r8, r8)
 800650e:	46bd      	mov	sp, r7
 8006510:	b002      	add	sp, #8
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800651c:	46c0      	nop			; (mov r8, r8)
 800651e:	46bd      	mov	sp, r7
 8006520:	b002      	add	sp, #8
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800652c:	46c0      	nop			; (mov r8, r8)
 800652e:	46bd      	mov	sp, r7
 8006530:	b002      	add	sp, #8
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t temp1, temp2;
  temp1 = huart->gState;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006540:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006546:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	4313      	orrs	r3, r2
}
 800654e:	0018      	movs	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	b004      	add	sp, #16
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006558:	b5b0      	push	{r4, r5, r7, lr}
 800655a:	b08e      	sub	sp, #56	; 0x38
 800655c:	af00      	add	r7, sp, #0
 800655e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006560:	231b      	movs	r3, #27
 8006562:	2218      	movs	r2, #24
 8006564:	4694      	mov	ip, r2
 8006566:	44bc      	add	ip, r7
 8006568:	4463      	add	r3, ip
 800656a:	2210      	movs	r2, #16
 800656c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800656e:	2300      	movs	r3, #0
 8006570:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8006572:	2313      	movs	r3, #19
 8006574:	2218      	movs	r2, #24
 8006576:	4694      	mov	ip, r2
 8006578:	44bc      	add	ip, r7
 800657a:	4463      	add	r3, ip
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006580:	2300      	movs	r3, #0
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	431a      	orrs	r2, r3
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	431a      	orrs	r2, r3
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	4313      	orrs	r3, r2
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4ab0      	ldr	r2, [pc, #704]	; (8006864 <UART_SetConfig+0x30c>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	0019      	movs	r1, r3
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ae:	430a      	orrs	r2, r1
 80065b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	4aab      	ldr	r2, [pc, #684]	; (8006868 <UART_SetConfig+0x310>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	0019      	movs	r1, r3
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4aa5      	ldr	r2, [pc, #660]	; (800686c <UART_SetConfig+0x314>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065e0:	4313      	orrs	r3, r2
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	4aa1      	ldr	r2, [pc, #644]	; (8006870 <UART_SetConfig+0x318>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	0019      	movs	r1, r3
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065f6:	430a      	orrs	r2, r1
 80065f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a9d      	ldr	r2, [pc, #628]	; (8006874 <UART_SetConfig+0x31c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d136      	bne.n	8006672 <UART_SetConfig+0x11a>
 8006604:	4b9c      	ldr	r3, [pc, #624]	; (8006878 <UART_SetConfig+0x320>)
 8006606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006608:	2203      	movs	r2, #3
 800660a:	4013      	ands	r3, r2
 800660c:	2b03      	cmp	r3, #3
 800660e:	d020      	beq.n	8006652 <UART_SetConfig+0xfa>
 8006610:	d827      	bhi.n	8006662 <UART_SetConfig+0x10a>
 8006612:	2b02      	cmp	r3, #2
 8006614:	d00d      	beq.n	8006632 <UART_SetConfig+0xda>
 8006616:	d824      	bhi.n	8006662 <UART_SetConfig+0x10a>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <UART_SetConfig+0xca>
 800661c:	2b01      	cmp	r3, #1
 800661e:	d010      	beq.n	8006642 <UART_SetConfig+0xea>
 8006620:	e01f      	b.n	8006662 <UART_SetConfig+0x10a>
 8006622:	231b      	movs	r3, #27
 8006624:	2218      	movs	r2, #24
 8006626:	4694      	mov	ip, r2
 8006628:	44bc      	add	ip, r7
 800662a:	4463      	add	r3, ip
 800662c:	2201      	movs	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	e0c5      	b.n	80067be <UART_SetConfig+0x266>
 8006632:	231b      	movs	r3, #27
 8006634:	2218      	movs	r2, #24
 8006636:	4694      	mov	ip, r2
 8006638:	44bc      	add	ip, r7
 800663a:	4463      	add	r3, ip
 800663c:	2202      	movs	r2, #2
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	e0bd      	b.n	80067be <UART_SetConfig+0x266>
 8006642:	231b      	movs	r3, #27
 8006644:	2218      	movs	r2, #24
 8006646:	4694      	mov	ip, r2
 8006648:	44bc      	add	ip, r7
 800664a:	4463      	add	r3, ip
 800664c:	2204      	movs	r2, #4
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	e0b5      	b.n	80067be <UART_SetConfig+0x266>
 8006652:	231b      	movs	r3, #27
 8006654:	2218      	movs	r2, #24
 8006656:	4694      	mov	ip, r2
 8006658:	44bc      	add	ip, r7
 800665a:	4463      	add	r3, ip
 800665c:	2208      	movs	r2, #8
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	e0ad      	b.n	80067be <UART_SetConfig+0x266>
 8006662:	231b      	movs	r3, #27
 8006664:	2218      	movs	r2, #24
 8006666:	4694      	mov	ip, r2
 8006668:	44bc      	add	ip, r7
 800666a:	4463      	add	r3, ip
 800666c:	2210      	movs	r2, #16
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	e0a5      	b.n	80067be <UART_SetConfig+0x266>
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a81      	ldr	r2, [pc, #516]	; (800687c <UART_SetConfig+0x324>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d136      	bne.n	80066ea <UART_SetConfig+0x192>
 800667c:	4b7e      	ldr	r3, [pc, #504]	; (8006878 <UART_SetConfig+0x320>)
 800667e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006680:	220c      	movs	r2, #12
 8006682:	4013      	ands	r3, r2
 8006684:	2b0c      	cmp	r3, #12
 8006686:	d020      	beq.n	80066ca <UART_SetConfig+0x172>
 8006688:	d827      	bhi.n	80066da <UART_SetConfig+0x182>
 800668a:	2b08      	cmp	r3, #8
 800668c:	d00d      	beq.n	80066aa <UART_SetConfig+0x152>
 800668e:	d824      	bhi.n	80066da <UART_SetConfig+0x182>
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <UART_SetConfig+0x142>
 8006694:	2b04      	cmp	r3, #4
 8006696:	d010      	beq.n	80066ba <UART_SetConfig+0x162>
 8006698:	e01f      	b.n	80066da <UART_SetConfig+0x182>
 800669a:	231b      	movs	r3, #27
 800669c:	2218      	movs	r2, #24
 800669e:	4694      	mov	ip, r2
 80066a0:	44bc      	add	ip, r7
 80066a2:	4463      	add	r3, ip
 80066a4:	2200      	movs	r2, #0
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	e089      	b.n	80067be <UART_SetConfig+0x266>
 80066aa:	231b      	movs	r3, #27
 80066ac:	2218      	movs	r2, #24
 80066ae:	4694      	mov	ip, r2
 80066b0:	44bc      	add	ip, r7
 80066b2:	4463      	add	r3, ip
 80066b4:	2202      	movs	r2, #2
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	e081      	b.n	80067be <UART_SetConfig+0x266>
 80066ba:	231b      	movs	r3, #27
 80066bc:	2218      	movs	r2, #24
 80066be:	4694      	mov	ip, r2
 80066c0:	44bc      	add	ip, r7
 80066c2:	4463      	add	r3, ip
 80066c4:	2204      	movs	r2, #4
 80066c6:	701a      	strb	r2, [r3, #0]
 80066c8:	e079      	b.n	80067be <UART_SetConfig+0x266>
 80066ca:	231b      	movs	r3, #27
 80066cc:	2218      	movs	r2, #24
 80066ce:	4694      	mov	ip, r2
 80066d0:	44bc      	add	ip, r7
 80066d2:	4463      	add	r3, ip
 80066d4:	2208      	movs	r2, #8
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	e071      	b.n	80067be <UART_SetConfig+0x266>
 80066da:	231b      	movs	r3, #27
 80066dc:	2218      	movs	r2, #24
 80066de:	4694      	mov	ip, r2
 80066e0:	44bc      	add	ip, r7
 80066e2:	4463      	add	r3, ip
 80066e4:	2210      	movs	r2, #16
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	e069      	b.n	80067be <UART_SetConfig+0x266>
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a64      	ldr	r2, [pc, #400]	; (8006880 <UART_SetConfig+0x328>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d107      	bne.n	8006704 <UART_SetConfig+0x1ac>
 80066f4:	231b      	movs	r3, #27
 80066f6:	2218      	movs	r2, #24
 80066f8:	4694      	mov	ip, r2
 80066fa:	44bc      	add	ip, r7
 80066fc:	4463      	add	r3, ip
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	e05c      	b.n	80067be <UART_SetConfig+0x266>
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a5e      	ldr	r2, [pc, #376]	; (8006884 <UART_SetConfig+0x32c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d107      	bne.n	800671e <UART_SetConfig+0x1c6>
 800670e:	231b      	movs	r3, #27
 8006710:	2218      	movs	r2, #24
 8006712:	4694      	mov	ip, r2
 8006714:	44bc      	add	ip, r7
 8006716:	4463      	add	r3, ip
 8006718:	2200      	movs	r2, #0
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	e04f      	b.n	80067be <UART_SetConfig+0x266>
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a52      	ldr	r2, [pc, #328]	; (800686c <UART_SetConfig+0x314>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d143      	bne.n	80067b0 <UART_SetConfig+0x258>
 8006728:	4b53      	ldr	r3, [pc, #332]	; (8006878 <UART_SetConfig+0x320>)
 800672a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800672c:	23c0      	movs	r3, #192	; 0xc0
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	4013      	ands	r3, r2
 8006732:	22c0      	movs	r2, #192	; 0xc0
 8006734:	0112      	lsls	r2, r2, #4
 8006736:	4293      	cmp	r3, r2
 8006738:	d02a      	beq.n	8006790 <UART_SetConfig+0x238>
 800673a:	22c0      	movs	r2, #192	; 0xc0
 800673c:	0112      	lsls	r2, r2, #4
 800673e:	4293      	cmp	r3, r2
 8006740:	d82e      	bhi.n	80067a0 <UART_SetConfig+0x248>
 8006742:	2280      	movs	r2, #128	; 0x80
 8006744:	0112      	lsls	r2, r2, #4
 8006746:	4293      	cmp	r3, r2
 8006748:	d012      	beq.n	8006770 <UART_SetConfig+0x218>
 800674a:	2280      	movs	r2, #128	; 0x80
 800674c:	0112      	lsls	r2, r2, #4
 800674e:	4293      	cmp	r3, r2
 8006750:	d826      	bhi.n	80067a0 <UART_SetConfig+0x248>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <UART_SetConfig+0x208>
 8006756:	2280      	movs	r2, #128	; 0x80
 8006758:	00d2      	lsls	r2, r2, #3
 800675a:	4293      	cmp	r3, r2
 800675c:	d010      	beq.n	8006780 <UART_SetConfig+0x228>
 800675e:	e01f      	b.n	80067a0 <UART_SetConfig+0x248>
 8006760:	231b      	movs	r3, #27
 8006762:	2218      	movs	r2, #24
 8006764:	4694      	mov	ip, r2
 8006766:	44bc      	add	ip, r7
 8006768:	4463      	add	r3, ip
 800676a:	2200      	movs	r2, #0
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	e026      	b.n	80067be <UART_SetConfig+0x266>
 8006770:	231b      	movs	r3, #27
 8006772:	2218      	movs	r2, #24
 8006774:	4694      	mov	ip, r2
 8006776:	44bc      	add	ip, r7
 8006778:	4463      	add	r3, ip
 800677a:	2202      	movs	r2, #2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	e01e      	b.n	80067be <UART_SetConfig+0x266>
 8006780:	231b      	movs	r3, #27
 8006782:	2218      	movs	r2, #24
 8006784:	4694      	mov	ip, r2
 8006786:	44bc      	add	ip, r7
 8006788:	4463      	add	r3, ip
 800678a:	2204      	movs	r2, #4
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	e016      	b.n	80067be <UART_SetConfig+0x266>
 8006790:	231b      	movs	r3, #27
 8006792:	2218      	movs	r2, #24
 8006794:	4694      	mov	ip, r2
 8006796:	44bc      	add	ip, r7
 8006798:	4463      	add	r3, ip
 800679a:	2208      	movs	r2, #8
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	e00e      	b.n	80067be <UART_SetConfig+0x266>
 80067a0:	231b      	movs	r3, #27
 80067a2:	2218      	movs	r2, #24
 80067a4:	4694      	mov	ip, r2
 80067a6:	44bc      	add	ip, r7
 80067a8:	4463      	add	r3, ip
 80067aa:	2210      	movs	r2, #16
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e006      	b.n	80067be <UART_SetConfig+0x266>
 80067b0:	231b      	movs	r3, #27
 80067b2:	2218      	movs	r2, #24
 80067b4:	4694      	mov	ip, r2
 80067b6:	44bc      	add	ip, r7
 80067b8:	4463      	add	r3, ip
 80067ba:	2210      	movs	r2, #16
 80067bc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a2a      	ldr	r2, [pc, #168]	; (800686c <UART_SetConfig+0x314>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d000      	beq.n	80067ca <UART_SetConfig+0x272>
 80067c8:	e09d      	b.n	8006906 <UART_SetConfig+0x3ae>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067ca:	231b      	movs	r3, #27
 80067cc:	2218      	movs	r2, #24
 80067ce:	4694      	mov	ip, r2
 80067d0:	44bc      	add	ip, r7
 80067d2:	4463      	add	r3, ip
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d01d      	beq.n	8006816 <UART_SetConfig+0x2be>
 80067da:	dc20      	bgt.n	800681e <UART_SetConfig+0x2c6>
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d015      	beq.n	800680c <UART_SetConfig+0x2b4>
 80067e0:	dc1d      	bgt.n	800681e <UART_SetConfig+0x2c6>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <UART_SetConfig+0x294>
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d005      	beq.n	80067f6 <UART_SetConfig+0x29e>
 80067ea:	e018      	b.n	800681e <UART_SetConfig+0x2c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80067ec:	f7fd ffc6 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 80067f0:	0003      	movs	r3, r0
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067f4:	e01b      	b.n	800682e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067f6:	4b20      	ldr	r3, [pc, #128]	; (8006878 <UART_SetConfig+0x320>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2210      	movs	r2, #16
 80067fc:	4013      	ands	r3, r2
 80067fe:	d002      	beq.n	8006806 <UART_SetConfig+0x2ae>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8006800:	4b21      	ldr	r3, [pc, #132]	; (8006888 <UART_SetConfig+0x330>)
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8006804:	e013      	b.n	800682e <UART_SetConfig+0x2d6>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006806:	4b21      	ldr	r3, [pc, #132]	; (800688c <UART_SetConfig+0x334>)
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800680a:	e010      	b.n	800682e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800680c:	f7fd ff26 	bl	800465c <HAL_RCC_GetSysClockFreq>
 8006810:	0003      	movs	r3, r0
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006814:	e00b      	b.n	800682e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006816:	2380      	movs	r3, #128	; 0x80
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800681c:	e007      	b.n	800682e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800681e:	2313      	movs	r3, #19
 8006820:	2218      	movs	r2, #24
 8006822:	4694      	mov	ip, r2
 8006824:	44bc      	add	ip, r7
 8006826:	4463      	add	r3, ip
 8006828:	2201      	movs	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
        break;
 800682c:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d100      	bne.n	8006836 <UART_SetConfig+0x2de>
 8006834:	e1a8      	b.n	8006b88 <UART_SetConfig+0x630>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	0013      	movs	r3, r2
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	189b      	adds	r3, r3, r2
 8006840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006842:	429a      	cmp	r2, r3
 8006844:	d305      	bcc.n	8006852 <UART_SetConfig+0x2fa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800684c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684e:	429a      	cmp	r2, r3
 8006850:	d91e      	bls.n	8006890 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006852:	2313      	movs	r3, #19
 8006854:	2218      	movs	r2, #24
 8006856:	4694      	mov	ip, r2
 8006858:	44bc      	add	ip, r7
 800685a:	4463      	add	r3, ip
 800685c:	2201      	movs	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e192      	b.n	8006b88 <UART_SetConfig+0x630>
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	efff69f3 	.word	0xefff69f3
 8006868:	ffffcfff 	.word	0xffffcfff
 800686c:	40004800 	.word	0x40004800
 8006870:	fffff4ff 	.word	0xfffff4ff
 8006874:	40013800 	.word	0x40013800
 8006878:	40021000 	.word	0x40021000
 800687c:	40004400 	.word	0x40004400
 8006880:	40004c00 	.word	0x40004c00
 8006884:	40005000 	.word	0x40005000
 8006888:	003d0900 	.word	0x003d0900
 800688c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	2300      	movs	r3, #0
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	6939      	ldr	r1, [r7, #16]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	000b      	movs	r3, r1
 800689e:	0e1b      	lsrs	r3, r3, #24
 80068a0:	0010      	movs	r0, r2
 80068a2:	0205      	lsls	r5, r0, #8
 80068a4:	431d      	orrs	r5, r3
 80068a6:	000b      	movs	r3, r1
 80068a8:	021c      	lsls	r4, r3, #8
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	085b      	lsrs	r3, r3, #1
 80068b0:	60bb      	str	r3, [r7, #8]
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	68b8      	ldr	r0, [r7, #8]
 80068b8:	68f9      	ldr	r1, [r7, #12]
 80068ba:	1900      	adds	r0, r0, r4
 80068bc:	4169      	adcs	r1, r5
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	2300      	movs	r3, #0
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f7f9 fdec 	bl	80004a8 <__aeabi_uldivmod>
 80068d0:	0002      	movs	r2, r0
 80068d2:	000b      	movs	r3, r1
 80068d4:	0013      	movs	r3, r2
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068da:	23c0      	movs	r3, #192	; 0xc0
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	429a      	cmp	r2, r3
 80068e0:	d309      	bcc.n	80068f6 <UART_SetConfig+0x39e>
 80068e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e4:	2380      	movs	r3, #128	; 0x80
 80068e6:	035b      	lsls	r3, r3, #13
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d204      	bcs.n	80068f6 <UART_SetConfig+0x39e>
        {
          huart->Instance->BRR = usartdiv;
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f2:	60da      	str	r2, [r3, #12]
 80068f4:	e148      	b.n	8006b88 <UART_SetConfig+0x630>
        }
        else
        {
          ret = HAL_ERROR;
 80068f6:	2313      	movs	r3, #19
 80068f8:	2218      	movs	r2, #24
 80068fa:	4694      	mov	ip, r2
 80068fc:	44bc      	add	ip, r7
 80068fe:	4463      	add	r3, ip
 8006900:	2201      	movs	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	e140      	b.n	8006b88 <UART_SetConfig+0x630>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	69da      	ldr	r2, [r3, #28]
 800690a:	2380      	movs	r3, #128	; 0x80
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	429a      	cmp	r2, r3
 8006910:	d000      	beq.n	8006914 <UART_SetConfig+0x3bc>
 8006912:	e0aa      	b.n	8006a6a <UART_SetConfig+0x512>
  {
    switch (clocksource)
 8006914:	231b      	movs	r3, #27
 8006916:	2218      	movs	r2, #24
 8006918:	4694      	mov	ip, r2
 800691a:	44bc      	add	ip, r7
 800691c:	4463      	add	r3, ip
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b08      	cmp	r3, #8
 8006922:	d86d      	bhi.n	8006a00 <UART_SetConfig+0x4a8>
 8006924:	009a      	lsls	r2, r3, #2
 8006926:	4ba0      	ldr	r3, [pc, #640]	; (8006ba8 <UART_SetConfig+0x650>)
 8006928:	18d3      	adds	r3, r2, r3
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800692e:	f7fd ff25 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8006932:	0003      	movs	r3, r0
 8006934:	005a      	lsls	r2, r3, #1
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	085b      	lsrs	r3, r3, #1
 800693c:	18d2      	adds	r2, r2, r3
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	0019      	movs	r1, r3
 8006944:	0010      	movs	r0, r2
 8006946:	f7f9 fbfb 	bl	8000140 <__udivsi3>
 800694a:	0003      	movs	r3, r0
 800694c:	b29b      	uxth	r3, r3
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006950:	e05e      	b.n	8006a10 <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006952:	f7fd ff29 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8006956:	0003      	movs	r3, r0
 8006958:	005a      	lsls	r2, r3, #1
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	085b      	lsrs	r3, r3, #1
 8006960:	18d2      	adds	r2, r2, r3
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	0019      	movs	r1, r3
 8006968:	0010      	movs	r0, r2
 800696a:	f7f9 fbe9 	bl	8000140 <__udivsi3>
 800696e:	0003      	movs	r3, r0
 8006970:	b29b      	uxth	r3, r3
 8006972:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006974:	e04c      	b.n	8006a10 <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006976:	4b8d      	ldr	r3, [pc, #564]	; (8006bac <UART_SetConfig+0x654>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2210      	movs	r2, #16
 800697c:	4013      	ands	r3, r2
 800697e:	d00e      	beq.n	800699e <UART_SetConfig+0x446>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	4a8a      	ldr	r2, [pc, #552]	; (8006bb0 <UART_SetConfig+0x658>)
 8006988:	189a      	adds	r2, r3, r2
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	0019      	movs	r1, r3
 8006990:	0010      	movs	r0, r2
 8006992:	f7f9 fbd5 	bl	8000140 <__udivsi3>
 8006996:	0003      	movs	r3, r0
 8006998:	b29b      	uxth	r3, r3
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800699c:	e038      	b.n	8006a10 <UART_SetConfig+0x4b8>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	4a83      	ldr	r2, [pc, #524]	; (8006bb4 <UART_SetConfig+0x65c>)
 80069a6:	189a      	adds	r2, r3, r2
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	0019      	movs	r1, r3
 80069ae:	0010      	movs	r0, r2
 80069b0:	f7f9 fbc6 	bl	8000140 <__udivsi3>
 80069b4:	0003      	movs	r3, r0
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069ba:	e029      	b.n	8006a10 <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80069bc:	f7fd fe4e 	bl	800465c <HAL_RCC_GetSysClockFreq>
 80069c0:	0003      	movs	r3, r0
 80069c2:	005a      	lsls	r2, r3, #1
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	085b      	lsrs	r3, r3, #1
 80069ca:	18d2      	adds	r2, r2, r3
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	0019      	movs	r1, r3
 80069d2:	0010      	movs	r0, r2
 80069d4:	f7f9 fbb4 	bl	8000140 <__udivsi3>
 80069d8:	0003      	movs	r3, r0
 80069da:	b29b      	uxth	r3, r3
 80069dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069de:	e017      	b.n	8006a10 <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	2280      	movs	r2, #128	; 0x80
 80069e8:	0252      	lsls	r2, r2, #9
 80069ea:	189a      	adds	r2, r3, r2
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	0019      	movs	r1, r3
 80069f2:	0010      	movs	r0, r2
 80069f4:	f7f9 fba4 	bl	8000140 <__udivsi3>
 80069f8:	0003      	movs	r3, r0
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069fe:	e007      	b.n	8006a10 <UART_SetConfig+0x4b8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006a00:	2313      	movs	r3, #19
 8006a02:	2218      	movs	r2, #24
 8006a04:	4694      	mov	ip, r2
 8006a06:	44bc      	add	ip, r7
 8006a08:	4463      	add	r3, ip
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	701a      	strb	r2, [r3, #0]
        break;
 8006a0e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	2b0f      	cmp	r3, #15
 8006a14:	d921      	bls.n	8006a5a <UART_SetConfig+0x502>
 8006a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a18:	2380      	movs	r3, #128	; 0x80
 8006a1a:	025b      	lsls	r3, r3, #9
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d21c      	bcs.n	8006a5a <UART_SetConfig+0x502>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	200a      	movs	r0, #10
 8006a26:	2418      	movs	r4, #24
 8006a28:	193b      	adds	r3, r7, r4
 8006a2a:	181b      	adds	r3, r3, r0
 8006a2c:	210f      	movs	r1, #15
 8006a2e:	438a      	bics	r2, r1
 8006a30:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	2207      	movs	r2, #7
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	b299      	uxth	r1, r3
 8006a3e:	193b      	adds	r3, r7, r4
 8006a40:	181b      	adds	r3, r3, r0
 8006a42:	193a      	adds	r2, r7, r4
 8006a44:	1812      	adds	r2, r2, r0
 8006a46:	8812      	ldrh	r2, [r2, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	193a      	adds	r2, r7, r4
 8006a52:	1812      	adds	r2, r2, r0
 8006a54:	8812      	ldrh	r2, [r2, #0]
 8006a56:	60da      	str	r2, [r3, #12]
 8006a58:	e096      	b.n	8006b88 <UART_SetConfig+0x630>
    }
    else
    {
      ret = HAL_ERROR;
 8006a5a:	2313      	movs	r3, #19
 8006a5c:	2218      	movs	r2, #24
 8006a5e:	4694      	mov	ip, r2
 8006a60:	44bc      	add	ip, r7
 8006a62:	4463      	add	r3, ip
 8006a64:	2201      	movs	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	e08e      	b.n	8006b88 <UART_SetConfig+0x630>
    }
  }
  else
  {
    switch (clocksource)
 8006a6a:	231b      	movs	r3, #27
 8006a6c:	2218      	movs	r2, #24
 8006a6e:	4694      	mov	ip, r2
 8006a70:	44bc      	add	ip, r7
 8006a72:	4463      	add	r3, ip
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d86a      	bhi.n	8006b50 <UART_SetConfig+0x5f8>
 8006a7a:	009a      	lsls	r2, r3, #2
 8006a7c:	4b4e      	ldr	r3, [pc, #312]	; (8006bb8 <UART_SetConfig+0x660>)
 8006a7e:	18d3      	adds	r3, r2, r3
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006a84:	f7fd fe7a 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8006a88:	0002      	movs	r2, r0
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	18d2      	adds	r2, r2, r3
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	0019      	movs	r1, r3
 8006a98:	0010      	movs	r0, r2
 8006a9a:	f7f9 fb51 	bl	8000140 <__udivsi3>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006aa4:	e05c      	b.n	8006b60 <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006aa6:	f7fd fe7f 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8006aaa:	0002      	movs	r2, r0
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	18d2      	adds	r2, r2, r3
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	0019      	movs	r1, r3
 8006aba:	0010      	movs	r0, r2
 8006abc:	f7f9 fb40 	bl	8000140 <__udivsi3>
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ac6:	e04b      	b.n	8006b60 <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac8:	4b38      	ldr	r3, [pc, #224]	; (8006bac <UART_SetConfig+0x654>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2210      	movs	r2, #16
 8006ace:	4013      	ands	r3, r2
 8006ad0:	d00e      	beq.n	8006af0 <UART_SetConfig+0x598>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	085b      	lsrs	r3, r3, #1
 8006ad8:	4a38      	ldr	r2, [pc, #224]	; (8006bbc <UART_SetConfig+0x664>)
 8006ada:	189a      	adds	r2, r3, r2
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	0019      	movs	r1, r3
 8006ae2:	0010      	movs	r0, r2
 8006ae4:	f7f9 fb2c 	bl	8000140 <__udivsi3>
 8006ae8:	0003      	movs	r3, r0
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8006aee:	e037      	b.n	8006b60 <UART_SetConfig+0x608>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	085b      	lsrs	r3, r3, #1
 8006af6:	4a32      	ldr	r2, [pc, #200]	; (8006bc0 <UART_SetConfig+0x668>)
 8006af8:	189a      	adds	r2, r3, r2
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	0019      	movs	r1, r3
 8006b00:	0010      	movs	r0, r2
 8006b02:	f7f9 fb1d 	bl	8000140 <__udivsi3>
 8006b06:	0003      	movs	r3, r0
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b0c:	e028      	b.n	8006b60 <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006b0e:	f7fd fda5 	bl	800465c <HAL_RCC_GetSysClockFreq>
 8006b12:	0002      	movs	r2, r0
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	18d2      	adds	r2, r2, r3
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	0019      	movs	r1, r3
 8006b22:	0010      	movs	r0, r2
 8006b24:	f7f9 fb0c 	bl	8000140 <__udivsi3>
 8006b28:	0003      	movs	r3, r0
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b2e:	e017      	b.n	8006b60 <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	085b      	lsrs	r3, r3, #1
 8006b36:	2280      	movs	r2, #128	; 0x80
 8006b38:	0212      	lsls	r2, r2, #8
 8006b3a:	189a      	adds	r2, r3, r2
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	0019      	movs	r1, r3
 8006b42:	0010      	movs	r0, r2
 8006b44:	f7f9 fafc 	bl	8000140 <__udivsi3>
 8006b48:	0003      	movs	r3, r0
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b4e:	e007      	b.n	8006b60 <UART_SetConfig+0x608>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006b50:	2313      	movs	r3, #19
 8006b52:	2218      	movs	r2, #24
 8006b54:	4694      	mov	ip, r2
 8006b56:	44bc      	add	ip, r7
 8006b58:	4463      	add	r3, ip
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	701a      	strb	r2, [r3, #0]
        break;
 8006b5e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	2b0f      	cmp	r3, #15
 8006b64:	d909      	bls.n	8006b7a <UART_SetConfig+0x622>
 8006b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b68:	2380      	movs	r3, #128	; 0x80
 8006b6a:	025b      	lsls	r3, r3, #9
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d204      	bcs.n	8006b7a <UART_SetConfig+0x622>
    {
      huart->Instance->BRR = usartdiv;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b76:	60da      	str	r2, [r3, #12]
 8006b78:	e006      	b.n	8006b88 <UART_SetConfig+0x630>
    }
    else
    {
      ret = HAL_ERROR;
 8006b7a:	2313      	movs	r3, #19
 8006b7c:	2218      	movs	r2, #24
 8006b7e:	4694      	mov	ip, r2
 8006b80:	44bc      	add	ip, r7
 8006b82:	4463      	add	r3, ip
 8006b84:	2201      	movs	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	2200      	movs	r2, #0
 8006b92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006b94:	2313      	movs	r3, #19
 8006b96:	2218      	movs	r2, #24
 8006b98:	4694      	mov	ip, r2
 8006b9a:	44bc      	add	ip, r7
 8006b9c:	4463      	add	r3, ip
 8006b9e:	781b      	ldrb	r3, [r3, #0]
}
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b00e      	add	sp, #56	; 0x38
 8006ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ba8:	0800d850 	.word	0x0800d850
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	007a1200 	.word	0x007a1200
 8006bb4:	01e84800 	.word	0x01e84800
 8006bb8:	0800d874 	.word	0x0800d874
 8006bbc:	003d0900 	.word	0x003d0900
 8006bc0:	00f42400 	.word	0x00f42400

08006bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	d00b      	beq.n	8006bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	4a4a      	ldr	r2, [pc, #296]	; (8006d08 <UART_AdvFeatureConfig+0x144>)
 8006bde:	4013      	ands	r3, r2
 8006be0:	0019      	movs	r1, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	d00b      	beq.n	8006c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	4a43      	ldr	r2, [pc, #268]	; (8006d0c <UART_AdvFeatureConfig+0x148>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	0019      	movs	r1, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	2204      	movs	r2, #4
 8006c16:	4013      	ands	r3, r2
 8006c18:	d00b      	beq.n	8006c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	4a3b      	ldr	r2, [pc, #236]	; (8006d10 <UART_AdvFeatureConfig+0x14c>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	0019      	movs	r1, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	2208      	movs	r2, #8
 8006c38:	4013      	ands	r3, r2
 8006c3a:	d00b      	beq.n	8006c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	4a34      	ldr	r2, [pc, #208]	; (8006d14 <UART_AdvFeatureConfig+0x150>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	0019      	movs	r1, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	2210      	movs	r2, #16
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	d00b      	beq.n	8006c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <UART_AdvFeatureConfig+0x154>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	0019      	movs	r1, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	4a25      	ldr	r2, [pc, #148]	; (8006d1c <UART_AdvFeatureConfig+0x158>)
 8006c88:	4013      	ands	r3, r2
 8006c8a:	0019      	movs	r1, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	2240      	movs	r2, #64	; 0x40
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	d01d      	beq.n	8006cde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4a1d      	ldr	r2, [pc, #116]	; (8006d20 <UART_AdvFeatureConfig+0x15c>)
 8006caa:	4013      	ands	r3, r2
 8006cac:	0019      	movs	r1, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cbe:	2380      	movs	r3, #128	; 0x80
 8006cc0:	035b      	lsls	r3, r3, #13
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d10b      	bne.n	8006cde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <UART_AdvFeatureConfig+0x160>)
 8006cce:	4013      	ands	r3, r2
 8006cd0:	0019      	movs	r1, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	2280      	movs	r2, #128	; 0x80
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d00b      	beq.n	8006d00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	4a0e      	ldr	r2, [pc, #56]	; (8006d28 <UART_AdvFeatureConfig+0x164>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	0019      	movs	r1, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	605a      	str	r2, [r3, #4]
  }
}
 8006d00:	46c0      	nop			; (mov r8, r8)
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b002      	add	sp, #8
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	fffdffff 	.word	0xfffdffff
 8006d0c:	fffeffff 	.word	0xfffeffff
 8006d10:	fffbffff 	.word	0xfffbffff
 8006d14:	ffff7fff 	.word	0xffff7fff
 8006d18:	ffffefff 	.word	0xffffefff
 8006d1c:	ffffdfff 	.word	0xffffdfff
 8006d20:	ffefffff 	.word	0xffefffff
 8006d24:	ff9fffff 	.word	0xff9fffff
 8006d28:	fff7ffff 	.word	0xfff7ffff

08006d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d3a:	f7fb fe4b 	bl	80029d4 <HAL_GetTick>
 8006d3e:	0003      	movs	r3, r0
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2208      	movs	r2, #8
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d10c      	bne.n	8006d6a <UART_CheckIdleState+0x3e>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2280      	movs	r2, #128	; 0x80
 8006d54:	0391      	lsls	r1, r2, #14
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	4a15      	ldr	r2, [pc, #84]	; (8006db0 <UART_CheckIdleState+0x84>)
 8006d5a:	9200      	str	r2, [sp, #0]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f000 f829 	bl	8006db4 <UART_WaitOnFlagUntilTimeout>
 8006d62:	1e03      	subs	r3, r0, #0
 8006d64:	d001      	beq.n	8006d6a <UART_CheckIdleState+0x3e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e01e      	b.n	8006da8 <UART_CheckIdleState+0x7c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2204      	movs	r2, #4
 8006d72:	4013      	ands	r3, r2
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d10c      	bne.n	8006d92 <UART_CheckIdleState+0x66>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2280      	movs	r2, #128	; 0x80
 8006d7c:	03d1      	lsls	r1, r2, #15
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4a0b      	ldr	r2, [pc, #44]	; (8006db0 <UART_CheckIdleState+0x84>)
 8006d82:	9200      	str	r2, [sp, #0]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f000 f815 	bl	8006db4 <UART_WaitOnFlagUntilTimeout>
 8006d8a:	1e03      	subs	r3, r0, #0
 8006d8c:	d001      	beq.n	8006d92 <UART_CheckIdleState+0x66>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e00a      	b.n	8006da8 <UART_CheckIdleState+0x7c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2270      	movs	r2, #112	; 0x70
 8006da2:	2100      	movs	r1, #0
 8006da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	0018      	movs	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b004      	add	sp, #16
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	01ffffff 	.word	0x01ffffff

08006db4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	603b      	str	r3, [r7, #0]
 8006dc0:	1dfb      	adds	r3, r7, #7
 8006dc2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc4:	e029      	b.n	8006e1a <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	d026      	beq.n	8006e1a <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dcc:	f7fb fe02 	bl	80029d4 <HAL_GetTick>
 8006dd0:	0002      	movs	r2, r0
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d302      	bcc.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d11b      	bne.n	8006e1a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4915      	ldr	r1, [pc, #84]	; (8006e44 <UART_WaitOnFlagUntilTimeout+0x90>)
 8006dee:	400a      	ands	r2, r1
 8006df0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	438a      	bics	r2, r1
 8006e00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2270      	movs	r2, #112	; 0x70
 8006e12:	2100      	movs	r1, #0
 8006e14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e00f      	b.n	8006e3a <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	4013      	ands	r3, r2
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	425a      	negs	r2, r3
 8006e2a:	4153      	adcs	r3, r2
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	001a      	movs	r2, r3
 8006e30:	1dfb      	adds	r3, r7, #7
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d0c6      	beq.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	b004      	add	sp, #16
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	46c0      	nop			; (mov r8, r8)
 8006e44:	fffffe5f 	.word	0xfffffe5f

08006e48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	21c0      	movs	r1, #192	; 0xc0
 8006e5c:	438a      	bics	r2, r1
 8006e5e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006e66:	46c0      	nop			; (mov r8, r8)
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	b002      	add	sp, #8
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	490a      	ldr	r1, [pc, #40]	; (8006eac <UART_EndRxTransfer+0x3c>)
 8006e84:	400a      	ands	r2, r1
 8006e86:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2101      	movs	r1, #1
 8006e94:	438a      	bics	r2, r1
 8006e96:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ea4:	46c0      	nop			; (mov r8, r8)
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	fffffedf 	.word	0xfffffedf

08006eb0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	d114      	bne.n	8006ef4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2252      	movs	r2, #82	; 0x52
 8006ece:	2100      	movs	r1, #0
 8006ed0:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2180      	movs	r1, #128	; 0x80
 8006ede:	438a      	bics	r2, r1
 8006ee0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2140      	movs	r1, #64	; 0x40
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ef2:	e003      	b.n	8006efc <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	f7ff faf4 	bl	80064e4 <HAL_UART_TxCpltCallback>
}
 8006efc:	46c0      	nop			; (mov r8, r8)
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b004      	add	sp, #16
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	0018      	movs	r0, r3
 8006f16:	f7ff faed 	bl	80064f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	b004      	add	sp, #16
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d11e      	bne.n	8006f7c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	225a      	movs	r2, #90	; 0x5a
 8006f42:	2100      	movs	r1, #0
 8006f44:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	490e      	ldr	r1, [pc, #56]	; (8006f8c <UART_DMAReceiveCplt+0x68>)
 8006f52:	400a      	ands	r2, r1
 8006f54:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2101      	movs	r1, #1
 8006f62:	438a      	bics	r2, r1
 8006f64:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2140      	movs	r1, #64	; 0x40
 8006f72:	438a      	bics	r2, r1
 8006f74:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f7ff fac0 	bl	8006504 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f84:	46c0      	nop			; (mov r8, r8)
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b004      	add	sp, #16
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	fffffeff 	.word	0xfffffeff

08006f90 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7ff fab7 	bl	8006514 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa6:	46c0      	nop			; (mov r8, r8)
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	b004      	add	sp, #16
 8006fac:	bd80      	pop	{r7, pc}

08006fae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2280      	movs	r2, #128	; 0x80
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	2b80      	cmp	r3, #128	; 0x80
 8006fd4:	d10a      	bne.n	8006fec <UART_DMAError+0x3e>
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b21      	cmp	r3, #33	; 0x21
 8006fda:	d107      	bne.n	8006fec <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2252      	movs	r2, #82	; 0x52
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7ff ff2e 	bl	8006e48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2240      	movs	r2, #64	; 0x40
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	d10a      	bne.n	8007010 <UART_DMAError+0x62>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b22      	cmp	r3, #34	; 0x22
 8006ffe:	d107      	bne.n	8007010 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	225a      	movs	r2, #90	; 0x5a
 8007004:	2100      	movs	r1, #0
 8007006:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	0018      	movs	r0, r3
 800700c:	f7ff ff30 	bl	8006e70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007014:	2210      	movs	r2, #16
 8007016:	431a      	orrs	r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	0018      	movs	r0, r3
 8007020:	f7ff fa80 	bl	8006524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007024:	46c0      	nop			; (mov r8, r8)
 8007026:	46bd      	mov	sp, r7
 8007028:	b006      	add	sp, #24
 800702a:	bd80      	pop	{r7, pc}

0800702c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	225a      	movs	r2, #90	; 0x5a
 800703e:	2100      	movs	r1, #0
 8007040:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2252      	movs	r2, #82	; 0x52
 8007046:	2100      	movs	r1, #0
 8007048:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	0018      	movs	r0, r3
 800704e:	f7ff fa69 	bl	8006524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	46bd      	mov	sp, r7
 8007056:	b004      	add	sp, #16
 8007058:	bd80      	pop	{r7, pc}

0800705a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2140      	movs	r1, #64	; 0x40
 800706e:	438a      	bics	r2, r1
 8007070:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	0018      	movs	r0, r3
 8007082:	f7ff fa2f 	bl	80064e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	46bd      	mov	sp, r7
 800708a:	b002      	add	sp, #8
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <HAL_RS485Ex_Init>:
  *       It is expressed in sample time units (1/8 or 1/16 bit time, depending on the
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime, uint32_t DeassertionTime)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e05b      	b.n	8007160 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d107      	bne.n	80070c0 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2270      	movs	r2, #112	; 0x70
 80070b4:	2100      	movs	r1, #0
 80070b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	0018      	movs	r0, r3
 80070bc:	f002 f934 	bl	8009328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2224      	movs	r2, #36	; 0x24
 80070c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2101      	movs	r1, #1
 80070d2:	438a      	bics	r2, r1
 80070d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	0018      	movs	r0, r3
 80070da:	f7ff fa3d 	bl	8006558 <UART_SetConfig>
 80070de:	0003      	movs	r3, r0
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e03b      	b.n	8007160 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	0018      	movs	r0, r3
 80070f4:	f7ff fd66 	bl	8006bc4 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2180      	movs	r1, #128	; 0x80
 8007104:	01c9      	lsls	r1, r1, #7
 8007106:	430a      	orrs	r2, r1
 8007108:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	4a15      	ldr	r2, [pc, #84]	; (8007168 <HAL_RS485Ex_Init+0xd8>)
 8007112:	4013      	ands	r3, r2
 8007114:	0019      	movs	r1, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	430a      	orrs	r2, r1
 800711e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	055b      	lsls	r3, r3, #21
 8007124:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	041b      	lsls	r3, r3, #16
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a0d      	ldr	r2, [pc, #52]	; (800716c <HAL_RS485Ex_Init+0xdc>)
 8007138:	4013      	ands	r3, r2
 800713a:	0019      	movs	r1, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	430a      	orrs	r2, r1
 8007144:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2101      	movs	r1, #1
 8007152:	430a      	orrs	r2, r1
 8007154:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	0018      	movs	r0, r3
 800715a:	f7ff fde7 	bl	8006d2c <UART_CheckIdleState>
 800715e:	0003      	movs	r3, r0
}
 8007160:	0018      	movs	r0, r3
 8007162:	46bd      	mov	sp, r7
 8007164:	b006      	add	sp, #24
 8007166:	bd80      	pop	{r7, pc}
 8007168:	ffff7fff 	.word	0xffff7fff
 800716c:	fc00ffff 	.word	0xfc00ffff

08007170 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007178:	46c0      	nop			; (mov r8, r8)
 800717a:	46bd      	mov	sp, r7
 800717c:	b002      	add	sp, #8
 800717e:	bd80      	pop	{r7, pc}

08007180 <Init_ADXL362>:
}ADXL362RegTypeUDef;


ADXL362RegTypeUDef g_ADXL362Reg;

void Init_ADXL362(){
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af02      	add	r7, sp, #8
	uint8_t _writeBuf[3],_readBuf[3];
	_writeBuf[0]=0x0B;
 8007186:	1d3b      	adds	r3, r7, #4
 8007188:	220b      	movs	r2, #11
 800718a:	701a      	strb	r2, [r3, #0]
	_writeBuf[1]=0x2D;
 800718c:	1d3b      	adds	r3, r7, #4
 800718e:	222d      	movs	r2, #45	; 0x2d
 8007190:	705a      	strb	r2, [r3, #1]
	_writeBuf[2]=0x00;
 8007192:	1d3b      	adds	r3, r7, #4
 8007194:	2200      	movs	r2, #0
 8007196:	709a      	strb	r2, [r3, #2]

	_readBuf[0]=0x00;
 8007198:	003b      	movs	r3, r7
 800719a:	2200      	movs	r2, #0
 800719c:	701a      	strb	r2, [r3, #0]
	_readBuf[1]=0x00;
 800719e:	003b      	movs	r3, r7
 80071a0:	2200      	movs	r2, #0
 80071a2:	705a      	strb	r2, [r3, #1]
	_readBuf[2]=0x00;
 80071a4:	003b      	movs	r3, r7
 80071a6:	2200      	movs	r2, #0
 80071a8:	709a      	strb	r2, [r3, #2]

	//Reset device
	HAL_GPIO_WritePin(VSEN_GPIO_Port, VSEN_Pin, GPIO_PIN_RESET);
 80071aa:	2380      	movs	r3, #128	; 0x80
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	482e      	ldr	r0, [pc, #184]	; (8007268 <Init_ADXL362+0xe8>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	0019      	movs	r1, r3
 80071b4:	f7fc fd5b 	bl	8003c6e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80071b8:	2064      	movs	r0, #100	; 0x64
 80071ba:	f7fb fc15 	bl	80029e8 <HAL_Delay>
	HAL_GPIO_WritePin(VSEN_GPIO_Port, VSEN_Pin, GPIO_PIN_SET);
 80071be:	2380      	movs	r3, #128	; 0x80
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	4829      	ldr	r0, [pc, #164]	; (8007268 <Init_ADXL362+0xe8>)
 80071c4:	2201      	movs	r2, #1
 80071c6:	0019      	movs	r1, r3
 80071c8:	f7fc fd51 	bl	8003c6e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80071cc:	2064      	movs	r0, #100	; 0x64
 80071ce:	f7fb fc0b 	bl	80029e8 <HAL_Delay>
	//Read Power control register
	HAL_GPIO_WritePin(SPI2_NCS_GPIO_Port,SPI2_NCS_Pin,GPIO_PIN_RESET);
 80071d2:	2380      	movs	r3, #128	; 0x80
 80071d4:	015b      	lsls	r3, r3, #5
 80071d6:	4824      	ldr	r0, [pc, #144]	; (8007268 <Init_ADXL362+0xe8>)
 80071d8:	2200      	movs	r2, #0
 80071da:	0019      	movs	r1, r3
 80071dc:	f7fc fd47 	bl	8003c6e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80071e0:	2001      	movs	r0, #1
 80071e2:	f7fb fc01 	bl	80029e8 <HAL_Delay>
	HAL_SPI_TransmitReceive(&ADXL362_SPI_PORT,_writeBuf,_readBuf,3,1000);
 80071e6:	003a      	movs	r2, r7
 80071e8:	1d39      	adds	r1, r7, #4
 80071ea:	4820      	ldr	r0, [pc, #128]	; (800726c <Init_ADXL362+0xec>)
 80071ec:	23fa      	movs	r3, #250	; 0xfa
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	2303      	movs	r3, #3
 80071f4:	f7fe f972 	bl	80054dc <HAL_SPI_TransmitReceive>
	HAL_Delay(1);
 80071f8:	2001      	movs	r0, #1
 80071fa:	f7fb fbf5 	bl	80029e8 <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_NCS_GPIO_Port,SPI2_NCS_Pin,GPIO_PIN_SET);
 80071fe:	2380      	movs	r3, #128	; 0x80
 8007200:	015b      	lsls	r3, r3, #5
 8007202:	4819      	ldr	r0, [pc, #100]	; (8007268 <Init_ADXL362+0xe8>)
 8007204:	2201      	movs	r2, #1
 8007206:	0019      	movs	r1, r3
 8007208:	f7fc fd31 	bl	8003c6e <HAL_GPIO_WritePin>
	//Write power control register (turn on)
	_writeBuf[0]=0x0A;
 800720c:	1d3b      	adds	r3, r7, #4
 800720e:	220a      	movs	r2, #10
 8007210:	701a      	strb	r2, [r3, #0]
	_writeBuf[2]=_readBuf[2]|0x02;
 8007212:	003b      	movs	r3, r7
 8007214:	789b      	ldrb	r3, [r3, #2]
 8007216:	2202      	movs	r2, #2
 8007218:	4313      	orrs	r3, r2
 800721a:	b2da      	uxtb	r2, r3
 800721c:	1d3b      	adds	r3, r7, #4
 800721e:	709a      	strb	r2, [r3, #2]
	HAL_Delay(100);
 8007220:	2064      	movs	r0, #100	; 0x64
 8007222:	f7fb fbe1 	bl	80029e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8007226:	2380      	movs	r3, #128	; 0x80
 8007228:	015b      	lsls	r3, r3, #5
 800722a:	480f      	ldr	r0, [pc, #60]	; (8007268 <Init_ADXL362+0xe8>)
 800722c:	2200      	movs	r2, #0
 800722e:	0019      	movs	r1, r3
 8007230:	f7fc fd1d 	bl	8003c6e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007234:	2001      	movs	r0, #1
 8007236:	f7fb fbd7 	bl	80029e8 <HAL_Delay>
	HAL_SPI_TransmitReceive(&hspi2,_writeBuf,_readBuf,3,1000);
 800723a:	003a      	movs	r2, r7
 800723c:	1d39      	adds	r1, r7, #4
 800723e:	480b      	ldr	r0, [pc, #44]	; (800726c <Init_ADXL362+0xec>)
 8007240:	23fa      	movs	r3, #250	; 0xfa
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	2303      	movs	r3, #3
 8007248:	f7fe f948 	bl	80054dc <HAL_SPI_TransmitReceive>
	HAL_Delay(1);
 800724c:	2001      	movs	r0, #1
 800724e:	f7fb fbcb 	bl	80029e8 <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_NCS_GPIO_Port,SPI2_NCS_Pin,GPIO_PIN_SET);
 8007252:	2380      	movs	r3, #128	; 0x80
 8007254:	015b      	lsls	r3, r3, #5
 8007256:	4804      	ldr	r0, [pc, #16]	; (8007268 <Init_ADXL362+0xe8>)
 8007258:	2201      	movs	r2, #1
 800725a:	0019      	movs	r1, r3
 800725c:	f7fc fd07 	bl	8003c6e <HAL_GPIO_WritePin>
}
 8007260:	46c0      	nop			; (mov r8, r8)
 8007262:	46bd      	mov	sp, r7
 8007264:	b002      	add	sp, #8
 8007266:	bd80      	pop	{r7, pc}
 8007268:	50000400 	.word	0x50000400
 800726c:	20000434 	.word	0x20000434

08007270 <Act_ADXL362_ReadData>:
		  return -1;
	  }

//	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
}
int16_t Act_ADXL362_ReadData(){
 8007270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007272:	b0bd      	sub	sp, #244	; 0xf4
 8007274:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef _sta;
	uint8_t _writeBuf[0x2F+2]={0x0B,0x00};
 8007276:	26b4      	movs	r6, #180	; 0xb4
 8007278:	19bb      	adds	r3, r7, r6
 800727a:	220b      	movs	r2, #11
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	3304      	adds	r3, #4
 8007280:	222d      	movs	r2, #45	; 0x2d
 8007282:	2100      	movs	r1, #0
 8007284:	0018      	movs	r0, r3
 8007286:	f002 fcae 	bl	8009be6 <memset>
	uint8_t _readBuf[0x2F+2];
	char _logChar[128];
	memset(_readBuf,0,0x2F+2);
 800728a:	2580      	movs	r5, #128	; 0x80
 800728c:	197b      	adds	r3, r7, r5
 800728e:	2231      	movs	r2, #49	; 0x31
 8007290:	2100      	movs	r1, #0
 8007292:	0018      	movs	r0, r3
 8007294:	f002 fca7 	bl	8009be6 <memset>

	HAL_GPIO_WritePin(SPI2_NCS_GPIO_Port,SPI2_NCS_Pin,GPIO_PIN_RESET);
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	015b      	lsls	r3, r3, #5
 800729c:	4825      	ldr	r0, [pc, #148]	; (8007334 <Act_ADXL362_ReadData+0xc4>)
 800729e:	2200      	movs	r2, #0
 80072a0:	0019      	movs	r1, r3
 80072a2:	f7fc fce4 	bl	8003c6e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80072a6:	2001      	movs	r0, #1
 80072a8:	f7fb fb9e 	bl	80029e8 <HAL_Delay>
	_sta=HAL_SPI_TransmitReceive(&hspi2,_writeBuf,_readBuf,0x30,1000);
 80072ac:	23e7      	movs	r3, #231	; 0xe7
 80072ae:	18fc      	adds	r4, r7, r3
 80072b0:	197a      	adds	r2, r7, r5
 80072b2:	19b9      	adds	r1, r7, r6
 80072b4:	4820      	ldr	r0, [pc, #128]	; (8007338 <Act_ADXL362_ReadData+0xc8>)
 80072b6:	23fa      	movs	r3, #250	; 0xfa
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	2330      	movs	r3, #48	; 0x30
 80072be:	f7fe f90d 	bl	80054dc <HAL_SPI_TransmitReceive>
 80072c2:	0003      	movs	r3, r0
 80072c4:	7023      	strb	r3, [r4, #0]
	HAL_Delay(1);
 80072c6:	2001      	movs	r0, #1
 80072c8:	f7fb fb8e 	bl	80029e8 <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_NCS_GPIO_Port,SPI2_NCS_Pin,GPIO_PIN_SET);
 80072cc:	2380      	movs	r3, #128	; 0x80
 80072ce:	015b      	lsls	r3, r3, #5
 80072d0:	4818      	ldr	r0, [pc, #96]	; (8007334 <Act_ADXL362_ReadData+0xc4>)
 80072d2:	2201      	movs	r2, #1
 80072d4:	0019      	movs	r1, r3
 80072d6:	f7fc fcca 	bl	8003c6e <HAL_GPIO_WritePin>
	if(_sta==HAL_OK){
 80072da:	23e7      	movs	r3, #231	; 0xe7
 80072dc:	18fb      	adds	r3, r7, r3
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d108      	bne.n	80072f6 <Act_ADXL362_ReadData+0x86>
		memcpy(g_ADXL362Reg.byte,_readBuf+2,0x2F);
 80072e4:	197b      	adds	r3, r7, r5
 80072e6:	3302      	adds	r3, #2
 80072e8:	4a14      	ldr	r2, [pc, #80]	; (800733c <Act_ADXL362_ReadData+0xcc>)
 80072ea:	0010      	movs	r0, r2
 80072ec:	0019      	movs	r1, r3
 80072ee:	232f      	movs	r3, #47	; 0x2f
 80072f0:	001a      	movs	r2, r3
 80072f2:	f002 fc6f 	bl	8009bd4 <memcpy>
	}
	sprintf(_logChar,
			"X:%5d  Y:%5d  Z:%5d",
			ADXL362_GetGravity(0),
 80072f6:	2000      	movs	r0, #0
 80072f8:	f000 f824 	bl	8007344 <ADXL362_GetGravity>
 80072fc:	0003      	movs	r3, r0
	sprintf(_logChar,
 80072fe:	001c      	movs	r4, r3
			ADXL362_GetGravity(1),
 8007300:	2001      	movs	r0, #1
 8007302:	f000 f81f 	bl	8007344 <ADXL362_GetGravity>
 8007306:	0003      	movs	r3, r0
	sprintf(_logChar,
 8007308:	001d      	movs	r5, r3
			ADXL362_GetGravity(2));
 800730a:	2002      	movs	r0, #2
 800730c:	f000 f81a 	bl	8007344 <ADXL362_GetGravity>
 8007310:	0003      	movs	r3, r0
	sprintf(_logChar,
 8007312:	490b      	ldr	r1, [pc, #44]	; (8007340 <Act_ADXL362_ReadData+0xd0>)
 8007314:	0038      	movs	r0, r7
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	002b      	movs	r3, r5
 800731a:	0022      	movs	r2, r4
 800731c:	f003 f8e6 	bl	800a4ec <siprintf>
	Log(_logChar);
 8007320:	003b      	movs	r3, r7
 8007322:	0018      	movs	r0, r3
 8007324:	f000 f866 	bl	80073f4 <Log>
	return 0;
 8007328:	2300      	movs	r3, #0
}
 800732a:	0018      	movs	r0, r3
 800732c:	46bd      	mov	sp, r7
 800732e:	b03b      	add	sp, #236	; 0xec
 8007330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	50000400 	.word	0x50000400
 8007338:	20000434 	.word	0x20000434
 800733c:	20000238 	.word	0x20000238
 8007340:	0800cf30 	.word	0x0800cf30

08007344 <ADXL362_GetGravity>:
int16_t ADXL362_GetGravity(uint16_t channel){
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	0002      	movs	r2, r0
 800734c:	1dbb      	adds	r3, r7, #6
 800734e:	801a      	strh	r2, [r3, #0]
	int16_t _result;
	switch(channel){
 8007350:	1dbb      	adds	r3, r7, #6
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	2b02      	cmp	r3, #2
 8007356:	d021      	beq.n	800739c <ADXL362_GetGravity+0x58>
 8007358:	dc2e      	bgt.n	80073b8 <ADXL362_GetGravity+0x74>
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <ADXL362_GetGravity+0x20>
 800735e:	2b01      	cmp	r3, #1
 8007360:	d00e      	beq.n	8007380 <ADXL362_GetGravity+0x3c>
 8007362:	e029      	b.n	80073b8 <ADXL362_GetGravity+0x74>
	case 0:
		_result=(g_ADXL362Reg.byte[0x0F]<<8)+g_ADXL362Reg.byte[0x0E];
 8007364:	4b1b      	ldr	r3, [pc, #108]	; (80073d4 <ADXL362_GetGravity+0x90>)
 8007366:	7bdb      	ldrb	r3, [r3, #15]
 8007368:	b29b      	uxth	r3, r3
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	b29a      	uxth	r2, r3
 800736e:	4b19      	ldr	r3, [pc, #100]	; (80073d4 <ADXL362_GetGravity+0x90>)
 8007370:	7b9b      	ldrb	r3, [r3, #14]
 8007372:	b29b      	uxth	r3, r3
 8007374:	18d3      	adds	r3, r2, r3
 8007376:	b29a      	uxth	r2, r3
 8007378:	230e      	movs	r3, #14
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	801a      	strh	r2, [r3, #0]
		break;
 800737e:	e020      	b.n	80073c2 <ADXL362_GetGravity+0x7e>
	case 1:
		_result=(g_ADXL362Reg.byte[0x11]<<8)+g_ADXL362Reg.byte[0x10];
 8007380:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <ADXL362_GetGravity+0x90>)
 8007382:	7c5b      	ldrb	r3, [r3, #17]
 8007384:	b29b      	uxth	r3, r3
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	b29a      	uxth	r2, r3
 800738a:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <ADXL362_GetGravity+0x90>)
 800738c:	7c1b      	ldrb	r3, [r3, #16]
 800738e:	b29b      	uxth	r3, r3
 8007390:	18d3      	adds	r3, r2, r3
 8007392:	b29a      	uxth	r2, r3
 8007394:	230e      	movs	r3, #14
 8007396:	18fb      	adds	r3, r7, r3
 8007398:	801a      	strh	r2, [r3, #0]
		break;
 800739a:	e012      	b.n	80073c2 <ADXL362_GetGravity+0x7e>
	case 2:
		_result=(g_ADXL362Reg.byte[0x13]<<8)+g_ADXL362Reg.byte[0x12];
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <ADXL362_GetGravity+0x90>)
 800739e:	7cdb      	ldrb	r3, [r3, #19]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <ADXL362_GetGravity+0x90>)
 80073a8:	7c9b      	ldrb	r3, [r3, #18]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	18d3      	adds	r3, r2, r3
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	230e      	movs	r3, #14
 80073b2:	18fb      	adds	r3, r7, r3
 80073b4:	801a      	strh	r2, [r3, #0]
		break;
 80073b6:	e004      	b.n	80073c2 <ADXL362_GetGravity+0x7e>
	default:
		_result=0;
 80073b8:	230e      	movs	r3, #14
 80073ba:	18fb      	adds	r3, r7, r3
 80073bc:	2200      	movs	r2, #0
 80073be:	801a      	strh	r2, [r3, #0]
		break;
 80073c0:	46c0      	nop			; (mov r8, r8)
	}
	return _result;
 80073c2:	230e      	movs	r3, #14
 80073c4:	18fb      	adds	r3, r7, r3
 80073c6:	2200      	movs	r2, #0
 80073c8:	5e9b      	ldrsh	r3, [r3, r2]
}
 80073ca:	0018      	movs	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b004      	add	sp, #16
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	20000238 	.word	0x20000238

080073d8 <Init_Log>:
	{0x7, 0x3, 0x2},
	{0x7, 0x3, 0x2},
	{0x7, 0x3, 0x2}};

void Init_Log()
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
	g_LogTxBuf.remainCnt = 0;
 80073dc:	4b04      	ldr	r3, [pc, #16]	; (80073f0 <Init_Log+0x18>)
 80073de:	2200      	movs	r2, #0
 80073e0:	805a      	strh	r2, [r3, #2]
	g_LogTxBuf.lastTxCnt = 0;
 80073e2:	4b03      	ldr	r3, [pc, #12]	; (80073f0 <Init_Log+0x18>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	801a      	strh	r2, [r3, #0]
}
 80073e8:	46c0      	nop			; (mov r8, r8)
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	20000540 	.word	0x20000540

080073f4 <Log>:

int16_t Log(const char *str)
{
 80073f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073f6:	b08d      	sub	sp, #52	; 0x34
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	6078      	str	r0, [r7, #4]
	uint16_t _destCharCnt = 0;
 80073fc:	2626      	movs	r6, #38	; 0x26
 80073fe:	19bb      	adds	r3, r7, r6
 8007400:	2200      	movs	r2, #0
 8007402:	801a      	strh	r2, [r3, #0]
	RTC_TimeTypeDef t_Time;
	RTC_DateTypeDef t_Date;
	HAL_RTC_GetTime(&hrtc, &t_Time, RTC_FORMAT_BIN);
 8007404:	2410      	movs	r4, #16
 8007406:	1939      	adds	r1, r7, r4
 8007408:	4b20      	ldr	r3, [pc, #128]	; (800748c <Log+0x98>)
 800740a:	2200      	movs	r2, #0
 800740c:	0018      	movs	r0, r3
 800740e:	f7fd fcbb 	bl	8004d88 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &t_Date, RTC_FORMAT_BIN);
 8007412:	230c      	movs	r3, #12
 8007414:	18f9      	adds	r1, r7, r3
 8007416:	4b1d      	ldr	r3, [pc, #116]	; (800748c <Log+0x98>)
 8007418:	2200      	movs	r2, #0
 800741a:	0018      	movs	r0, r3
 800741c:	f7fd fdbe 	bl	8004f9c <HAL_RTC_GetDate>
	_destCharCnt = sprintf(g_LogTxBuf.data + g_LogTxBuf.remainCnt,
 8007420:	4b1b      	ldr	r3, [pc, #108]	; (8007490 <Log+0x9c>)
 8007422:	885b      	ldrh	r3, [r3, #2]
 8007424:	001a      	movs	r2, r3
 8007426:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <Log+0xa0>)
 8007428:	18d0      	adds	r0, r2, r3
						   "[%.2d:%.2d:%.2d]:%s\r\n", t_Time.Hours, t_Time.Minutes,
 800742a:	0022      	movs	r2, r4
 800742c:	18bb      	adds	r3, r7, r2
 800742e:	781b      	ldrb	r3, [r3, #0]
	_destCharCnt = sprintf(g_LogTxBuf.data + g_LogTxBuf.remainCnt,
 8007430:	001c      	movs	r4, r3
						   "[%.2d:%.2d:%.2d]:%s\r\n", t_Time.Hours, t_Time.Minutes,
 8007432:	18bb      	adds	r3, r7, r2
 8007434:	785b      	ldrb	r3, [r3, #1]
	_destCharCnt = sprintf(g_LogTxBuf.data + g_LogTxBuf.remainCnt,
 8007436:	001d      	movs	r5, r3
						   t_Time.Seconds, str);
 8007438:	18bb      	adds	r3, r7, r2
 800743a:	789b      	ldrb	r3, [r3, #2]
	_destCharCnt = sprintf(g_LogTxBuf.data + g_LogTxBuf.remainCnt,
 800743c:	001a      	movs	r2, r3
 800743e:	4916      	ldr	r1, [pc, #88]	; (8007498 <Log+0xa4>)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	9200      	str	r2, [sp, #0]
 8007446:	002b      	movs	r3, r5
 8007448:	0022      	movs	r2, r4
 800744a:	f003 f84f 	bl	800a4ec <siprintf>
 800744e:	0002      	movs	r2, r0
 8007450:	19bb      	adds	r3, r7, r6
 8007452:	801a      	strh	r2, [r3, #0]

	if ((g_LogTxBuf.remainCnt + _destCharCnt) > 512)
 8007454:	4b0e      	ldr	r3, [pc, #56]	; (8007490 <Log+0x9c>)
 8007456:	885b      	ldrh	r3, [r3, #2]
 8007458:	001a      	movs	r2, r3
 800745a:	19bb      	adds	r3, r7, r6
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	18d2      	adds	r2, r2, r3
 8007460:	2380      	movs	r3, #128	; 0x80
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	429a      	cmp	r2, r3
 8007466:	dd02      	ble.n	800746e <Log+0x7a>
		return -1;
 8007468:	2301      	movs	r3, #1
 800746a:	425b      	negs	r3, r3
 800746c:	e009      	b.n	8007482 <Log+0x8e>

	g_LogTxBuf.remainCnt += _destCharCnt;
 800746e:	4b08      	ldr	r3, [pc, #32]	; (8007490 <Log+0x9c>)
 8007470:	885a      	ldrh	r2, [r3, #2]
 8007472:	2326      	movs	r3, #38	; 0x26
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	18d3      	adds	r3, r2, r3
 800747a:	b29a      	uxth	r2, r3
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <Log+0x9c>)
 800747e:	805a      	strh	r2, [r3, #2]
	return 0;
 8007480:	2300      	movs	r3, #0
}
 8007482:	0018      	movs	r0, r3
 8007484:	46bd      	mov	sp, r7
 8007486:	b00b      	add	sp, #44	; 0x2c
 8007488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	20000c44 	.word	0x20000c44
 8007490:	20000540 	.word	0x20000540
 8007494:	20000544 	.word	0x20000544
 8007498:	0800cf44 	.word	0x0800cf44

0800749c <Driver_Log>:

void Driver_Log()
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
	if (g_LogTxBuf.lastTxCnt != 0)
 80074a0:	4b21      	ldr	r3, [pc, #132]	; (8007528 <Driver_Log+0x8c>)
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d023      	beq.n	80074f0 <Driver_Log+0x54>
	{
		if ((HAL_UART_GetState(&LOG_PORT) & HAL_UART_STATE_BUSY_TX) != HAL_UART_STATE_BUSY_TX)
 80074a8:	4b20      	ldr	r3, [pc, #128]	; (800752c <Driver_Log+0x90>)
 80074aa:	0018      	movs	r0, r3
 80074ac:	f7ff f842 	bl	8006534 <HAL_UART_GetState>
 80074b0:	0003      	movs	r3, r0
 80074b2:	2221      	movs	r2, #33	; 0x21
 80074b4:	4013      	ands	r3, r2
 80074b6:	2b21      	cmp	r3, #33	; 0x21
 80074b8:	d01a      	beq.n	80074f0 <Driver_Log+0x54>
		{
			// Last transmit finished
			memcpy(g_LogTxBuf.data, g_LogTxBuf.data + g_LogTxBuf.lastTxCnt,
 80074ba:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <Driver_Log+0x8c>)
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	001a      	movs	r2, r3
 80074c0:	4b1b      	ldr	r3, [pc, #108]	; (8007530 <Driver_Log+0x94>)
 80074c2:	18d1      	adds	r1, r2, r3
				   g_LogTxBuf.remainCnt - g_LogTxBuf.lastTxCnt);
 80074c4:	4b18      	ldr	r3, [pc, #96]	; (8007528 <Driver_Log+0x8c>)
 80074c6:	885b      	ldrh	r3, [r3, #2]
 80074c8:	001a      	movs	r2, r3
 80074ca:	4b17      	ldr	r3, [pc, #92]	; (8007528 <Driver_Log+0x8c>)
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	1ad3      	subs	r3, r2, r3
			memcpy(g_LogTxBuf.data, g_LogTxBuf.data + g_LogTxBuf.lastTxCnt,
 80074d0:	001a      	movs	r2, r3
 80074d2:	4b17      	ldr	r3, [pc, #92]	; (8007530 <Driver_Log+0x94>)
 80074d4:	0018      	movs	r0, r3
 80074d6:	f002 fb7d 	bl	8009bd4 <memcpy>
			g_LogTxBuf.remainCnt -= g_LogTxBuf.lastTxCnt;
 80074da:	4b13      	ldr	r3, [pc, #76]	; (8007528 <Driver_Log+0x8c>)
 80074dc:	885a      	ldrh	r2, [r3, #2]
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <Driver_Log+0x8c>)
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	4b10      	ldr	r3, [pc, #64]	; (8007528 <Driver_Log+0x8c>)
 80074e8:	805a      	strh	r2, [r3, #2]
			g_LogTxBuf.lastTxCnt = 0;
 80074ea:	4b0f      	ldr	r3, [pc, #60]	; (8007528 <Driver_Log+0x8c>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	801a      	strh	r2, [r3, #0]
		}
	}
	if (g_LogTxBuf.remainCnt > 0)
 80074f0:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <Driver_Log+0x8c>)
 80074f2:	885b      	ldrh	r3, [r3, #2]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d013      	beq.n	8007520 <Driver_Log+0x84>
	{
		if ((HAL_UART_GetState(&LOG_PORT) & HAL_UART_STATE_BUSY_TX) != HAL_UART_STATE_BUSY_TX)
 80074f8:	4b0c      	ldr	r3, [pc, #48]	; (800752c <Driver_Log+0x90>)
 80074fa:	0018      	movs	r0, r3
 80074fc:	f7ff f81a 	bl	8006534 <HAL_UART_GetState>
 8007500:	0003      	movs	r3, r0
 8007502:	2221      	movs	r2, #33	; 0x21
 8007504:	4013      	ands	r3, r2
 8007506:	2b21      	cmp	r3, #33	; 0x21
 8007508:	d00a      	beq.n	8007520 <Driver_Log+0x84>
		{
			HAL_UART_Transmit_DMA(&LOG_PORT, (uint8_t *)g_LogTxBuf.data,
 800750a:	4b07      	ldr	r3, [pc, #28]	; (8007528 <Driver_Log+0x8c>)
 800750c:	885a      	ldrh	r2, [r3, #2]
 800750e:	4908      	ldr	r1, [pc, #32]	; (8007530 <Driver_Log+0x94>)
 8007510:	4b06      	ldr	r3, [pc, #24]	; (800752c <Driver_Log+0x90>)
 8007512:	0018      	movs	r0, r3
 8007514:	f7fe fd40 	bl	8005f98 <HAL_UART_Transmit_DMA>
								  g_LogTxBuf.remainCnt);
			g_LogTxBuf.lastTxCnt = g_LogTxBuf.remainCnt;
 8007518:	4b03      	ldr	r3, [pc, #12]	; (8007528 <Driver_Log+0x8c>)
 800751a:	885a      	ldrh	r2, [r3, #2]
 800751c:	4b02      	ldr	r3, [pc, #8]	; (8007528 <Driver_Log+0x8c>)
 800751e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8007520:	46c0      	nop			; (mov r8, r8)
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	20000540 	.word	0x20000540
 800752c:	20000eb4 	.word	0x20000eb4
 8007530:	20000544 	.word	0x20000544

08007534 <Convert2CharToBCD>:

/*�??2位字符数字转换为BCD编码数字*/
uint8_t Convert2CharToBCD(char *str)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	uint8_t t_High = *str;
 800753c:	210f      	movs	r1, #15
 800753e:	187b      	adds	r3, r7, r1
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	7812      	ldrb	r2, [r2, #0]
 8007544:	701a      	strb	r2, [r3, #0]
	uint8_t t_Low = *(str + 1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	230e      	movs	r3, #14
 800754c:	18fb      	adds	r3, r7, r3
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	701a      	strb	r2, [r3, #0]
	uint8_t t_ReturnVal;
	if ((t_High > 57) || (t_High < 48))
 8007552:	187b      	adds	r3, r7, r1
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b39      	cmp	r3, #57	; 0x39
 8007558:	d803      	bhi.n	8007562 <Convert2CharToBCD+0x2e>
 800755a:	187b      	adds	r3, r7, r1
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b2f      	cmp	r3, #47	; 0x2f
 8007560:	d801      	bhi.n	8007566 <Convert2CharToBCD+0x32>
		return 0;
 8007562:	2300      	movs	r3, #0
 8007564:	e01d      	b.n	80075a2 <Convert2CharToBCD+0x6e>
	if ((t_Low > 57) || (t_Low < 48))
 8007566:	220e      	movs	r2, #14
 8007568:	18bb      	adds	r3, r7, r2
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b39      	cmp	r3, #57	; 0x39
 800756e:	d803      	bhi.n	8007578 <Convert2CharToBCD+0x44>
 8007570:	18bb      	adds	r3, r7, r2
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b2f      	cmp	r3, #47	; 0x2f
 8007576:	d801      	bhi.n	800757c <Convert2CharToBCD+0x48>
		return 0;
 8007578:	2300      	movs	r3, #0
 800757a:	e012      	b.n	80075a2 <Convert2CharToBCD+0x6e>
	t_ReturnVal = ((t_Low - 48) & 0xF) | (((t_High - 48) & 0xF) << 4);
 800757c:	230e      	movs	r3, #14
 800757e:	18fb      	adds	r3, r7, r3
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	b25b      	sxtb	r3, r3
 8007584:	220f      	movs	r2, #15
 8007586:	4013      	ands	r3, r2
 8007588:	b25a      	sxtb	r2, r3
 800758a:	230f      	movs	r3, #15
 800758c:	18fb      	adds	r3, r7, r3
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	b25b      	sxtb	r3, r3
 8007594:	4313      	orrs	r3, r2
 8007596:	b25a      	sxtb	r2, r3
 8007598:	210d      	movs	r1, #13
 800759a:	187b      	adds	r3, r7, r1
 800759c:	701a      	strb	r2, [r3, #0]
	return t_ReturnVal;
 800759e:	187b      	adds	r3, r7, r1
 80075a0:	781b      	ldrb	r3, [r3, #0]
}
 80075a2:	0018      	movs	r0, r3
 80075a4:	46bd      	mov	sp, r7
 80075a6:	b004      	add	sp, #16
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <CorrectRtcTime>:

/*根据传入的字符串（M5310A应答）设置本地时�??*/
void CorrectRtcTime(char *str)
{
 80075ac:	b5b0      	push	{r4, r5, r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	// Decode data from begin positon
	//+CCLK:19/06/26,12:45:05+32
	// YY:6-7 MM:9-10 DD:12-13
	// hh:15-16  mm:18-19  ss: 21-22
	RTC_TimeTypeDef sTime = {0};
 80075b4:	240c      	movs	r4, #12
 80075b6:	193b      	adds	r3, r7, r4
 80075b8:	0018      	movs	r0, r3
 80075ba:	2314      	movs	r3, #20
 80075bc:	001a      	movs	r2, r3
 80075be:	2100      	movs	r1, #0
 80075c0:	f002 fb11 	bl	8009be6 <memset>
	RTC_DateTypeDef DateToUpdate = {0};
 80075c4:	2508      	movs	r5, #8
 80075c6:	197b      	adds	r3, r7, r5
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]

	DateToUpdate.Year = Convert2CharToBCD(str + 6);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3306      	adds	r3, #6
 80075d0:	0018      	movs	r0, r3
 80075d2:	f7ff ffaf 	bl	8007534 <Convert2CharToBCD>
 80075d6:	0003      	movs	r3, r0
 80075d8:	001a      	movs	r2, r3
 80075da:	197b      	adds	r3, r7, r5
 80075dc:	70da      	strb	r2, [r3, #3]
	DateToUpdate.Month = Convert2CharToBCD(str + 7);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3307      	adds	r3, #7
 80075e2:	0018      	movs	r0, r3
 80075e4:	f7ff ffa6 	bl	8007534 <Convert2CharToBCD>
 80075e8:	0003      	movs	r3, r0
 80075ea:	001a      	movs	r2, r3
 80075ec:	197b      	adds	r3, r7, r5
 80075ee:	705a      	strb	r2, [r3, #1]
	DateToUpdate.Date = Convert2CharToBCD(str + 12);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	330c      	adds	r3, #12
 80075f4:	0018      	movs	r0, r3
 80075f6:	f7ff ff9d 	bl	8007534 <Convert2CharToBCD>
 80075fa:	0003      	movs	r3, r0
 80075fc:	001a      	movs	r2, r3
 80075fe:	197b      	adds	r3, r7, r5
 8007600:	709a      	strb	r2, [r3, #2]

	sTime.Hours = Convert2CharToBCD(str + 15);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	330f      	adds	r3, #15
 8007606:	0018      	movs	r0, r3
 8007608:	f7ff ff94 	bl	8007534 <Convert2CharToBCD>
 800760c:	0003      	movs	r3, r0
 800760e:	001a      	movs	r2, r3
 8007610:	193b      	adds	r3, r7, r4
 8007612:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = Convert2CharToBCD(str + 18);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3312      	adds	r3, #18
 8007618:	0018      	movs	r0, r3
 800761a:	f7ff ff8b 	bl	8007534 <Convert2CharToBCD>
 800761e:	0003      	movs	r3, r0
 8007620:	001a      	movs	r2, r3
 8007622:	193b      	adds	r3, r7, r4
 8007624:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = Convert2CharToBCD(str + 21);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3315      	adds	r3, #21
 800762a:	0018      	movs	r0, r3
 800762c:	f7ff ff82 	bl	8007534 <Convert2CharToBCD>
 8007630:	0003      	movs	r3, r0
 8007632:	001a      	movs	r2, r3
 8007634:	193b      	adds	r3, r7, r4
 8007636:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8007638:	1939      	adds	r1, r7, r4
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <CorrectRtcTime+0xac>)
 800763c:	2201      	movs	r2, #1
 800763e:	0018      	movs	r0, r3
 8007640:	f7fd fade 	bl	8004c00 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD);
 8007644:	1979      	adds	r1, r7, r5
 8007646:	4b04      	ldr	r3, [pc, #16]	; (8007658 <CorrectRtcTime+0xac>)
 8007648:	2201      	movs	r2, #1
 800764a:	0018      	movs	r0, r3
 800764c:	f7fd fbf8 	bl	8004e40 <HAL_RTC_SetDate>
}
 8007650:	46c0      	nop			; (mov r8, r8)
 8007652:	46bd      	mov	sp, r7
 8007654:	b008      	add	sp, #32
 8007656:	bdb0      	pop	{r4, r5, r7, pc}
 8007658:	20000c44 	.word	0x20000c44

0800765c <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
	// GPIO_InitTypeDef GPIO_InitStruct = {0};
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	0018      	movs	r0, r3
 8007668:	f7fd fe42 	bl	80052f0 <HAL_RTCEx_DeactivateWakeUpTimer>

	// HAL_Delay(100);
	Log("Sys Stop<1>:Exit stop mode.******");
 800766c:	4b03      	ldr	r3, [pc, #12]	; (800767c <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 800766e:	0018      	movs	r0, r3
 8007670:	f7ff fec0 	bl	80073f4 <Log>
}
 8007674:	46c0      	nop			; (mov r8, r8)
 8007676:	46bd      	mov	sp, r7
 8007678:	b002      	add	sp, #8
 800767a:	bd80      	pop	{r7, pc}
 800767c:	0800cf5c 	.word	0x0800cf5c

08007680 <HardwareLoop10ms>:

/**
 * @brief Hardware service loop (10 ms)
 */
void HardwareLoop10ms()
{
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
	Driver_Log();
 8007684:	f7ff ff0a 	bl	800749c <Driver_Log>
}
 8007688:	46c0      	nop			; (mov r8, r8)
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <HardwareInit>:

/**
 * @brief Hardware service init
 */
void HardwareInit()
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
	//初始化全�??变量
	Init_SampData();
 8007694:	f000 fa0e 	bl	8007ab4 <Init_SampData>
	Proc_Init();
 8007698:	f000 f97a 	bl	8007990 <Proc_Init>
	Act_ResetProc();
 800769c:	f000 f98e 	bl	80079bc <Act_ResetProc>
	Init_MDB_AUTO();
 80076a0:	f000 ff3a 	bl	8008518 <Init_MDB_AUTO>
	MDB_ResetControl();
 80076a4:	f000 ff08 	bl	80084b8 <MDB_ResetControl>

	HAL_ADC_Stop(&hadc);
 80076a8:	4b4d      	ldr	r3, [pc, #308]	; (80077e0 <HardwareInit+0x150>)
 80076aa:	0018      	movs	r0, r3
 80076ac:	f7fb fb82 	bl	8002db4 <HAL_ADC_Stop>

	M5310A_RestartRx();
 80076b0:	f000 fbca 	bl	8007e48 <M5310A_RestartRx>
	Log("--------------------------------------");
 80076b4:	4b4b      	ldr	r3, [pc, #300]	; (80077e4 <HardwareInit+0x154>)
 80076b6:	0018      	movs	r0, r3
 80076b8:	f7ff fe9c 	bl	80073f4 <Log>
	Log("System initialized.");
 80076bc:	4b4a      	ldr	r3, [pc, #296]	; (80077e8 <HardwareInit+0x158>)
 80076be:	0018      	movs	r0, r3
 80076c0:	f7ff fe98 	bl	80073f4 <Log>
	Log("ADC stop.");
 80076c4:	4b49      	ldr	r3, [pc, #292]	; (80077ec <HardwareInit+0x15c>)
 80076c6:	0018      	movs	r0, r3
 80076c8:	f7ff fe94 	bl	80073f4 <Log>
	sprintf(PostBuffer, "Device Type %s  ,Device Name %s",
 80076cc:	4b48      	ldr	r3, [pc, #288]	; (80077f0 <HardwareInit+0x160>)
 80076ce:	4a49      	ldr	r2, [pc, #292]	; (80077f4 <HardwareInit+0x164>)
 80076d0:	4949      	ldr	r1, [pc, #292]	; (80077f8 <HardwareInit+0x168>)
 80076d2:	484a      	ldr	r0, [pc, #296]	; (80077fc <HardwareInit+0x16c>)
 80076d4:	f002 ff0a 	bl	800a4ec <siprintf>
			EQPTYPE_STR, EQPTNAME_STR);
	HAL_GPIO_WritePin(BRESET_GPIO_Port, BRESET_Pin, GPIO_PIN_SET);
 80076d8:	2380      	movs	r3, #128	; 0x80
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	4848      	ldr	r0, [pc, #288]	; (8007800 <HardwareInit+0x170>)
 80076de:	2201      	movs	r2, #1
 80076e0:	0019      	movs	r1, r3
 80076e2:	f7fc fac4 	bl	8003c6e <HAL_GPIO_WritePin>
	Log(PostBuffer);
 80076e6:	4b45      	ldr	r3, [pc, #276]	; (80077fc <HardwareInit+0x16c>)
 80076e8:	0018      	movs	r0, r3
 80076ea:	f7ff fe83 	bl	80073f4 <Log>
	HAL_Delay(10000);
 80076ee:	4b45      	ldr	r3, [pc, #276]	; (8007804 <HardwareInit+0x174>)
 80076f0:	0018      	movs	r0, r3
 80076f2:	f7fb f979 	bl	80029e8 <HAL_Delay>
	Init_ADXL362();
 80076f6:	f7ff fd43 	bl	8007180 <Init_ADXL362>
	//网络校时
	while (1)
	{
		Proc_CorrectRtc();
 80076fa:	f000 fe3f 	bl	800837c <Proc_CorrectRtc>
		HAL_Delay(1000);
 80076fe:	23fa      	movs	r3, #250	; 0xfa
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	0018      	movs	r0, r3
 8007704:	f7fb f970 	bl	80029e8 <HAL_Delay>
		if (g_ProcState.currentStep >= g_ProcState.maxStep)
 8007708:	4b3f      	ldr	r3, [pc, #252]	; (8007808 <HardwareInit+0x178>)
 800770a:	789a      	ldrb	r2, [r3, #2]
 800770c:	4b3e      	ldr	r3, [pc, #248]	; (8007808 <HardwareInit+0x178>)
 800770e:	78db      	ldrb	r3, [r3, #3]
 8007710:	429a      	cmp	r2, r3
 8007712:	d304      	bcc.n	800771e <HardwareInit+0x8e>
		{
			Log("Finished time correct sequency.");
 8007714:	4b3d      	ldr	r3, [pc, #244]	; (800780c <HardwareInit+0x17c>)
 8007716:	0018      	movs	r0, r3
 8007718:	f7ff fe6c 	bl	80073f4 <Log>
			break;
 800771c:	e017      	b.n	800774e <HardwareInit+0xbe>
		}
		if (g_ProcState.passedTimeMs >= 8000)
 800771e:	4b3a      	ldr	r3, [pc, #232]	; (8007808 <HardwareInit+0x178>)
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	23fa      	movs	r3, #250	; 0xfa
 8007724:	015b      	lsls	r3, r3, #5
 8007726:	429a      	cmp	r2, r3
 8007728:	d304      	bcc.n	8007734 <HardwareInit+0xa4>
		{
			Log("Time correction overtime.");
 800772a:	4b39      	ldr	r3, [pc, #228]	; (8007810 <HardwareInit+0x180>)
 800772c:	0018      	movs	r0, r3
 800772e:	f7ff fe61 	bl	80073f4 <Log>
			break;
 8007732:	e00c      	b.n	800774e <HardwareInit+0xbe>
		}
		HAL_Delay(1000);
 8007734:	23fa      	movs	r3, #250	; 0xfa
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	0018      	movs	r0, r3
 800773a:	f7fb f955 	bl	80029e8 <HAL_Delay>
		g_ProcState.passedTimeMs += 2000;
 800773e:	4b32      	ldr	r3, [pc, #200]	; (8007808 <HardwareInit+0x178>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	22fa      	movs	r2, #250	; 0xfa
 8007744:	00d2      	lsls	r2, r2, #3
 8007746:	189a      	adds	r2, r3, r2
 8007748:	4b2f      	ldr	r3, [pc, #188]	; (8007808 <HardwareInit+0x178>)
 800774a:	609a      	str	r2, [r3, #8]
		Proc_CorrectRtc();
 800774c:	e7d5      	b.n	80076fa <HardwareInit+0x6a>
	}
	Act_ResetProc();
 800774e:	f000 f935 	bl	80079bc <Act_ResetProc>
	g_ProcState.currentSeqNo = 0;
 8007752:	4b2d      	ldr	r3, [pc, #180]	; (8007808 <HardwareInit+0x178>)
 8007754:	2200      	movs	r2, #0
 8007756:	701a      	strb	r2, [r3, #0]
	//配置NB-IOT模块 M5310A的PSM（节能）模式
	while (1)
	{
		Proc_ConfigPsm();
 8007758:	f000 fe64 	bl	8008424 <Proc_ConfigPsm>
		HAL_Delay(500);
 800775c:	23fa      	movs	r3, #250	; 0xfa
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	0018      	movs	r0, r3
 8007762:	f7fb f941 	bl	80029e8 <HAL_Delay>
		if (g_ProcState.currentStep >= g_ProcState.maxStep)
 8007766:	4b28      	ldr	r3, [pc, #160]	; (8007808 <HardwareInit+0x178>)
 8007768:	789a      	ldrb	r2, [r3, #2]
 800776a:	4b27      	ldr	r3, [pc, #156]	; (8007808 <HardwareInit+0x178>)
 800776c:	78db      	ldrb	r3, [r3, #3]
 800776e:	429a      	cmp	r2, r3
 8007770:	d304      	bcc.n	800777c <HardwareInit+0xec>
		{
			Log("Finished PSM config sequency.");
 8007772:	4b28      	ldr	r3, [pc, #160]	; (8007814 <HardwareInit+0x184>)
 8007774:	0018      	movs	r0, r3
 8007776:	f7ff fe3d 	bl	80073f4 <Log>
			break;
 800777a:	e017      	b.n	80077ac <HardwareInit+0x11c>
		}
		if (g_ProcState.passedTimeMs >= 8000)
 800777c:	4b22      	ldr	r3, [pc, #136]	; (8007808 <HardwareInit+0x178>)
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	23fa      	movs	r3, #250	; 0xfa
 8007782:	015b      	lsls	r3, r3, #5
 8007784:	429a      	cmp	r2, r3
 8007786:	d304      	bcc.n	8007792 <HardwareInit+0x102>
		{
			Log("PSM config overtime.");
 8007788:	4b23      	ldr	r3, [pc, #140]	; (8007818 <HardwareInit+0x188>)
 800778a:	0018      	movs	r0, r3
 800778c:	f7ff fe32 	bl	80073f4 <Log>
			break;
 8007790:	e00c      	b.n	80077ac <HardwareInit+0x11c>
		}
		HAL_Delay(500);
 8007792:	23fa      	movs	r3, #250	; 0xfa
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	0018      	movs	r0, r3
 8007798:	f7fb f926 	bl	80029e8 <HAL_Delay>
		g_ProcState.passedTimeMs += 1000;
 800779c:	4b1a      	ldr	r3, [pc, #104]	; (8007808 <HardwareInit+0x178>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	22fa      	movs	r2, #250	; 0xfa
 80077a2:	0092      	lsls	r2, r2, #2
 80077a4:	189a      	adds	r2, r3, r2
 80077a6:	4b18      	ldr	r3, [pc, #96]	; (8007808 <HardwareInit+0x178>)
 80077a8:	609a      	str	r2, [r3, #8]
		Proc_ConfigPsm();
 80077aa:	e7d5      	b.n	8007758 <HardwareInit+0xc8>
	}
	//关闭水质传感器的两路电源
	HAL_GPIO_WritePin(PWR1_EN_GPIO_Port, PWR1_EN_Pin, GPIO_PIN_RESET);
 80077ac:	2380      	movs	r3, #128	; 0x80
 80077ae:	0219      	lsls	r1, r3, #8
 80077b0:	23a0      	movs	r3, #160	; 0xa0
 80077b2:	05db      	lsls	r3, r3, #23
 80077b4:	2200      	movs	r2, #0
 80077b6:	0018      	movs	r0, r3
 80077b8:	f7fc fa59 	bl	8003c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWR2_EN_GPIO_Port, PWR2_EN_Pin, GPIO_PIN_RESET);
 80077bc:	4b10      	ldr	r3, [pc, #64]	; (8007800 <HardwareInit+0x170>)
 80077be:	2200      	movs	r2, #0
 80077c0:	2180      	movs	r1, #128	; 0x80
 80077c2:	0018      	movs	r0, r3
 80077c4:	f7fc fa53 	bl	8003c6e <HAL_GPIO_WritePin>
	Log("Turn off power 1+2.");
 80077c8:	4b14      	ldr	r3, [pc, #80]	; (800781c <HardwareInit+0x18c>)
 80077ca:	0018      	movs	r0, r3
 80077cc:	f7ff fe12 	bl	80073f4 <Log>

	Act_ResetProc();
 80077d0:	f000 f8f4 	bl	80079bc <Act_ResetProc>
	g_ProcState.currentSeqNo = 0;
 80077d4:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <HardwareInit+0x178>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	701a      	strb	r2, [r3, #0]
}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20000f34 	.word	0x20000f34
 80077e4:	0800cf80 	.word	0x0800cf80
 80077e8:	0800cfa8 	.word	0x0800cfa8
 80077ec:	0800cfbc 	.word	0x0800cfbc
 80077f0:	0800cfc8 	.word	0x0800cfc8
 80077f4:	0800cfd4 	.word	0x0800cfd4
 80077f8:	0800cfdc 	.word	0x0800cfdc
 80077fc:	20000a44 	.word	0x20000a44
 8007800:	50000400 	.word	0x50000400
 8007804:	00002710 	.word	0x00002710
 8007808:	20000e28 	.word	0x20000e28
 800780c:	0800cffc 	.word	0x0800cffc
 8007810:	0800d01c 	.word	0x0800d01c
 8007814:	0800d038 	.word	0x0800d038
 8007818:	0800d058 	.word	0x0800d058
 800781c:	0800d070 	.word	0x0800d070

08007820 <HardwareLowlevelLoop>:

/*主要循环*/
void HardwareLowlevelLoop()
{
 8007820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007822:	46ce      	mov	lr, r9
 8007824:	4647      	mov	r7, r8
 8007826:	b580      	push	{r7, lr}
 8007828:	b0b3      	sub	sp, #204	; 0xcc
 800782a:	af0c      	add	r7, sp, #48	; 0x30
	char _tmpstr[128];
	HAL_Delay(CIRCLE_GAP_MS / 2);
 800782c:	2019      	movs	r0, #25
 800782e:	f7fb f8db 	bl	80029e8 <HAL_Delay>
	// 顺序选择
	switch (g_ProcState.currentSeqNo)
 8007832:	4b52      	ldr	r3, [pc, #328]	; (800797c <HardwareLowlevelLoop+0x15c>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b04      	cmp	r3, #4
 8007838:	d816      	bhi.n	8007868 <HardwareLowlevelLoop+0x48>
 800783a:	009a      	lsls	r2, r3, #2
 800783c:	4b50      	ldr	r3, [pc, #320]	; (8007980 <HardwareLowlevelLoop+0x160>)
 800783e:	18d3      	adds	r3, r2, r3
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	469f      	mov	pc, r3
	{
	case 0:
		// 采集电池电压和角度等信息
		Proc_SampData();
 8007844:	f000 f95e 	bl	8007b04 <Proc_SampData>
		break;
 8007848:	e00f      	b.n	800786a <HardwareLowlevelLoop+0x4a>
	case 1:
		// 读取传感器采集的数据
		Proc_MDBread();
 800784a:	f000 ffa5 	bl	8008798 <Proc_MDBread>
		break;
 800784e:	e00c      	b.n	800786a <HardwareLowlevelLoop+0x4a>
	case 2:
		// 生成JSON报文
		Proc_GenerateJson();
 8007850:	f000 fa28 	bl	8007ca4 <Proc_GenerateJson>
		break;
 8007854:	e009      	b.n	800786a <HardwareLowlevelLoop+0x4a>
	case 3:
		// 上发数据到服务器
		Proc_HttpPost();
 8007856:	f000 fb0b 	bl	8007e70 <Proc_HttpPost>
		break;
 800785a:	e006      	b.n	800786a <HardwareLowlevelLoop+0x4a>
	case 4:
		// 休眠
		HAL_Delay(100);
 800785c:	2064      	movs	r0, #100	; 0x64
 800785e:	f7fb f8c3 	bl	80029e8 <HAL_Delay>
		Proc_SysStop();
 8007862:	f000 fcfb 	bl	800825c <Proc_SysStop>
		break;
 8007866:	e000      	b.n	800786a <HardwareLowlevelLoop+0x4a>
	default:
		break;
 8007868:	46c0      	nop			; (mov r8, r8)
	}

	HAL_Delay(CIRCLE_GAP_MS / 2);
 800786a:	2019      	movs	r0, #25
 800786c:	f7fb f8bc 	bl	80029e8 <HAL_Delay>

	// 判断下次循环时应该进行的流程
	if (g_ProcState.currentStep >= g_ProcState.maxStep)
 8007870:	4b42      	ldr	r3, [pc, #264]	; (800797c <HardwareLowlevelLoop+0x15c>)
 8007872:	789a      	ldrb	r2, [r3, #2]
 8007874:	4b41      	ldr	r3, [pc, #260]	; (800797c <HardwareLowlevelLoop+0x15c>)
 8007876:	78db      	ldrb	r3, [r3, #3]
 8007878:	429a      	cmp	r2, r3
 800787a:	d35f      	bcc.n	800793c <HardwareLowlevelLoop+0x11c>
	{
		// 当前流程的所有步骤都已执行完，流程复位
		Act_ResetProc();
 800787c:	f000 f89e 	bl	80079bc <Act_ResetProc>
		if (g_ProcState.currentSeqNo >= 4)
 8007880:	4b3e      	ldr	r3, [pc, #248]	; (800797c <HardwareLowlevelLoop+0x15c>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d903      	bls.n	8007890 <HardwareLowlevelLoop+0x70>
		{
			// 流程4（休眠）已运行完，从流程0重新开始
			g_ProcState.currentSeqNo = 0;
 8007888:	4b3c      	ldr	r3, [pc, #240]	; (800797c <HardwareLowlevelLoop+0x15c>)
 800788a:	2200      	movs	r2, #0
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	e055      	b.n	800793c <HardwareLowlevelLoop+0x11c>
		}
		else if (g_ProcState.currentSeqNo == 2)
 8007890:	4b3a      	ldr	r3, [pc, #232]	; (800797c <HardwareLowlevelLoop+0x15c>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d151      	bne.n	800793c <HardwareLowlevelLoop+0x11c>
		{
			//从调试口输出传感器数据
			sprintf(_tmpstr, "Sensor Data:\r\n"
							 "Sen\tX\tY\tZ\tRo\tYa\tPi\tHy\tBa\r\n"
							 "Val\t%4d\t%4d\t%4d\t%3.3f\t%3.3f\t%3.3f\t%5.1f\t%3.3f",
					g_SensorData.gravity1, g_SensorData.gravity2,
 8007898:	4b3a      	ldr	r3, [pc, #232]	; (8007984 <HardwareLowlevelLoop+0x164>)
 800789a:	220c      	movs	r2, #12
 800789c:	5e9b      	ldrsh	r3, [r3, r2]
			sprintf(_tmpstr, "Sensor Data:\r\n"
 800789e:	4698      	mov	r8, r3
					g_SensorData.gravity1, g_SensorData.gravity2,
 80078a0:	4b38      	ldr	r3, [pc, #224]	; (8007984 <HardwareLowlevelLoop+0x164>)
 80078a2:	220e      	movs	r2, #14
 80078a4:	5e9b      	ldrsh	r3, [r3, r2]
			sprintf(_tmpstr, "Sensor Data:\r\n"
 80078a6:	4699      	mov	r9, r3
					g_SensorData.gravity3, g_SensorData.roll,
 80078a8:	4b36      	ldr	r3, [pc, #216]	; (8007984 <HardwareLowlevelLoop+0x164>)
 80078aa:	2210      	movs	r2, #16
 80078ac:	5e9b      	ldrsh	r3, [r3, r2]
			sprintf(_tmpstr, "Sensor Data:\r\n"
 80078ae:	001e      	movs	r6, r3
					g_SensorData.gravity3, g_SensorData.roll,
 80078b0:	4b34      	ldr	r3, [pc, #208]	; (8007984 <HardwareLowlevelLoop+0x164>)
 80078b2:	685b      	ldr	r3, [r3, #4]
			sprintf(_tmpstr, "Sensor Data:\r\n"
 80078b4:	1c18      	adds	r0, r3, #0
 80078b6:	f7fa ff67 	bl	8002788 <__aeabi_f2d>
 80078ba:	0004      	movs	r4, r0
 80078bc:	000d      	movs	r5, r1
					g_SensorData.yaw, g_SensorData.pitch,
 80078be:	4b31      	ldr	r3, [pc, #196]	; (8007984 <HardwareLowlevelLoop+0x164>)
 80078c0:	689b      	ldr	r3, [r3, #8]
			sprintf(_tmpstr, "Sensor Data:\r\n"
 80078c2:	1c18      	adds	r0, r3, #0
 80078c4:	f7fa ff60 	bl	8002788 <__aeabi_f2d>
 80078c8:	6138      	str	r0, [r7, #16]
 80078ca:	6179      	str	r1, [r7, #20]
					g_SensorData.yaw, g_SensorData.pitch,
 80078cc:	4b2d      	ldr	r3, [pc, #180]	; (8007984 <HardwareLowlevelLoop+0x164>)
 80078ce:	681b      	ldr	r3, [r3, #0]
			sprintf(_tmpstr, "Sensor Data:\r\n"
 80078d0:	1c18      	adds	r0, r3, #0
 80078d2:	f7fa ff59 	bl	8002788 <__aeabi_f2d>
 80078d6:	60b8      	str	r0, [r7, #8]
 80078d8:	60f9      	str	r1, [r7, #12]
					g_SensorData.hyetometerVal, g_SensorData.BatVoltage);
 80078da:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <HardwareLowlevelLoop+0x164>)
 80078dc:	699b      	ldr	r3, [r3, #24]
			sprintf(_tmpstr, "Sensor Data:\r\n"
 80078de:	1c18      	adds	r0, r3, #0
 80078e0:	f7fa ff52 	bl	8002788 <__aeabi_f2d>
 80078e4:	6038      	str	r0, [r7, #0]
 80078e6:	6079      	str	r1, [r7, #4]
					g_SensorData.hyetometerVal, g_SensorData.BatVoltage);
 80078e8:	4b26      	ldr	r3, [pc, #152]	; (8007984 <HardwareLowlevelLoop+0x164>)
 80078ea:	69db      	ldr	r3, [r3, #28]
			sprintf(_tmpstr, "Sensor Data:\r\n"
 80078ec:	1c18      	adds	r0, r3, #0
 80078ee:	f7fa ff4b 	bl	8002788 <__aeabi_f2d>
 80078f2:	0002      	movs	r2, r0
 80078f4:	000b      	movs	r3, r1
 80078f6:	4924      	ldr	r1, [pc, #144]	; (8007988 <HardwareLowlevelLoop+0x168>)
 80078f8:	2018      	movs	r0, #24
 80078fa:	1838      	adds	r0, r7, r0
 80078fc:	920a      	str	r2, [sp, #40]	; 0x28
 80078fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	9208      	str	r2, [sp, #32]
 8007906:	9309      	str	r3, [sp, #36]	; 0x24
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	9206      	str	r2, [sp, #24]
 800790e:	9307      	str	r3, [sp, #28]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	9204      	str	r2, [sp, #16]
 8007916:	9305      	str	r3, [sp, #20]
 8007918:	9402      	str	r4, [sp, #8]
 800791a:	9503      	str	r5, [sp, #12]
 800791c:	9600      	str	r6, [sp, #0]
 800791e:	464b      	mov	r3, r9
 8007920:	4642      	mov	r2, r8
 8007922:	f002 fde3 	bl	800a4ec <siprintf>
			Log(_tmpstr);
 8007926:	2318      	movs	r3, #24
 8007928:	18fb      	adds	r3, r7, r3
 800792a:	0018      	movs	r0, r3
 800792c:	f7ff fd62 	bl	80073f4 <Log>
			// 进入下一个流程
			g_ProcState.currentSeqNo++;
 8007930:	4b12      	ldr	r3, [pc, #72]	; (800797c <HardwareLowlevelLoop+0x15c>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	b2da      	uxtb	r2, r3
 8007938:	4b10      	ldr	r3, [pc, #64]	; (800797c <HardwareLowlevelLoop+0x15c>)
 800793a:	701a      	strb	r2, [r3, #0]
		}
	}

	// 判断流程是否超时
	if (g_ProcState.passedTimeMs < g_ProcState.maxOverTimeMs)
 800793c:	4b0f      	ldr	r3, [pc, #60]	; (800797c <HardwareLowlevelLoop+0x15c>)
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	4b0e      	ldr	r3, [pc, #56]	; (800797c <HardwareLowlevelLoop+0x15c>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	429a      	cmp	r2, r3
 8007946:	d206      	bcs.n	8007956 <HardwareLowlevelLoop+0x136>
	{
		// 没有超时，则记录时间
		g_ProcState.passedTimeMs += CIRCLE_GAP_MS;
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <HardwareLowlevelLoop+0x15c>)
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	3332      	adds	r3, #50	; 0x32
 800794e:	001a      	movs	r2, r3
 8007950:	4b0a      	ldr	r3, [pc, #40]	; (800797c <HardwareLowlevelLoop+0x15c>)
 8007952:	609a      	str	r2, [r3, #8]
		HAL_Delay(200);
		Log("Error:Sequency step overtime.");
		Act_ResetProc();
		g_ProcState.currentSeqNo = 4;
	}
}
 8007954:	e00b      	b.n	800796e <HardwareLowlevelLoop+0x14e>
		HAL_Delay(200);
 8007956:	20c8      	movs	r0, #200	; 0xc8
 8007958:	f7fb f846 	bl	80029e8 <HAL_Delay>
		Log("Error:Sequency step overtime.");
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <HardwareLowlevelLoop+0x16c>)
 800795e:	0018      	movs	r0, r3
 8007960:	f7ff fd48 	bl	80073f4 <Log>
		Act_ResetProc();
 8007964:	f000 f82a 	bl	80079bc <Act_ResetProc>
		g_ProcState.currentSeqNo = 4;
 8007968:	4b04      	ldr	r3, [pc, #16]	; (800797c <HardwareLowlevelLoop+0x15c>)
 800796a:	2204      	movs	r2, #4
 800796c:	701a      	strb	r2, [r3, #0]
}
 800796e:	46c0      	nop			; (mov r8, r8)
 8007970:	46bd      	mov	sp, r7
 8007972:	b027      	add	sp, #156	; 0x9c
 8007974:	bcc0      	pop	{r6, r7}
 8007976:	46b9      	mov	r9, r7
 8007978:	46b0      	mov	r8, r6
 800797a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800797c:	20000e28 	.word	0x20000e28
 8007980:	0800d968 	.word	0x0800d968
 8007984:	20000a0c 	.word	0x20000a0c
 8007988:	0800d084 	.word	0x0800d084
 800798c:	0800d0dc 	.word	0x0800d0dc

08007990 <Proc_Init>:
 * @brief: initialize all process
 * 初始化流�??
 *
 */
void Proc_Init()
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
	g_ProcState.currentStep = 0;
 8007994:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <Proc_Init+0x28>)
 8007996:	2200      	movs	r2, #0
 8007998:	709a      	strb	r2, [r3, #2]
	g_ProcState.maxStep = 0;
 800799a:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <Proc_Init+0x28>)
 800799c:	2200      	movs	r2, #0
 800799e:	70da      	strb	r2, [r3, #3]
	g_ProcState.currentSeqNo = 0;
 80079a0:	4b05      	ldr	r3, [pc, #20]	; (80079b8 <Proc_Init+0x28>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]
	g_ProcState.maxSeqNo = 5;
 80079a6:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <Proc_Init+0x28>)
 80079a8:	2205      	movs	r2, #5
 80079aa:	705a      	strb	r2, [r3, #1]
	Act_ResetProc();
 80079ac:	f000 f806 	bl	80079bc <Act_ResetProc>
}
 80079b0:	46c0      	nop			; (mov r8, r8)
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	20000e28 	.word	0x20000e28

080079bc <Act_ResetProc>:
/*
 * @brief Reset process state
 *  复位流程超时、计�??
 */
void Act_ResetProc()
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
	g_ProcState.currentStep = 0;
 80079c0:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <Act_ResetProc+0x28>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	709a      	strb	r2, [r3, #2]
	g_ProcState.passedTimeMs = 0;
 80079c6:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <Act_ResetProc+0x28>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	609a      	str	r2, [r3, #8]
	g_ProcState.maxStep = 0;
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <Act_ResetProc+0x28>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	70da      	strb	r2, [r3, #3]
	g_ProcState.passedTimeMs = 0;
 80079d2:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <Act_ResetProc+0x28>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	609a      	str	r2, [r3, #8]
	g_ProcState.maxOverTimeMs = 20000;
 80079d8:	4b02      	ldr	r3, [pc, #8]	; (80079e4 <Act_ResetProc+0x28>)
 80079da:	4a03      	ldr	r2, [pc, #12]	; (80079e8 <Act_ResetProc+0x2c>)
 80079dc:	605a      	str	r2, [r3, #4]
}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	20000e28 	.word	0x20000e28
 80079e8:	00004e20 	.word	0x00004e20

080079ec <Act_SampleAdc>:

/*ADC采样，以便获得电池电压等信息*/
void Act_SampleAdc()
{
 80079ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ee:	b097      	sub	sp, #92	; 0x5c
 80079f0:	af04      	add	r7, sp, #16
	char tempStr[64];
	ADC_ChannelConfTypeDef sConfig;

	sConfig.Channel = ADC_CHANNEL_5;
 80079f2:	003b      	movs	r3, r7
 80079f4:	4a2a      	ldr	r2, [pc, #168]	; (8007aa0 <Act_SampleAdc+0xb4>)
 80079f6:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 0;
 80079f8:	003b      	movs	r3, r7
 80079fa:	2200      	movs	r2, #0
 80079fc:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80079fe:	003a      	movs	r2, r7
 8007a00:	4b28      	ldr	r3, [pc, #160]	; (8007aa4 <Act_SampleAdc+0xb8>)
 8007a02:	0011      	movs	r1, r2
 8007a04:	0018      	movs	r0, r3
 8007a06:	f7fb fa21 	bl	8002e4c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 8007a0a:	4b26      	ldr	r3, [pc, #152]	; (8007aa4 <Act_SampleAdc+0xb8>)
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	f7fb f97d 	bl	8002d0c <HAL_ADC_Start>
	HAL_Delay(10);
 8007a12:	200a      	movs	r0, #10
 8007a14:	f7fa ffe8 	bl	80029e8 <HAL_Delay>
	g_SensorData.adcVal1 = HAL_ADC_GetValue(&hadc);
 8007a18:	4b22      	ldr	r3, [pc, #136]	; (8007aa4 <Act_SampleAdc+0xb8>)
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	f7fb fa0a 	bl	8002e34 <HAL_ADC_GetValue>
 8007a20:	0003      	movs	r3, r0
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	4b20      	ldr	r3, [pc, #128]	; (8007aa8 <Act_SampleAdc+0xbc>)
 8007a26:	825a      	strh	r2, [r3, #18]
	HAL_ADC_Stop(&hadc);
 8007a28:	4b1e      	ldr	r3, [pc, #120]	; (8007aa4 <Act_SampleAdc+0xb8>)
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f7fb f9c2 	bl	8002db4 <HAL_ADC_Stop>
	// Convert battery voltage
	// Volt=adcval*3.30/4095*(22/122)=adcval*0.004095f
	g_SensorData.BatVoltage = g_SensorData.adcVal1 * 0.004095f;
 8007a30:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <Act_SampleAdc+0xbc>)
 8007a32:	8a5b      	ldrh	r3, [r3, #18]
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7f9 f849 	bl	8000acc <__aeabi_i2f>
 8007a3a:	1c03      	adds	r3, r0, #0
 8007a3c:	491b      	ldr	r1, [pc, #108]	; (8007aac <Act_SampleAdc+0xc0>)
 8007a3e:	1c18      	adds	r0, r3, #0
 8007a40:	f7f8 ff2a 	bl	8000898 <__aeabi_fmul>
 8007a44:	1c03      	adds	r3, r0, #0
 8007a46:	1c1a      	adds	r2, r3, #0
 8007a48:	4b17      	ldr	r3, [pc, #92]	; (8007aa8 <Act_SampleAdc+0xbc>)
 8007a4a:	61da      	str	r2, [r3, #28]
	HAL_Delay(1);
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	f7fa ffcb 	bl	80029e8 <HAL_Delay>

	g_SensorData.WaterSurfaceRange = 0;
 8007a52:	4b15      	ldr	r3, [pc, #84]	; (8007aa8 <Act_SampleAdc+0xbc>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	621a      	str	r2, [r3, #32]

	sprintf(tempStr, "ADC samp value:%d,%d,%d WaterSurface=%3.2f",
			g_SensorData.adcVal1, g_SensorData.adcVal2, g_SensorData.adcVal3,
 8007a58:	4b13      	ldr	r3, [pc, #76]	; (8007aa8 <Act_SampleAdc+0xbc>)
 8007a5a:	8a5b      	ldrh	r3, [r3, #18]
	sprintf(tempStr, "ADC samp value:%d,%d,%d WaterSurface=%3.2f",
 8007a5c:	001d      	movs	r5, r3
			g_SensorData.adcVal1, g_SensorData.adcVal2, g_SensorData.adcVal3,
 8007a5e:	4b12      	ldr	r3, [pc, #72]	; (8007aa8 <Act_SampleAdc+0xbc>)
 8007a60:	8a9b      	ldrh	r3, [r3, #20]
	sprintf(tempStr, "ADC samp value:%d,%d,%d WaterSurface=%3.2f",
 8007a62:	001e      	movs	r6, r3
			g_SensorData.adcVal1, g_SensorData.adcVal2, g_SensorData.adcVal3,
 8007a64:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <Act_SampleAdc+0xbc>)
 8007a66:	8adb      	ldrh	r3, [r3, #22]
	sprintf(tempStr, "ADC samp value:%d,%d,%d WaterSurface=%3.2f",
 8007a68:	001c      	movs	r4, r3
			g_SensorData.WaterSurfaceRange);
 8007a6a:	4b0f      	ldr	r3, [pc, #60]	; (8007aa8 <Act_SampleAdc+0xbc>)
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
	sprintf(tempStr, "ADC samp value:%d,%d,%d WaterSurface=%3.2f",
 8007a6e:	1c18      	adds	r0, r3, #0
 8007a70:	f7fa fe8a 	bl	8002788 <__aeabi_f2d>
 8007a74:	0002      	movs	r2, r0
 8007a76:	000b      	movs	r3, r1
 8007a78:	490d      	ldr	r1, [pc, #52]	; (8007ab0 <Act_SampleAdc+0xc4>)
 8007a7a:	2008      	movs	r0, #8
 8007a7c:	1838      	adds	r0, r7, r0
 8007a7e:	9202      	str	r2, [sp, #8]
 8007a80:	9303      	str	r3, [sp, #12]
 8007a82:	9400      	str	r4, [sp, #0]
 8007a84:	0033      	movs	r3, r6
 8007a86:	002a      	movs	r2, r5
 8007a88:	f002 fd30 	bl	800a4ec <siprintf>
	Log(tempStr);
 8007a8c:	2008      	movs	r0, #8
 8007a8e:	183b      	adds	r3, r7, r0
 8007a90:	0018      	movs	r0, r3
 8007a92:	f7ff fcaf 	bl	80073f4 <Log>
}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	b013      	add	sp, #76	; 0x4c
 8007a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	14000020 	.word	0x14000020
 8007aa4:	20000f34 	.word	0x20000f34
 8007aa8:	20000a0c 	.word	0x20000a0c
 8007aac:	3b862f5a 	.word	0x3b862f5a
 8007ab0:	0800d0fc 	.word	0x0800d0fc

08007ab4 <Init_SampData>:

void Init_SampData()
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
	g_SensorData.adcVal1 = 0;
 8007ab8:	4b11      	ldr	r3, [pc, #68]	; (8007b00 <Init_SampData+0x4c>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	825a      	strh	r2, [r3, #18]
	g_SensorData.adcVal2 = 0;
 8007abe:	4b10      	ldr	r3, [pc, #64]	; (8007b00 <Init_SampData+0x4c>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	829a      	strh	r2, [r3, #20]
	g_SensorData.adcVal3 = 0;
 8007ac4:	4b0e      	ldr	r3, [pc, #56]	; (8007b00 <Init_SampData+0x4c>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	82da      	strh	r2, [r3, #22]
	g_SensorData.BatVoltage = 0;
 8007aca:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <Init_SampData+0x4c>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	61da      	str	r2, [r3, #28]
	g_SensorData.pH = 0;
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <Init_SampData+0x4c>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	629a      	str	r2, [r3, #40]	; 0x28
	g_SensorData.temperture = 0;
 8007ad6:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <Init_SampData+0x4c>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	625a      	str	r2, [r3, #36]	; 0x24
	g_SensorData.oxgen = 0;
 8007adc:	4b08      	ldr	r3, [pc, #32]	; (8007b00 <Init_SampData+0x4c>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	62da      	str	r2, [r3, #44]	; 0x2c
	g_SensorData.yaw = 0;
 8007ae2:	4b07      	ldr	r3, [pc, #28]	; (8007b00 <Init_SampData+0x4c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	609a      	str	r2, [r3, #8]
	g_SensorData.roll = 0;
 8007ae8:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <Init_SampData+0x4c>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	605a      	str	r2, [r3, #4]
	g_SensorData.pitch = 0;
 8007aee:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <Init_SampData+0x4c>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
	g_SensorData.WaterSurfaceRange = 0.00f;
 8007af4:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <Init_SampData+0x4c>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	621a      	str	r2, [r3, #32]
}
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	20000a0c 	.word	0x20000a0c

08007b04 <Proc_SampData>:

/*本机数据采样流程*/
void Proc_SampData()
{
 8007b04:	b5b0      	push	{r4, r5, r7, lr}
 8007b06:	af00      	add	r7, sp, #0
	g_ProcState.maxStep = 4;
 8007b08:	4b60      	ldr	r3, [pc, #384]	; (8007c8c <Proc_SampData+0x188>)
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	70da      	strb	r2, [r3, #3]
	g_ProcState.maxOverTimeMs = 1000;
 8007b0e:	4b5f      	ldr	r3, [pc, #380]	; (8007c8c <Proc_SampData+0x188>)
 8007b10:	22fa      	movs	r2, #250	; 0xfa
 8007b12:	0092      	lsls	r2, r2, #2
 8007b14:	605a      	str	r2, [r3, #4]
	// [0]打开加速度计电源（因加速度计低功耗，此步忽略，不用专门开启）
	if (g_ProcState.currentStep == 0)
 8007b16:	4b5d      	ldr	r3, [pc, #372]	; (8007c8c <Proc_SampData+0x188>)
 8007b18:	789b      	ldrb	r3, [r3, #2]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <Proc_SampData+0x28>
	{
		g_ProcState.currentStep = 1;
 8007b1e:	4b5b      	ldr	r3, [pc, #364]	; (8007c8c <Proc_SampData+0x188>)
 8007b20:	2201      	movs	r2, #1
 8007b22:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8007b24:	4b59      	ldr	r3, [pc, #356]	; (8007c8c <Proc_SampData+0x188>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	609a      	str	r2, [r3, #8]
		return;
 8007b2a:	e0ac      	b.n	8007c86 <Proc_SampData+0x182>
	}
	// [1]获取加速度计数值，并计算角度
	if (g_ProcState.currentStep == 1)
 8007b2c:	4b57      	ldr	r3, [pc, #348]	; (8007c8c <Proc_SampData+0x188>)
 8007b2e:	789b      	ldrb	r3, [r3, #2]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d000      	beq.n	8007b36 <Proc_SampData+0x32>
 8007b34:	e087      	b.n	8007c46 <Proc_SampData+0x142>
	{
		Init_ADXL362();
 8007b36:	f7ff fb23 	bl	8007180 <Init_ADXL362>
		HAL_Delay(2);
 8007b3a:	2002      	movs	r0, #2
 8007b3c:	f7fa ff54 	bl	80029e8 <HAL_Delay>
		Act_ADXL362_ReadData();
 8007b40:	f7ff fb96 	bl	8007270 <Act_ADXL362_ReadData>

		// 获取加速度计数值
		g_SensorData.gravity1 = ADXL362_GetGravity(0);
 8007b44:	2000      	movs	r0, #0
 8007b46:	f7ff fbfd 	bl	8007344 <ADXL362_GetGravity>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	001a      	movs	r2, r3
 8007b4e:	4b50      	ldr	r3, [pc, #320]	; (8007c90 <Proc_SampData+0x18c>)
 8007b50:	819a      	strh	r2, [r3, #12]
		g_SensorData.gravity2 = ADXL362_GetGravity(1);
 8007b52:	2001      	movs	r0, #1
 8007b54:	f7ff fbf6 	bl	8007344 <ADXL362_GetGravity>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	4b4c      	ldr	r3, [pc, #304]	; (8007c90 <Proc_SampData+0x18c>)
 8007b5e:	81da      	strh	r2, [r3, #14]
		g_SensorData.gravity3 = ADXL362_GetGravity(2);
 8007b60:	2002      	movs	r0, #2
 8007b62:	f7ff fbef 	bl	8007344 <ADXL362_GetGravity>
 8007b66:	0003      	movs	r3, r0
 8007b68:	001a      	movs	r2, r3
 8007b6a:	4b49      	ldr	r3, [pc, #292]	; (8007c90 <Proc_SampData+0x18c>)
 8007b6c:	821a      	strh	r2, [r3, #16]

		// 计算角度
		g_SensorData.pitch = atan2((float)(g_SensorData.gravity2),
 8007b6e:	4b48      	ldr	r3, [pc, #288]	; (8007c90 <Proc_SampData+0x18c>)
 8007b70:	220e      	movs	r2, #14
 8007b72:	5e9b      	ldrsh	r3, [r3, r2]
 8007b74:	0018      	movs	r0, r3
 8007b76:	f7f8 ffa9 	bl	8000acc <__aeabi_i2f>
 8007b7a:	1c03      	adds	r3, r0, #0
 8007b7c:	1c18      	adds	r0, r3, #0
 8007b7e:	f7fa fe03 	bl	8002788 <__aeabi_f2d>
 8007b82:	0004      	movs	r4, r0
 8007b84:	000d      	movs	r5, r1
								   (float)(g_SensorData.gravity3)) /
 8007b86:	4b42      	ldr	r3, [pc, #264]	; (8007c90 <Proc_SampData+0x18c>)
 8007b88:	2210      	movs	r2, #16
 8007b8a:	5e9b      	ldrsh	r3, [r3, r2]
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f7f8 ff9d 	bl	8000acc <__aeabi_i2f>
 8007b92:	1c03      	adds	r3, r0, #0
		g_SensorData.pitch = atan2((float)(g_SensorData.gravity2),
 8007b94:	1c18      	adds	r0, r3, #0
 8007b96:	f7fa fdf7 	bl	8002788 <__aeabi_f2d>
 8007b9a:	0002      	movs	r2, r0
 8007b9c:	000b      	movs	r3, r1
 8007b9e:	0020      	movs	r0, r4
 8007ba0:	0029      	movs	r1, r5
 8007ba2:	f004 ff83 	bl	800caac <atan2>
								   (float)(g_SensorData.gravity3)) /
 8007ba6:	4a3b      	ldr	r2, [pc, #236]	; (8007c94 <Proc_SampData+0x190>)
 8007ba8:	4b3b      	ldr	r3, [pc, #236]	; (8007c98 <Proc_SampData+0x194>)
 8007baa:	f7f9 fb3f 	bl	800122c <__aeabi_ddiv>
 8007bae:	0002      	movs	r2, r0
 8007bb0:	000b      	movs	r3, r1
 8007bb2:	0010      	movs	r0, r2
 8007bb4:	0019      	movs	r1, r3
							 3.1415926 * 180.0;
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	4b38      	ldr	r3, [pc, #224]	; (8007c9c <Proc_SampData+0x198>)
 8007bba:	f7f9 ff3d 	bl	8001a38 <__aeabi_dmul>
 8007bbe:	0002      	movs	r2, r0
 8007bc0:	000b      	movs	r3, r1
 8007bc2:	0010      	movs	r0, r2
 8007bc4:	0019      	movs	r1, r3
 8007bc6:	f7fa fe27 	bl	8002818 <__aeabi_d2f>
 8007bca:	1c02      	adds	r2, r0, #0
		g_SensorData.pitch = atan2((float)(g_SensorData.gravity2),
 8007bcc:	4b30      	ldr	r3, [pc, #192]	; (8007c90 <Proc_SampData+0x18c>)
 8007bce:	601a      	str	r2, [r3, #0]
		g_SensorData.roll = atan2((float)(g_SensorData.gravity1),
 8007bd0:	4b2f      	ldr	r3, [pc, #188]	; (8007c90 <Proc_SampData+0x18c>)
 8007bd2:	220c      	movs	r2, #12
 8007bd4:	5e9b      	ldrsh	r3, [r3, r2]
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f7f8 ff78 	bl	8000acc <__aeabi_i2f>
 8007bdc:	1c03      	adds	r3, r0, #0
 8007bde:	1c18      	adds	r0, r3, #0
 8007be0:	f7fa fdd2 	bl	8002788 <__aeabi_f2d>
 8007be4:	0004      	movs	r4, r0
 8007be6:	000d      	movs	r5, r1
								  (float)(g_SensorData.gravity3)) /
 8007be8:	4b29      	ldr	r3, [pc, #164]	; (8007c90 <Proc_SampData+0x18c>)
 8007bea:	2210      	movs	r2, #16
 8007bec:	5e9b      	ldrsh	r3, [r3, r2]
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f7f8 ff6c 	bl	8000acc <__aeabi_i2f>
 8007bf4:	1c03      	adds	r3, r0, #0
		g_SensorData.roll = atan2((float)(g_SensorData.gravity1),
 8007bf6:	1c18      	adds	r0, r3, #0
 8007bf8:	f7fa fdc6 	bl	8002788 <__aeabi_f2d>
 8007bfc:	0002      	movs	r2, r0
 8007bfe:	000b      	movs	r3, r1
 8007c00:	0020      	movs	r0, r4
 8007c02:	0029      	movs	r1, r5
 8007c04:	f004 ff52 	bl	800caac <atan2>
								  (float)(g_SensorData.gravity3)) /
 8007c08:	4a22      	ldr	r2, [pc, #136]	; (8007c94 <Proc_SampData+0x190>)
 8007c0a:	4b23      	ldr	r3, [pc, #140]	; (8007c98 <Proc_SampData+0x194>)
 8007c0c:	f7f9 fb0e 	bl	800122c <__aeabi_ddiv>
 8007c10:	0002      	movs	r2, r0
 8007c12:	000b      	movs	r3, r1
 8007c14:	0010      	movs	r0, r2
 8007c16:	0019      	movs	r1, r3
							3.1415926 * 180.0;
 8007c18:	2200      	movs	r2, #0
 8007c1a:	4b20      	ldr	r3, [pc, #128]	; (8007c9c <Proc_SampData+0x198>)
 8007c1c:	f7f9 ff0c 	bl	8001a38 <__aeabi_dmul>
 8007c20:	0002      	movs	r2, r0
 8007c22:	000b      	movs	r3, r1
 8007c24:	0010      	movs	r0, r2
 8007c26:	0019      	movs	r1, r3
 8007c28:	f7fa fdf6 	bl	8002818 <__aeabi_d2f>
 8007c2c:	1c02      	adds	r2, r0, #0
		g_SensorData.roll = atan2((float)(g_SensorData.gravity1),
 8007c2e:	4b18      	ldr	r3, [pc, #96]	; (8007c90 <Proc_SampData+0x18c>)
 8007c30:	605a      	str	r2, [r3, #4]
		g_SensorData.yaw = 0;
 8007c32:	4b17      	ldr	r3, [pc, #92]	; (8007c90 <Proc_SampData+0x18c>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	609a      	str	r2, [r3, #8]

		g_ProcState.currentStep = 2;
 8007c38:	4b14      	ldr	r3, [pc, #80]	; (8007c8c <Proc_SampData+0x188>)
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8007c3e:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <Proc_SampData+0x188>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	609a      	str	r2, [r3, #8]
		return;
 8007c44:	e01f      	b.n	8007c86 <Proc_SampData+0x182>
	}
	// [2]关闭加速度计电源（因加速度计低功耗，此步忽略，不用专门开启）并开启ADC
	if (g_ProcState.currentStep == 2)
 8007c46:	4b11      	ldr	r3, [pc, #68]	; (8007c8c <Proc_SampData+0x188>)
 8007c48:	789b      	ldrb	r3, [r3, #2]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d10a      	bne.n	8007c64 <Proc_SampData+0x160>
	{
		HAL_ADC_Start(&hadc);
 8007c4e:	4b14      	ldr	r3, [pc, #80]	; (8007ca0 <Proc_SampData+0x19c>)
 8007c50:	0018      	movs	r0, r3
 8007c52:	f7fb f85b 	bl	8002d0c <HAL_ADC_Start>
		g_ProcState.currentStep = 3;
 8007c56:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <Proc_SampData+0x188>)
 8007c58:	2203      	movs	r2, #3
 8007c5a:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <Proc_SampData+0x188>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	609a      	str	r2, [r3, #8]
		return;
 8007c62:	e010      	b.n	8007c86 <Proc_SampData+0x182>
	}
	// [3]读取ADC数据后，关闭ADC
	if (g_ProcState.currentStep == 3)
 8007c64:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <Proc_SampData+0x188>)
 8007c66:	789b      	ldrb	r3, [r3, #2]
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d10c      	bne.n	8007c86 <Proc_SampData+0x182>
	{
		Act_SampleAdc();
 8007c6c:	f7ff febe 	bl	80079ec <Act_SampleAdc>
		HAL_ADC_Stop(&hadc);
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <Proc_SampData+0x19c>)
 8007c72:	0018      	movs	r0, r3
 8007c74:	f7fb f89e 	bl	8002db4 <HAL_ADC_Stop>
		g_ProcState.currentStep = 4;
 8007c78:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <Proc_SampData+0x188>)
 8007c7a:	2204      	movs	r2, #4
 8007c7c:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8007c7e:	4b03      	ldr	r3, [pc, #12]	; (8007c8c <Proc_SampData+0x188>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	609a      	str	r2, [r3, #8]
		return;
 8007c84:	46c0      	nop			; (mov r8, r8)
	}
}
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bdb0      	pop	{r4, r5, r7, pc}
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	20000e28 	.word	0x20000e28
 8007c90:	20000a0c 	.word	0x20000a0c
 8007c94:	4d12d84a 	.word	0x4d12d84a
 8007c98:	400921fb 	.word	0x400921fb
 8007c9c:	40668000 	.word	0x40668000
 8007ca0:	20000f34 	.word	0x20000f34

08007ca4 <Proc_GenerateJson>:

/*生成JSON报文*/
void Proc_GenerateJson()
{
 8007ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca6:	46c6      	mov	lr, r8
 8007ca8:	b500      	push	{lr}
 8007caa:	b0b6      	sub	sp, #216	; 0xd8
 8007cac:	af1c      	add	r7, sp, #112	; 0x70
	char tmpStr[40];
	g_ProcState.maxStep = 1;
 8007cae:	4b54      	ldr	r3, [pc, #336]	; (8007e00 <Proc_GenerateJson+0x15c>)
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	70da      	strb	r2, [r3, #3]

	if (g_ProcState.currentStep == 0)
 8007cb4:	4b52      	ldr	r3, [pc, #328]	; (8007e00 <Proc_GenerateJson+0x15c>)
 8007cb6:	789b      	ldrb	r3, [r3, #2]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d000      	beq.n	8007cbe <Proc_GenerateJson+0x1a>
 8007cbc:	e099      	b.n	8007df2 <Proc_GenerateJson+0x14e>
					"\'Data\':{\'Bat_Lv\':%3d,\'Bat_Vot\':%2.2f,\'Ati_Roll\':%3.2f,\'Ati_Yaw\':%3.2f,\'Ati_Pitch\':%3.2f,"
					"\'Snr_Dist\':%3.2f,\'Res_Arg\':%4d,\'Crd_Lat\':%3.6f,\'Crd_Lon\':%3.6f,"
					"\'Wqt_Tmpt\':%3.2f,\'Wqt_Oxge\':%3.2f,\'Wqt_Ph\':%3.2f,"
					"\'Wqt_Ammo\':%3.2f,\'Wqt_Turb\':%3.2f}}",
					EQPTYPE_STR, EQPTNAME_STR, EQPKEY_STR, 50,
					g_SensorData.BatVoltage, g_SensorData.roll,
 8007cbe:	4b51      	ldr	r3, [pc, #324]	; (8007e04 <Proc_GenerateJson+0x160>)
 8007cc0:	69db      	ldr	r3, [r3, #28]
			sprintf((char *)(g_JsonData.data),
 8007cc2:	1c18      	adds	r0, r3, #0
 8007cc4:	f7fa fd60 	bl	8002788 <__aeabi_f2d>
 8007cc8:	63b8      	str	r0, [r7, #56]	; 0x38
 8007cca:	63f9      	str	r1, [r7, #60]	; 0x3c
					g_SensorData.BatVoltage, g_SensorData.roll,
 8007ccc:	4b4d      	ldr	r3, [pc, #308]	; (8007e04 <Proc_GenerateJson+0x160>)
 8007cce:	685b      	ldr	r3, [r3, #4]
			sprintf((char *)(g_JsonData.data),
 8007cd0:	1c18      	adds	r0, r3, #0
 8007cd2:	f7fa fd59 	bl	8002788 <__aeabi_f2d>
 8007cd6:	6338      	str	r0, [r7, #48]	; 0x30
 8007cd8:	6379      	str	r1, [r7, #52]	; 0x34
					g_SensorData.yaw, g_SensorData.pitch,
 8007cda:	4b4a      	ldr	r3, [pc, #296]	; (8007e04 <Proc_GenerateJson+0x160>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
			sprintf((char *)(g_JsonData.data),
 8007cde:	1c18      	adds	r0, r3, #0
 8007ce0:	f7fa fd52 	bl	8002788 <__aeabi_f2d>
 8007ce4:	62b8      	str	r0, [r7, #40]	; 0x28
 8007ce6:	62f9      	str	r1, [r7, #44]	; 0x2c
					g_SensorData.yaw, g_SensorData.pitch,
 8007ce8:	4b46      	ldr	r3, [pc, #280]	; (8007e04 <Proc_GenerateJson+0x160>)
 8007cea:	681b      	ldr	r3, [r3, #0]
			sprintf((char *)(g_JsonData.data),
 8007cec:	1c18      	adds	r0, r3, #0
 8007cee:	f7fa fd4b 	bl	8002788 <__aeabi_f2d>
 8007cf2:	6238      	str	r0, [r7, #32]
 8007cf4:	6279      	str	r1, [r7, #36]	; 0x24
					g_SensorData.WaterSurfaceRange, g_SensorData.adcVal2,
 8007cf6:	4b43      	ldr	r3, [pc, #268]	; (8007e04 <Proc_GenerateJson+0x160>)
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
			sprintf((char *)(g_JsonData.data),
 8007cfa:	1c18      	adds	r0, r3, #0
 8007cfc:	f7fa fd44 	bl	8002788 <__aeabi_f2d>
 8007d00:	61b8      	str	r0, [r7, #24]
 8007d02:	61f9      	str	r1, [r7, #28]
					g_SensorData.WaterSurfaceRange, g_SensorData.adcVal2,
 8007d04:	4b3f      	ldr	r3, [pc, #252]	; (8007e04 <Proc_GenerateJson+0x160>)
 8007d06:	8a9b      	ldrh	r3, [r3, #20]
			sprintf((char *)(g_JsonData.data),
 8007d08:	4698      	mov	r8, r3
					0.0f, 0.0f, g_SensorData.temperture, g_SensorData.oxgen,
 8007d0a:	4b3e      	ldr	r3, [pc, #248]	; (8007e04 <Proc_GenerateJson+0x160>)
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			sprintf((char *)(g_JsonData.data),
 8007d0e:	1c18      	adds	r0, r3, #0
 8007d10:	f7fa fd3a 	bl	8002788 <__aeabi_f2d>
 8007d14:	6138      	str	r0, [r7, #16]
 8007d16:	6179      	str	r1, [r7, #20]
					0.0f, 0.0f, g_SensorData.temperture, g_SensorData.oxgen,
 8007d18:	4b3a      	ldr	r3, [pc, #232]	; (8007e04 <Proc_GenerateJson+0x160>)
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			sprintf((char *)(g_JsonData.data),
 8007d1c:	1c18      	adds	r0, r3, #0
 8007d1e:	f7fa fd33 	bl	8002788 <__aeabi_f2d>
 8007d22:	60b8      	str	r0, [r7, #8]
 8007d24:	60f9      	str	r1, [r7, #12]
					g_SensorData.pH, g_SensorData.ammon_ion_con,
 8007d26:	4b37      	ldr	r3, [pc, #220]	; (8007e04 <Proc_GenerateJson+0x160>)
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			sprintf((char *)(g_JsonData.data),
 8007d2a:	1c18      	adds	r0, r3, #0
 8007d2c:	f7fa fd2c 	bl	8002788 <__aeabi_f2d>
 8007d30:	6038      	str	r0, [r7, #0]
 8007d32:	6079      	str	r1, [r7, #4]
					g_SensorData.pH, g_SensorData.ammon_ion_con,
 8007d34:	4b33      	ldr	r3, [pc, #204]	; (8007e04 <Proc_GenerateJson+0x160>)
 8007d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			sprintf((char *)(g_JsonData.data),
 8007d38:	1c18      	adds	r0, r3, #0
 8007d3a:	f7fa fd25 	bl	8002788 <__aeabi_f2d>
 8007d3e:	0004      	movs	r4, r0
 8007d40:	000d      	movs	r5, r1
					g_SensorData.turbidity);
 8007d42:	4b30      	ldr	r3, [pc, #192]	; (8007e04 <Proc_GenerateJson+0x160>)
 8007d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			sprintf((char *)(g_JsonData.data),
 8007d46:	1c18      	adds	r0, r3, #0
 8007d48:	f7fa fd1e 	bl	8002788 <__aeabi_f2d>
 8007d4c:	0002      	movs	r2, r0
 8007d4e:	000b      	movs	r3, r1
 8007d50:	492d      	ldr	r1, [pc, #180]	; (8007e08 <Proc_GenerateJson+0x164>)
 8007d52:	468c      	mov	ip, r1
 8007d54:	4e2d      	ldr	r6, [pc, #180]	; (8007e0c <Proc_GenerateJson+0x168>)
 8007d56:	492e      	ldr	r1, [pc, #184]	; (8007e10 <Proc_GenerateJson+0x16c>)
 8007d58:	482e      	ldr	r0, [pc, #184]	; (8007e14 <Proc_GenerateJson+0x170>)
 8007d5a:	921a      	str	r2, [sp, #104]	; 0x68
 8007d5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d5e:	9418      	str	r4, [sp, #96]	; 0x60
 8007d60:	9519      	str	r5, [sp, #100]	; 0x64
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	687c      	ldr	r4, [r7, #4]
 8007d66:	9316      	str	r3, [sp, #88]	; 0x58
 8007d68:	9417      	str	r4, [sp, #92]	; 0x5c
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	68fc      	ldr	r4, [r7, #12]
 8007d6e:	9314      	str	r3, [sp, #80]	; 0x50
 8007d70:	9415      	str	r4, [sp, #84]	; 0x54
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	697c      	ldr	r4, [r7, #20]
 8007d76:	9312      	str	r3, [sp, #72]	; 0x48
 8007d78:	9413      	str	r4, [sp, #76]	; 0x4c
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	9210      	str	r2, [sp, #64]	; 0x40
 8007d80:	9311      	str	r3, [sp, #68]	; 0x44
 8007d82:	2200      	movs	r2, #0
 8007d84:	2300      	movs	r3, #0
 8007d86:	920e      	str	r2, [sp, #56]	; 0x38
 8007d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d8a:	4642      	mov	r2, r8
 8007d8c:	920c      	str	r2, [sp, #48]	; 0x30
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	69fc      	ldr	r4, [r7, #28]
 8007d92:	930a      	str	r3, [sp, #40]	; 0x28
 8007d94:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007d9a:	9308      	str	r3, [sp, #32]
 8007d9c:	9409      	str	r4, [sp, #36]	; 0x24
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007da2:	9306      	str	r3, [sp, #24]
 8007da4:	9407      	str	r4, [sp, #28]
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8007daa:	9304      	str	r3, [sp, #16]
 8007dac:	9405      	str	r4, [sp, #20]
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8007db2:	9302      	str	r3, [sp, #8]
 8007db4:	9403      	str	r4, [sp, #12]
 8007db6:	2332      	movs	r3, #50	; 0x32
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	4b17      	ldr	r3, [pc, #92]	; (8007e18 <Proc_GenerateJson+0x174>)
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	4663      	mov	r3, ip
 8007dc0:	0032      	movs	r2, r6
 8007dc2:	f002 fb93 	bl	800a4ec <siprintf>
 8007dc6:	0001      	movs	r1, r0
		g_JsonData.length =
 8007dc8:	4a12      	ldr	r2, [pc, #72]	; (8007e14 <Proc_GenerateJson+0x170>)
 8007dca:	23c0      	movs	r3, #192	; 0xc0
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	50d1      	str	r1, [r2, r3]

		// Test print
		sprintf(tmpStr, "Generate Json<0>:Total %d bytes.\r\n",
 8007dd0:	4a10      	ldr	r2, [pc, #64]	; (8007e14 <Proc_GenerateJson+0x170>)
 8007dd2:	23c0      	movs	r3, #192	; 0xc0
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	58d2      	ldr	r2, [r2, r3]
 8007dd8:	4910      	ldr	r1, [pc, #64]	; (8007e1c <Proc_GenerateJson+0x178>)
 8007dda:	2440      	movs	r4, #64	; 0x40
 8007ddc:	193b      	adds	r3, r7, r4
 8007dde:	0018      	movs	r0, r3
 8007de0:	f002 fb84 	bl	800a4ec <siprintf>
				g_JsonData.length);
		Log(tmpStr);
 8007de4:	193b      	adds	r3, r7, r4
 8007de6:	0018      	movs	r0, r3
 8007de8:	f7ff fb04 	bl	80073f4 <Log>
		//		Log(g_JsonData.data);
		g_ProcState.currentStep = 1;
 8007dec:	4b04      	ldr	r3, [pc, #16]	; (8007e00 <Proc_GenerateJson+0x15c>)
 8007dee:	2201      	movs	r2, #1
 8007df0:	709a      	strb	r2, [r3, #2]
	}
}
 8007df2:	46c0      	nop			; (mov r8, r8)
 8007df4:	46bd      	mov	sp, r7
 8007df6:	b01a      	add	sp, #104	; 0x68
 8007df8:	bc80      	pop	{r7}
 8007dfa:	46b8      	mov	r8, r7
 8007dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dfe:	46c0      	nop			; (mov r8, r8)
 8007e00:	20000e28 	.word	0x20000e28
 8007e04:	20000a0c 	.word	0x20000a0c
 8007e08:	0800cfc8 	.word	0x0800cfc8
 8007e0c:	0800cfd4 	.word	0x0800cfd4
 8007e10:	0800d128 	.word	0x0800d128
 8007e14:	20000ca4 	.word	0x20000ca4
 8007e18:	0800d254 	.word	0x0800d254
 8007e1c:	0800d25c 	.word	0x0800d25c

08007e20 <M5310A_CleanRx>:

/*Clean M5310A uart rx buffer*/
void M5310A_CleanRx()
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
	memset(g_AtBuffer.rxData, 0, 128);
 8007e24:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <M5310A_CleanRx+0x20>)
 8007e26:	2280      	movs	r2, #128	; 0x80
 8007e28:	2100      	movs	r1, #0
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	f001 fedb 	bl	8009be6 <memset>
	g_AtBuffer.rxLength = 0;
 8007e30:	4a04      	ldr	r2, [pc, #16]	; (8007e44 <M5310A_CleanRx+0x24>)
 8007e32:	23c1      	movs	r3, #193	; 0xc1
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	2100      	movs	r1, #0
 8007e38:	52d1      	strh	r1, [r2, r3]
}
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	2000036a 	.word	0x2000036a
 8007e44:	20000268 	.word	0x20000268

08007e48 <M5310A_RestartRx>:

/*重启到�?�讯模块的接�??*/
void M5310A_RestartRx(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive(&DTU_PORT);
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <M5310A_RestartRx+0x20>)
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f7fe f9ca 	bl	80061e8 <HAL_UART_AbortReceive>
	HAL_UART_Receive_DMA(&DTU_PORT, (uint8_t *)(g_AtBuffer.rxData), 128);
 8007e54:	4905      	ldr	r1, [pc, #20]	; (8007e6c <M5310A_RestartRx+0x24>)
 8007e56:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <M5310A_RestartRx+0x20>)
 8007e58:	2280      	movs	r2, #128	; 0x80
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	f7fe f92c 	bl	80060b8 <HAL_UART_Receive_DMA>
}
 8007e60:	46c0      	nop			; (mov r8, r8)
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	46c0      	nop			; (mov r8, r8)
 8007e68:	20000e34 	.word	0x20000e34
 8007e6c:	2000036a 	.word	0x2000036a

08007e70 <Proc_HttpPost>:

/*Http 上发报文流程*/
void Proc_HttpPost(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
	g_ProcState.maxStep = 15;
 8007e74:	4bd4      	ldr	r3, [pc, #848]	; (80081c8 <Proc_HttpPost+0x358>)
 8007e76:	220f      	movs	r2, #15
 8007e78:	70da      	strb	r2, [r3, #3]
	//[0] 清理�??有的原有HTTP连接
	if (g_ProcState.currentStep == 0)
 8007e7a:	4bd3      	ldr	r3, [pc, #844]	; (80081c8 <Proc_HttpPost+0x358>)
 8007e7c:	789b      	ldrb	r3, [r3, #2]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d118      	bne.n	8007eb4 <Proc_HttpPost+0x44>
	{
		g_ProcState.maxOverTimeMs = 1000;
 8007e82:	4bd1      	ldr	r3, [pc, #836]	; (80081c8 <Proc_HttpPost+0x358>)
 8007e84:	22fa      	movs	r2, #250	; 0xfa
 8007e86:	0092      	lsls	r2, r2, #2
 8007e88:	605a      	str	r2, [r3, #4]
		HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)AT_HttpCloseStr,
 8007e8a:	49d0      	ldr	r1, [pc, #832]	; (80081cc <Proc_HttpPost+0x35c>)
 8007e8c:	4bd0      	ldr	r3, [pc, #832]	; (80081d0 <Proc_HttpPost+0x360>)
 8007e8e:	2210      	movs	r2, #16
 8007e90:	0018      	movs	r0, r3
 8007e92:	f7fe f881 	bl	8005f98 <HAL_UART_Transmit_DMA>
							  strlen(AT_HttpCloseStr));
		M5310A_CleanRx();
 8007e96:	f7ff ffc3 	bl	8007e20 <M5310A_CleanRx>
		M5310A_RestartRx();
 8007e9a:	f7ff ffd5 	bl	8007e48 <M5310A_RestartRx>
		g_ProcState.currentStep = 1;
 8007e9e:	4bca      	ldr	r3, [pc, #808]	; (80081c8 <Proc_HttpPost+0x358>)
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8007ea4:	4bc8      	ldr	r3, [pc, #800]	; (80081c8 <Proc_HttpPost+0x358>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	609a      	str	r2, [r3, #8]
		Log("Http Post<0>:Try to clean connection.");
 8007eaa:	4bca      	ldr	r3, [pc, #808]	; (80081d4 <Proc_HttpPost+0x364>)
 8007eac:	0018      	movs	r0, r3
 8007eae:	f7ff faa1 	bl	80073f4 <Log>
		return;
 8007eb2:	e1d0      	b.n	8008256 <Proc_HttpPost+0x3e6>
	}
	//[1-2]用AT指令�??查M5310A模块是否正常
	if (g_ProcState.currentStep == 1)
 8007eb4:	4bc4      	ldr	r3, [pc, #784]	; (80081c8 <Proc_HttpPost+0x358>)
 8007eb6:	789b      	ldrb	r3, [r3, #2]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d117      	bne.n	8007eec <Proc_HttpPost+0x7c>
	{
		g_ProcState.maxOverTimeMs = 10000;
 8007ebc:	4bc2      	ldr	r3, [pc, #776]	; (80081c8 <Proc_HttpPost+0x358>)
 8007ebe:	4ac6      	ldr	r2, [pc, #792]	; (80081d8 <Proc_HttpPost+0x368>)
 8007ec0:	605a      	str	r2, [r3, #4]
		HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)AT_CheckStr,
 8007ec2:	49c6      	ldr	r1, [pc, #792]	; (80081dc <Proc_HttpPost+0x36c>)
 8007ec4:	4bc2      	ldr	r3, [pc, #776]	; (80081d0 <Proc_HttpPost+0x360>)
 8007ec6:	2204      	movs	r2, #4
 8007ec8:	0018      	movs	r0, r3
 8007eca:	f7fe f865 	bl	8005f98 <HAL_UART_Transmit_DMA>
							  strlen(AT_CheckStr));
		M5310A_CleanRx();
 8007ece:	f7ff ffa7 	bl	8007e20 <M5310A_CleanRx>
		M5310A_RestartRx();
 8007ed2:	f7ff ffb9 	bl	8007e48 <M5310A_RestartRx>
		g_ProcState.currentStep = 2;
 8007ed6:	4bbc      	ldr	r3, [pc, #752]	; (80081c8 <Proc_HttpPost+0x358>)
 8007ed8:	2202      	movs	r2, #2
 8007eda:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8007edc:	4bba      	ldr	r3, [pc, #744]	; (80081c8 <Proc_HttpPost+0x358>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	609a      	str	r2, [r3, #8]
		Log("Http Post<1>:Transmit AT check command.");
 8007ee2:	4bbf      	ldr	r3, [pc, #764]	; (80081e0 <Proc_HttpPost+0x370>)
 8007ee4:	0018      	movs	r0, r3
 8007ee6:	f7ff fa85 	bl	80073f4 <Log>
		return;
 8007eea:	e1b4      	b.n	8008256 <Proc_HttpPost+0x3e6>
	}
	if (g_ProcState.currentStep == 2)
 8007eec:	4bb6      	ldr	r3, [pc, #728]	; (80081c8 <Proc_HttpPost+0x358>)
 8007eee:	789b      	ldrb	r3, [r3, #2]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d11d      	bne.n	8007f30 <Proc_HttpPost+0xc0>
	{
		// Check return data
		if (strstr(g_AtBuffer.rxData, AT_CheckReturnStr))
 8007ef4:	4abb      	ldr	r2, [pc, #748]	; (80081e4 <Proc_HttpPost+0x374>)
 8007ef6:	4bbc      	ldr	r3, [pc, #752]	; (80081e8 <Proc_HttpPost+0x378>)
 8007ef8:	0011      	movs	r1, r2
 8007efa:	0018      	movs	r0, r3
 8007efc:	f002 fb16 	bl	800a52c <strstr>
 8007f00:	1e03      	subs	r3, r0, #0
 8007f02:	d00a      	beq.n	8007f1a <Proc_HttpPost+0xaa>
		{
			g_ProcState.currentStep = 3;
 8007f04:	4bb0      	ldr	r3, [pc, #704]	; (80081c8 <Proc_HttpPost+0x358>)
 8007f06:	2203      	movs	r2, #3
 8007f08:	709a      	strb	r2, [r3, #2]
			g_ProcState.passedTimeMs = 0;
 8007f0a:	4baf      	ldr	r3, [pc, #700]	; (80081c8 <Proc_HttpPost+0x358>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	609a      	str	r2, [r3, #8]
			Log("Http Post<2>:AT check command OK.");
 8007f10:	4bb6      	ldr	r3, [pc, #728]	; (80081ec <Proc_HttpPost+0x37c>)
 8007f12:	0018      	movs	r0, r3
 8007f14:	f7ff fa6e 	bl	80073f4 <Log>
			HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)AT_CheckStr,
								  strlen(AT_CheckStr));
			M5310A_CleanRx();
			M5310A_RestartRx();
		}
		return;
 8007f18:	e19d      	b.n	8008256 <Proc_HttpPost+0x3e6>
			HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)AT_CheckStr,
 8007f1a:	49b0      	ldr	r1, [pc, #704]	; (80081dc <Proc_HttpPost+0x36c>)
 8007f1c:	4bac      	ldr	r3, [pc, #688]	; (80081d0 <Proc_HttpPost+0x360>)
 8007f1e:	2204      	movs	r2, #4
 8007f20:	0018      	movs	r0, r3
 8007f22:	f7fe f839 	bl	8005f98 <HAL_UART_Transmit_DMA>
			M5310A_CleanRx();
 8007f26:	f7ff ff7b 	bl	8007e20 <M5310A_CleanRx>
			M5310A_RestartRx();
 8007f2a:	f7ff ff8d 	bl	8007e48 <M5310A_RestartRx>
		return;
 8007f2e:	e192      	b.n	8008256 <Proc_HttpPost+0x3e6>
	}
	//[3-4]�??查模块到因特网的连接
	if (g_ProcState.currentStep == 3)
 8007f30:	4ba5      	ldr	r3, [pc, #660]	; (80081c8 <Proc_HttpPost+0x358>)
 8007f32:	789b      	ldrb	r3, [r3, #2]
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	d106      	bne.n	8007f46 <Proc_HttpPost+0xd6>
	{
		//跳过�??查；直接到步�??5
		g_ProcState.currentStep = 5;
 8007f38:	4ba3      	ldr	r3, [pc, #652]	; (80081c8 <Proc_HttpPost+0x358>)
 8007f3a:	2205      	movs	r2, #5
 8007f3c:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8007f3e:	4ba2      	ldr	r3, [pc, #648]	; (80081c8 <Proc_HttpPost+0x358>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	609a      	str	r2, [r3, #8]
		return;
 8007f44:	e187      	b.n	8008256 <Proc_HttpPost+0x3e6>
		g_ProcState.currentStep = 4;
		g_ProcState.passedTimeMs = 0;
		Log("Http Post<3>:Transmit AT Ping command.");
		return;
	}
	if (g_ProcState.currentStep == 4)
 8007f46:	4ba0      	ldr	r3, [pc, #640]	; (80081c8 <Proc_HttpPost+0x358>)
 8007f48:	789b      	ldrb	r3, [r3, #2]
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d113      	bne.n	8007f76 <Proc_HttpPost+0x106>
	{
		// Check return data
		if (strstr(g_AtBuffer.rxData, AT_PintReturnStr))
 8007f4e:	4aa8      	ldr	r2, [pc, #672]	; (80081f0 <Proc_HttpPost+0x380>)
 8007f50:	4ba5      	ldr	r3, [pc, #660]	; (80081e8 <Proc_HttpPost+0x378>)
 8007f52:	0011      	movs	r1, r2
 8007f54:	0018      	movs	r0, r3
 8007f56:	f002 fae9 	bl	800a52c <strstr>
 8007f5a:	1e03      	subs	r3, r0, #0
 8007f5c:	d100      	bne.n	8007f60 <Proc_HttpPost+0xf0>
 8007f5e:	e129      	b.n	80081b4 <Proc_HttpPost+0x344>
		{
			g_ProcState.currentStep = 5;
 8007f60:	4b99      	ldr	r3, [pc, #612]	; (80081c8 <Proc_HttpPost+0x358>)
 8007f62:	2205      	movs	r2, #5
 8007f64:	709a      	strb	r2, [r3, #2]
			g_ProcState.passedTimeMs = 0;
 8007f66:	4b98      	ldr	r3, [pc, #608]	; (80081c8 <Proc_HttpPost+0x358>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	609a      	str	r2, [r3, #8]
			Log("Http Post<4>:AT Ping command OK.");
 8007f6c:	4ba1      	ldr	r3, [pc, #644]	; (80081f4 <Proc_HttpPost+0x384>)
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f7ff fa40 	bl	80073f4 <Log>
			// Log("Http Post<4>:AT Ping jumped.\r\n");
			// HAL_UART_Transmit_DMA(&DTU_PORT,(uint8_t*)AT_PingStr,strlen(AT_PingStr));
			// CleanRxBuffer();
			// RestartReceive();
		}
		return;
 8007f74:	e11e      	b.n	80081b4 <Proc_HttpPost+0x344>
	}
	//[5-6]创建HTTP连接
	if (g_ProcState.currentStep == 5)
 8007f76:	4b94      	ldr	r3, [pc, #592]	; (80081c8 <Proc_HttpPost+0x358>)
 8007f78:	789b      	ldrb	r3, [r3, #2]
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	d118      	bne.n	8007fb0 <Proc_HttpPost+0x140>
	{
		g_ProcState.maxOverTimeMs = 2000;
 8007f7e:	4b92      	ldr	r3, [pc, #584]	; (80081c8 <Proc_HttpPost+0x358>)
 8007f80:	22fa      	movs	r2, #250	; 0xfa
 8007f82:	00d2      	lsls	r2, r2, #3
 8007f84:	605a      	str	r2, [r3, #4]
		HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)AT_HttpCreateStr,
 8007f86:	499c      	ldr	r1, [pc, #624]	; (80081f8 <Proc_HttpPost+0x388>)
 8007f88:	4b91      	ldr	r3, [pc, #580]	; (80081d0 <Proc_HttpPost+0x360>)
 8007f8a:	222a      	movs	r2, #42	; 0x2a
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	f7fe f803 	bl	8005f98 <HAL_UART_Transmit_DMA>
							  strlen(AT_HttpCreateStr));
		M5310A_CleanRx();
 8007f92:	f7ff ff45 	bl	8007e20 <M5310A_CleanRx>
		M5310A_RestartRx();
 8007f96:	f7ff ff57 	bl	8007e48 <M5310A_RestartRx>
		g_ProcState.currentStep = 6;
 8007f9a:	4b8b      	ldr	r3, [pc, #556]	; (80081c8 <Proc_HttpPost+0x358>)
 8007f9c:	2206      	movs	r2, #6
 8007f9e:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8007fa0:	4b89      	ldr	r3, [pc, #548]	; (80081c8 <Proc_HttpPost+0x358>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	609a      	str	r2, [r3, #8]
		Log("Http Post<5>:AT create Http link.");
 8007fa6:	4b95      	ldr	r3, [pc, #596]	; (80081fc <Proc_HttpPost+0x38c>)
 8007fa8:	0018      	movs	r0, r3
 8007faa:	f7ff fa23 	bl	80073f4 <Log>
		return;
 8007fae:	e152      	b.n	8008256 <Proc_HttpPost+0x3e6>
	}
	if (g_ProcState.currentStep == 6)
 8007fb0:	4b85      	ldr	r3, [pc, #532]	; (80081c8 <Proc_HttpPost+0x358>)
 8007fb2:	789b      	ldrb	r3, [r3, #2]
 8007fb4:	2b06      	cmp	r3, #6
 8007fb6:	d113      	bne.n	8007fe0 <Proc_HttpPost+0x170>
	{
		// Check return data
		if (strstr(g_AtBuffer.rxData, AT_HttpCreateReturnStr))
 8007fb8:	4a91      	ldr	r2, [pc, #580]	; (8008200 <Proc_HttpPost+0x390>)
 8007fba:	4b8b      	ldr	r3, [pc, #556]	; (80081e8 <Proc_HttpPost+0x378>)
 8007fbc:	0011      	movs	r1, r2
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f002 fab4 	bl	800a52c <strstr>
 8007fc4:	1e03      	subs	r3, r0, #0
 8007fc6:	d100      	bne.n	8007fca <Proc_HttpPost+0x15a>
 8007fc8:	e0f6      	b.n	80081b8 <Proc_HttpPost+0x348>
		{
			g_ProcState.currentStep = 7;
 8007fca:	4b7f      	ldr	r3, [pc, #508]	; (80081c8 <Proc_HttpPost+0x358>)
 8007fcc:	2207      	movs	r2, #7
 8007fce:	709a      	strb	r2, [r3, #2]
			g_ProcState.passedTimeMs = 0;
 8007fd0:	4b7d      	ldr	r3, [pc, #500]	; (80081c8 <Proc_HttpPost+0x358>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	609a      	str	r2, [r3, #8]
			Log("Http Post<6>:Create Http link successfully.");
 8007fd6:	4b8b      	ldr	r3, [pc, #556]	; (8008204 <Proc_HttpPost+0x394>)
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f7ff fa0b 	bl	80073f4 <Log>
		{
			// HAL_UART_Transmit_DMA(&DTU_PORT,(uint8_t*)AT_HttpCreateStr,strlen(AT_HttpCreateStr));
			// CleanRxBuffer();
			// RestartReceive();
		}
		return;
 8007fde:	e0eb      	b.n	80081b8 <Proc_HttpPost+0x348>
	}
	//[7-8]添加HTTP报头
	if (g_ProcState.currentStep == 7)
 8007fe0:	4b79      	ldr	r3, [pc, #484]	; (80081c8 <Proc_HttpPost+0x358>)
 8007fe2:	789b      	ldrb	r3, [r3, #2]
 8007fe4:	2b07      	cmp	r3, #7
 8007fe6:	d123      	bne.n	8008030 <Proc_HttpPost+0x1c0>
	{
		g_ProcState.maxOverTimeMs = 2000;
 8007fe8:	4b77      	ldr	r3, [pc, #476]	; (80081c8 <Proc_HttpPost+0x358>)
 8007fea:	22fa      	movs	r2, #250	; 0xfa
 8007fec:	00d2      	lsls	r2, r2, #3
 8007fee:	605a      	str	r2, [r3, #4]
		sprintf(PostBuffer,
 8007ff0:	4a85      	ldr	r2, [pc, #532]	; (8008208 <Proc_HttpPost+0x398>)
 8007ff2:	4b86      	ldr	r3, [pc, #536]	; (800820c <Proc_HttpPost+0x39c>)
 8007ff4:	0011      	movs	r1, r2
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f002 fa78 	bl	800a4ec <siprintf>
				"AT+HTTPHEADER=0,\"Content-Type:application/x-www-form-urlencoded\\r\\n\"\r\n");
		HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)PostBuffer,
							  strlen(PostBuffer));
 8007ffc:	4b83      	ldr	r3, [pc, #524]	; (800820c <Proc_HttpPost+0x39c>)
 8007ffe:	0018      	movs	r0, r3
 8008000:	f7f8 f882 	bl	8000108 <strlen>
 8008004:	0003      	movs	r3, r0
		HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)PostBuffer,
 8008006:	b29a      	uxth	r2, r3
 8008008:	4980      	ldr	r1, [pc, #512]	; (800820c <Proc_HttpPost+0x39c>)
 800800a:	4b71      	ldr	r3, [pc, #452]	; (80081d0 <Proc_HttpPost+0x360>)
 800800c:	0018      	movs	r0, r3
 800800e:	f7fd ffc3 	bl	8005f98 <HAL_UART_Transmit_DMA>
		M5310A_CleanRx();
 8008012:	f7ff ff05 	bl	8007e20 <M5310A_CleanRx>
		M5310A_RestartRx();
 8008016:	f7ff ff17 	bl	8007e48 <M5310A_RestartRx>
		g_ProcState.currentStep = 8;
 800801a:	4b6b      	ldr	r3, [pc, #428]	; (80081c8 <Proc_HttpPost+0x358>)
 800801c:	2208      	movs	r2, #8
 800801e:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8008020:	4b69      	ldr	r3, [pc, #420]	; (80081c8 <Proc_HttpPost+0x358>)
 8008022:	2200      	movs	r2, #0
 8008024:	609a      	str	r2, [r3, #8]
		Log("Http Post<7>:AT add Http header.");
 8008026:	4b7a      	ldr	r3, [pc, #488]	; (8008210 <Proc_HttpPost+0x3a0>)
 8008028:	0018      	movs	r0, r3
 800802a:	f7ff f9e3 	bl	80073f4 <Log>
		return;
 800802e:	e112      	b.n	8008256 <Proc_HttpPost+0x3e6>
	}
	if (g_ProcState.currentStep == 8)
 8008030:	4b65      	ldr	r3, [pc, #404]	; (80081c8 <Proc_HttpPost+0x358>)
 8008032:	789b      	ldrb	r3, [r3, #2]
 8008034:	2b08      	cmp	r3, #8
 8008036:	d113      	bne.n	8008060 <Proc_HttpPost+0x1f0>
	{
		// Check return data
		if (strstr(g_AtBuffer.rxData, AT_HttpHeaderReturnStr))
 8008038:	4a76      	ldr	r2, [pc, #472]	; (8008214 <Proc_HttpPost+0x3a4>)
 800803a:	4b6b      	ldr	r3, [pc, #428]	; (80081e8 <Proc_HttpPost+0x378>)
 800803c:	0011      	movs	r1, r2
 800803e:	0018      	movs	r0, r3
 8008040:	f002 fa74 	bl	800a52c <strstr>
 8008044:	1e03      	subs	r3, r0, #0
 8008046:	d100      	bne.n	800804a <Proc_HttpPost+0x1da>
 8008048:	e0b8      	b.n	80081bc <Proc_HttpPost+0x34c>
		{
			g_ProcState.currentStep = 9;
 800804a:	4b5f      	ldr	r3, [pc, #380]	; (80081c8 <Proc_HttpPost+0x358>)
 800804c:	2209      	movs	r2, #9
 800804e:	709a      	strb	r2, [r3, #2]
			g_ProcState.passedTimeMs = 0;
 8008050:	4b5d      	ldr	r3, [pc, #372]	; (80081c8 <Proc_HttpPost+0x358>)
 8008052:	2200      	movs	r2, #0
 8008054:	609a      	str	r2, [r3, #8]
			Log("Http Post<8>:Add Http header successfully.\r\n");
 8008056:	4b70      	ldr	r3, [pc, #448]	; (8008218 <Proc_HttpPost+0x3a8>)
 8008058:	0018      	movs	r0, r3
 800805a:	f7ff f9cb 	bl	80073f4 <Log>
		{
			// HAL_UART_Transmit_DMA(&DTU_PORT,(uint8_t*)AT_HttpHeaderStr,strlen(AT_HttpHeaderStr));
			// CleanRxBuffer();
			// RestartReceive();
		}
		return;
 800805e:	e0ad      	b.n	80081bc <Proc_HttpPost+0x34c>
	}
	//[9-10]添加HTTP报文
	if (g_ProcState.currentStep == 9)
 8008060:	4b59      	ldr	r3, [pc, #356]	; (80081c8 <Proc_HttpPost+0x358>)
 8008062:	789b      	ldrb	r3, [r3, #2]
 8008064:	2b09      	cmp	r3, #9
 8008066:	d126      	bne.n	80080b6 <Proc_HttpPost+0x246>
	{
		g_ProcState.maxOverTimeMs = 5000;
 8008068:	4b57      	ldr	r3, [pc, #348]	; (80081c8 <Proc_HttpPost+0x358>)
 800806a:	4a6c      	ldr	r2, [pc, #432]	; (800821c <Proc_HttpPost+0x3ac>)
 800806c:	605a      	str	r2, [r3, #4]
		sprintf(PostBuffer, "AT+HTTPCONTENT=0,\"%s\"\r\n", g_JsonData.data);
 800806e:	4a6c      	ldr	r2, [pc, #432]	; (8008220 <Proc_HttpPost+0x3b0>)
 8008070:	496c      	ldr	r1, [pc, #432]	; (8008224 <Proc_HttpPost+0x3b4>)
 8008072:	4b66      	ldr	r3, [pc, #408]	; (800820c <Proc_HttpPost+0x39c>)
 8008074:	0018      	movs	r0, r3
 8008076:	f002 fa39 	bl	800a4ec <siprintf>
		Log(PostBuffer);
 800807a:	4b64      	ldr	r3, [pc, #400]	; (800820c <Proc_HttpPost+0x39c>)
 800807c:	0018      	movs	r0, r3
 800807e:	f7ff f9b9 	bl	80073f4 <Log>

		HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)PostBuffer,
							  strlen(PostBuffer));
 8008082:	4b62      	ldr	r3, [pc, #392]	; (800820c <Proc_HttpPost+0x39c>)
 8008084:	0018      	movs	r0, r3
 8008086:	f7f8 f83f 	bl	8000108 <strlen>
 800808a:	0003      	movs	r3, r0
		HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)PostBuffer,
 800808c:	b29a      	uxth	r2, r3
 800808e:	495f      	ldr	r1, [pc, #380]	; (800820c <Proc_HttpPost+0x39c>)
 8008090:	4b4f      	ldr	r3, [pc, #316]	; (80081d0 <Proc_HttpPost+0x360>)
 8008092:	0018      	movs	r0, r3
 8008094:	f7fd ff80 	bl	8005f98 <HAL_UART_Transmit_DMA>
		M5310A_CleanRx();
 8008098:	f7ff fec2 	bl	8007e20 <M5310A_CleanRx>
		M5310A_RestartRx();
 800809c:	f7ff fed4 	bl	8007e48 <M5310A_RestartRx>
		g_ProcState.currentStep = 10;
 80080a0:	4b49      	ldr	r3, [pc, #292]	; (80081c8 <Proc_HttpPost+0x358>)
 80080a2:	220a      	movs	r2, #10
 80080a4:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 80080a6:	4b48      	ldr	r3, [pc, #288]	; (80081c8 <Proc_HttpPost+0x358>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	609a      	str	r2, [r3, #8]
		Log("Http Post<9>:AT add Http content.");
 80080ac:	4b5e      	ldr	r3, [pc, #376]	; (8008228 <Proc_HttpPost+0x3b8>)
 80080ae:	0018      	movs	r0, r3
 80080b0:	f7ff f9a0 	bl	80073f4 <Log>
		return;
 80080b4:	e0cf      	b.n	8008256 <Proc_HttpPost+0x3e6>
	}
	if (g_ProcState.currentStep == 10)
 80080b6:	4b44      	ldr	r3, [pc, #272]	; (80081c8 <Proc_HttpPost+0x358>)
 80080b8:	789b      	ldrb	r3, [r3, #2]
 80080ba:	2b0a      	cmp	r3, #10
 80080bc:	d113      	bne.n	80080e6 <Proc_HttpPost+0x276>
	{
		// Check return data
		if (strstr(g_AtBuffer.rxData, AT_HttpContentReturnStr))
 80080be:	4a5b      	ldr	r2, [pc, #364]	; (800822c <Proc_HttpPost+0x3bc>)
 80080c0:	4b49      	ldr	r3, [pc, #292]	; (80081e8 <Proc_HttpPost+0x378>)
 80080c2:	0011      	movs	r1, r2
 80080c4:	0018      	movs	r0, r3
 80080c6:	f002 fa31 	bl	800a52c <strstr>
 80080ca:	1e03      	subs	r3, r0, #0
 80080cc:	d100      	bne.n	80080d0 <Proc_HttpPost+0x260>
 80080ce:	e077      	b.n	80081c0 <Proc_HttpPost+0x350>
		{
			g_ProcState.currentStep = 11;
 80080d0:	4b3d      	ldr	r3, [pc, #244]	; (80081c8 <Proc_HttpPost+0x358>)
 80080d2:	220b      	movs	r2, #11
 80080d4:	709a      	strb	r2, [r3, #2]
			g_ProcState.passedTimeMs = 0;
 80080d6:	4b3c      	ldr	r3, [pc, #240]	; (80081c8 <Proc_HttpPost+0x358>)
 80080d8:	2200      	movs	r2, #0
 80080da:	609a      	str	r2, [r3, #8]
			Log("Http Post<10>:Add Http content successfully.");
 80080dc:	4b54      	ldr	r3, [pc, #336]	; (8008230 <Proc_HttpPost+0x3c0>)
 80080de:	0018      	movs	r0, r3
 80080e0:	f7ff f988 	bl	80073f4 <Log>
		{
			// HAL_UART_Transmit_DMA(&DTU_PORT,(uint8_t*)AT_HttpContentStr,strlen(AT_HttpContentStr));
			// CleanRxBuffer();
			// RestartReceive();
		}
		return;
 80080e4:	e06c      	b.n	80081c0 <Proc_HttpPost+0x350>
	}
	//[11-12]发�?�HTTP请求
	if (g_ProcState.currentStep == 11)
 80080e6:	4b38      	ldr	r3, [pc, #224]	; (80081c8 <Proc_HttpPost+0x358>)
 80080e8:	789b      	ldrb	r3, [r3, #2]
 80080ea:	2b0b      	cmp	r3, #11
 80080ec:	d118      	bne.n	8008120 <Proc_HttpPost+0x2b0>
	{
		g_ProcState.maxOverTimeMs = 8000;
 80080ee:	4b36      	ldr	r3, [pc, #216]	; (80081c8 <Proc_HttpPost+0x358>)
 80080f0:	22fa      	movs	r2, #250	; 0xfa
 80080f2:	0152      	lsls	r2, r2, #5
 80080f4:	605a      	str	r2, [r3, #4]
		HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)AT_HttpSendStr,
 80080f6:	494f      	ldr	r1, [pc, #316]	; (8008234 <Proc_HttpPost+0x3c4>)
 80080f8:	4b35      	ldr	r3, [pc, #212]	; (80081d0 <Proc_HttpPost+0x360>)
 80080fa:	221b      	movs	r2, #27
 80080fc:	0018      	movs	r0, r3
 80080fe:	f7fd ff4b 	bl	8005f98 <HAL_UART_Transmit_DMA>
							  strlen(AT_HttpSendStr));
		M5310A_CleanRx();
 8008102:	f7ff fe8d 	bl	8007e20 <M5310A_CleanRx>
		M5310A_RestartRx();
 8008106:	f7ff fe9f 	bl	8007e48 <M5310A_RestartRx>
		g_ProcState.currentStep = 12;
 800810a:	4b2f      	ldr	r3, [pc, #188]	; (80081c8 <Proc_HttpPost+0x358>)
 800810c:	220c      	movs	r2, #12
 800810e:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8008110:	4b2d      	ldr	r3, [pc, #180]	; (80081c8 <Proc_HttpPost+0x358>)
 8008112:	2200      	movs	r2, #0
 8008114:	609a      	str	r2, [r3, #8]
		Log("Http Post<11>:Transmit Http post request.");
 8008116:	4b48      	ldr	r3, [pc, #288]	; (8008238 <Proc_HttpPost+0x3c8>)
 8008118:	0018      	movs	r0, r3
 800811a:	f7ff f96b 	bl	80073f4 <Log>
		return;
 800811e:	e09a      	b.n	8008256 <Proc_HttpPost+0x3e6>
	}
	if (g_ProcState.currentStep == 12)
 8008120:	4b29      	ldr	r3, [pc, #164]	; (80081c8 <Proc_HttpPost+0x358>)
 8008122:	789b      	ldrb	r3, [r3, #2]
 8008124:	2b0c      	cmp	r3, #12
 8008126:	d112      	bne.n	800814e <Proc_HttpPost+0x2de>
	{
		// Check return data
		if (strstr(g_AtBuffer.rxData, AT_HttpSendReturnStr))
 8008128:	4a44      	ldr	r2, [pc, #272]	; (800823c <Proc_HttpPost+0x3cc>)
 800812a:	4b2f      	ldr	r3, [pc, #188]	; (80081e8 <Proc_HttpPost+0x378>)
 800812c:	0011      	movs	r1, r2
 800812e:	0018      	movs	r0, r3
 8008130:	f002 f9fc 	bl	800a52c <strstr>
 8008134:	1e03      	subs	r3, r0, #0
 8008136:	d045      	beq.n	80081c4 <Proc_HttpPost+0x354>
		{
			g_ProcState.currentStep = 13;
 8008138:	4b23      	ldr	r3, [pc, #140]	; (80081c8 <Proc_HttpPost+0x358>)
 800813a:	220d      	movs	r2, #13
 800813c:	709a      	strb	r2, [r3, #2]
			g_ProcState.passedTimeMs = 0;
 800813e:	4b22      	ldr	r3, [pc, #136]	; (80081c8 <Proc_HttpPost+0x358>)
 8008140:	2200      	movs	r2, #0
 8008142:	609a      	str	r2, [r3, #8]

			Log("Http Post<12>:Http post successfully.");
 8008144:	4b3e      	ldr	r3, [pc, #248]	; (8008240 <Proc_HttpPost+0x3d0>)
 8008146:	0018      	movs	r0, r3
 8008148:	f7ff f954 	bl	80073f4 <Log>
		{
			// HAL_UART_Transmit_DMA(&DTU_PORT,(uint8_t*)AT_HttpSendStr,strlen(AT_HttpSendStr));
			// CleanRxBuffer();
			// RestartReceive();
		}
		return;
 800814c:	e03a      	b.n	80081c4 <Proc_HttpPost+0x354>
	}
	//[13-14]关闭HTTP连接
	if (g_ProcState.currentStep == 13)
 800814e:	4b1e      	ldr	r3, [pc, #120]	; (80081c8 <Proc_HttpPost+0x358>)
 8008150:	789b      	ldrb	r3, [r3, #2]
 8008152:	2b0d      	cmp	r3, #13
 8008154:	d117      	bne.n	8008186 <Proc_HttpPost+0x316>
	{
		g_ProcState.maxOverTimeMs = 3000;
 8008156:	4b1c      	ldr	r3, [pc, #112]	; (80081c8 <Proc_HttpPost+0x358>)
 8008158:	4a3a      	ldr	r2, [pc, #232]	; (8008244 <Proc_HttpPost+0x3d4>)
 800815a:	605a      	str	r2, [r3, #4]
		HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)AT_HttpCloseStr,
 800815c:	491b      	ldr	r1, [pc, #108]	; (80081cc <Proc_HttpPost+0x35c>)
 800815e:	4b1c      	ldr	r3, [pc, #112]	; (80081d0 <Proc_HttpPost+0x360>)
 8008160:	2210      	movs	r2, #16
 8008162:	0018      	movs	r0, r3
 8008164:	f7fd ff18 	bl	8005f98 <HAL_UART_Transmit_DMA>
							  strlen(AT_HttpCloseStr));
		M5310A_CleanRx();
 8008168:	f7ff fe5a 	bl	8007e20 <M5310A_CleanRx>
		M5310A_RestartRx();
 800816c:	f7ff fe6c 	bl	8007e48 <M5310A_RestartRx>
		g_ProcState.currentStep = 14;
 8008170:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <Proc_HttpPost+0x358>)
 8008172:	220e      	movs	r2, #14
 8008174:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8008176:	4b14      	ldr	r3, [pc, #80]	; (80081c8 <Proc_HttpPost+0x358>)
 8008178:	2200      	movs	r2, #0
 800817a:	609a      	str	r2, [r3, #8]
		Log("Http Post<13>:Close Http link.");
 800817c:	4b32      	ldr	r3, [pc, #200]	; (8008248 <Proc_HttpPost+0x3d8>)
 800817e:	0018      	movs	r0, r3
 8008180:	f7ff f938 	bl	80073f4 <Log>
		return;
 8008184:	e067      	b.n	8008256 <Proc_HttpPost+0x3e6>
	}
	if (g_ProcState.currentStep == 14)
 8008186:	4b10      	ldr	r3, [pc, #64]	; (80081c8 <Proc_HttpPost+0x358>)
 8008188:	789b      	ldrb	r3, [r3, #2]
 800818a:	2b0e      	cmp	r3, #14
 800818c:	d163      	bne.n	8008256 <Proc_HttpPost+0x3e6>
	{
		// Check return data
		if (strstr(g_AtBuffer.rxData, AT_HttpCloseReturnStr))
 800818e:	4a2f      	ldr	r2, [pc, #188]	; (800824c <Proc_HttpPost+0x3dc>)
 8008190:	4b15      	ldr	r3, [pc, #84]	; (80081e8 <Proc_HttpPost+0x378>)
 8008192:	0011      	movs	r1, r2
 8008194:	0018      	movs	r0, r3
 8008196:	f002 f9c9 	bl	800a52c <strstr>
 800819a:	1e03      	subs	r3, r0, #0
 800819c:	d05a      	beq.n	8008254 <Proc_HttpPost+0x3e4>
		{
			g_ProcState.currentStep = 15;
 800819e:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <Proc_HttpPost+0x358>)
 80081a0:	220f      	movs	r2, #15
 80081a2:	709a      	strb	r2, [r3, #2]
			g_ProcState.passedTimeMs = 0;
 80081a4:	4b08      	ldr	r3, [pc, #32]	; (80081c8 <Proc_HttpPost+0x358>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	609a      	str	r2, [r3, #8]
			Log("Http Post<14>:Http link closed successfully.");
 80081aa:	4b29      	ldr	r3, [pc, #164]	; (8008250 <Proc_HttpPost+0x3e0>)
 80081ac:	0018      	movs	r0, r3
 80081ae:	f7ff f921 	bl	80073f4 <Log>
		{
			// HAL_UART_Transmit_DMA(&DTU_PORT,(uint8_t*)AT_HttpCloseStr,strlen(AT_HttpCloseStr));
			// CleanRxBuffer();
			// RestartReceive();
		}
		return;
 80081b2:	e04f      	b.n	8008254 <Proc_HttpPost+0x3e4>
		return;
 80081b4:	46c0      	nop			; (mov r8, r8)
 80081b6:	e04e      	b.n	8008256 <Proc_HttpPost+0x3e6>
		return;
 80081b8:	46c0      	nop			; (mov r8, r8)
 80081ba:	e04c      	b.n	8008256 <Proc_HttpPost+0x3e6>
		return;
 80081bc:	46c0      	nop			; (mov r8, r8)
 80081be:	e04a      	b.n	8008256 <Proc_HttpPost+0x3e6>
		return;
 80081c0:	46c0      	nop			; (mov r8, r8)
 80081c2:	e048      	b.n	8008256 <Proc_HttpPost+0x3e6>
		return;
 80081c4:	46c0      	nop			; (mov r8, r8)
 80081c6:	e046      	b.n	8008256 <Proc_HttpPost+0x3e6>
 80081c8:	20000e28 	.word	0x20000e28
 80081cc:	0800d924 	.word	0x0800d924
 80081d0:	20000e34 	.word	0x20000e34
 80081d4:	0800d280 	.word	0x0800d280
 80081d8:	00002710 	.word	0x00002710
 80081dc:	0800d898 	.word	0x0800d898
 80081e0:	0800d2a8 	.word	0x0800d2a8
 80081e4:	0800d8a0 	.word	0x0800d8a0
 80081e8:	2000036a 	.word	0x2000036a
 80081ec:	0800d2d0 	.word	0x0800d2d0
 80081f0:	0800d8a8 	.word	0x0800d8a8
 80081f4:	0800d2f4 	.word	0x0800d2f4
 80081f8:	0800d8b0 	.word	0x0800d8b0
 80081fc:	0800d318 	.word	0x0800d318
 8008200:	0800d8dc 	.word	0x0800d8dc
 8008204:	0800d33c 	.word	0x0800d33c
 8008208:	0800d368 	.word	0x0800d368
 800820c:	20000a44 	.word	0x20000a44
 8008210:	0800d3b0 	.word	0x0800d3b0
 8008214:	0800d8ec 	.word	0x0800d8ec
 8008218:	0800d3d4 	.word	0x0800d3d4
 800821c:	00001388 	.word	0x00001388
 8008220:	20000ca4 	.word	0x20000ca4
 8008224:	0800d404 	.word	0x0800d404
 8008228:	0800d41c 	.word	0x0800d41c
 800822c:	0800d8f4 	.word	0x0800d8f4
 8008230:	0800d440 	.word	0x0800d440
 8008234:	0800d8fc 	.word	0x0800d8fc
 8008238:	0800d470 	.word	0x0800d470
 800823c:	0800d918 	.word	0x0800d918
 8008240:	0800d49c 	.word	0x0800d49c
 8008244:	00000bb8 	.word	0x00000bb8
 8008248:	0800d4c4 	.word	0x0800d4c4
 800824c:	0800d938 	.word	0x0800d938
 8008250:	0800d4e4 	.word	0x0800d4e4
		return;
 8008254:	46c0      	nop			; (mov r8, r8)
	}
}
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	46c0      	nop			; (mov r8, r8)

0800825c <Proc_SysStop>:

/*进入睡眠模式*/
void Proc_SysStop()
{
 800825c:	b5b0      	push	{r4, r5, r7, lr}
 800825e:	b098      	sub	sp, #96	; 0x60
 8008260:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef t_CurrTime;
	uint32_t _sleepSeconds;
	char tmpStr[64];
	HAL_RTC_GetTime(&hrtc, &t_CurrTime, RTC_FORMAT_BIN);
 8008262:	2440      	movs	r4, #64	; 0x40
 8008264:	1939      	adds	r1, r7, r4
 8008266:	4b42      	ldr	r3, [pc, #264]	; (8008370 <Proc_SysStop+0x114>)
 8008268:	2200      	movs	r2, #0
 800826a:	0018      	movs	r0, r3
 800826c:	f7fc fd8c 	bl	8004d88 <HAL_RTC_GetTime>
	// Calculate wakeup time
	t_CurrTime.Seconds += DATA_SAMPGAP_S;
 8008270:	0021      	movs	r1, r4
 8008272:	187b      	adds	r3, r7, r1
 8008274:	789a      	ldrb	r2, [r3, #2]
 8008276:	187b      	adds	r3, r7, r1
 8008278:	709a      	strb	r2, [r3, #2]
	t_CurrTime.Minutes += DATA_SAMPGAP_M;
 800827a:	187b      	adds	r3, r7, r1
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	331e      	adds	r3, #30
 8008280:	b2da      	uxtb	r2, r3
 8008282:	000d      	movs	r5, r1
 8008284:	197b      	adds	r3, r7, r5
 8008286:	705a      	strb	r2, [r3, #1]
	t_CurrTime.Hours += DATA_SAMPGAP_H;
 8008288:	197b      	adds	r3, r7, r5
 800828a:	781a      	ldrb	r2, [r3, #0]
 800828c:	197b      	adds	r3, r7, r5
 800828e:	701a      	strb	r2, [r3, #0]

	if (t_CurrTime.Seconds >= 60)
 8008290:	197b      	adds	r3, r7, r5
 8008292:	789b      	ldrb	r3, [r3, #2]
 8008294:	2b3b      	cmp	r3, #59	; 0x3b
 8008296:	d917      	bls.n	80082c8 <Proc_SysStop+0x6c>
	{
		t_CurrTime.Minutes += t_CurrTime.Seconds / 60;
 8008298:	197b      	adds	r3, r7, r5
 800829a:	785c      	ldrb	r4, [r3, #1]
 800829c:	197b      	adds	r3, r7, r5
 800829e:	789b      	ldrb	r3, [r3, #2]
 80082a0:	213c      	movs	r1, #60	; 0x3c
 80082a2:	0018      	movs	r0, r3
 80082a4:	f7f7 ff4c 	bl	8000140 <__udivsi3>
 80082a8:	0003      	movs	r3, r0
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	18e3      	adds	r3, r4, r3
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	197b      	adds	r3, r7, r5
 80082b2:	705a      	strb	r2, [r3, #1]
		t_CurrTime.Seconds = t_CurrTime.Seconds % 60;
 80082b4:	197b      	adds	r3, r7, r5
 80082b6:	789b      	ldrb	r3, [r3, #2]
 80082b8:	213c      	movs	r1, #60	; 0x3c
 80082ba:	0018      	movs	r0, r3
 80082bc:	f7f7 ffc6 	bl	800024c <__aeabi_uidivmod>
 80082c0:	000b      	movs	r3, r1
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	197b      	adds	r3, r7, r5
 80082c6:	709a      	strb	r2, [r3, #2]
	}

	if (t_CurrTime.Minutes >= 60)
 80082c8:	2540      	movs	r5, #64	; 0x40
 80082ca:	197b      	adds	r3, r7, r5
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	2b3b      	cmp	r3, #59	; 0x3b
 80082d0:	d917      	bls.n	8008302 <Proc_SysStop+0xa6>
	{
		t_CurrTime.Hours += t_CurrTime.Minutes / 60;
 80082d2:	197b      	adds	r3, r7, r5
 80082d4:	781c      	ldrb	r4, [r3, #0]
 80082d6:	197b      	adds	r3, r7, r5
 80082d8:	785b      	ldrb	r3, [r3, #1]
 80082da:	213c      	movs	r1, #60	; 0x3c
 80082dc:	0018      	movs	r0, r3
 80082de:	f7f7 ff2f 	bl	8000140 <__udivsi3>
 80082e2:	0003      	movs	r3, r0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	18e3      	adds	r3, r4, r3
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	197b      	adds	r3, r7, r5
 80082ec:	701a      	strb	r2, [r3, #0]
		t_CurrTime.Minutes = t_CurrTime.Minutes % 60;
 80082ee:	197b      	adds	r3, r7, r5
 80082f0:	785b      	ldrb	r3, [r3, #1]
 80082f2:	213c      	movs	r1, #60	; 0x3c
 80082f4:	0018      	movs	r0, r3
 80082f6:	f7f7 ffa9 	bl	800024c <__aeabi_uidivmod>
 80082fa:	000b      	movs	r3, r1
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	197b      	adds	r3, r7, r5
 8008300:	705a      	strb	r2, [r3, #1]
	}
	if (t_CurrTime.Hours >= 24)
 8008302:	2440      	movs	r4, #64	; 0x40
 8008304:	193b      	adds	r3, r7, r4
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b17      	cmp	r3, #23
 800830a:	d909      	bls.n	8008320 <Proc_SysStop+0xc4>
	{
		t_CurrTime.Hours = t_CurrTime.Hours % 24;
 800830c:	193b      	adds	r3, r7, r4
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2118      	movs	r1, #24
 8008312:	0018      	movs	r0, r3
 8008314:	f7f7 ff9a 	bl	800024c <__aeabi_uidivmod>
 8008318:	000b      	movs	r3, r1
 800831a:	b2da      	uxtb	r2, r3
 800831c:	193b      	adds	r3, r7, r4
 800831e:	701a      	strb	r2, [r3, #0]
	}

	_sleepSeconds = DATA_SAMPGAP_S + DATA_SAMPGAP_M * 60 + DATA_SAMPGAP_H * 3600;
 8008320:	23e1      	movs	r3, #225	; 0xe1
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_OK != HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, _sleepSeconds,
 8008326:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008328:	4b11      	ldr	r3, [pc, #68]	; (8008370 <Proc_SysStop+0x114>)
 800832a:	2204      	movs	r2, #4
 800832c:	0018      	movs	r0, r3
 800832e:	f7fc ff19 	bl	8005164 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008332:	1e03      	subs	r3, r0, #0
 8008334:	d001      	beq.n	800833a <Proc_SysStop+0xde>
											  RTC_WAKEUPCLOCK_CK_SPRE_16BITS))
	{
		Error_Handler();
 8008336:	f000 fefb 	bl	8009130 <Error_Handler>
	}
	sprintf(tmpStr,
 800833a:	490e      	ldr	r1, [pc, #56]	; (8008374 <Proc_SysStop+0x118>)
 800833c:	0038      	movs	r0, r7
 800833e:	2300      	movs	r3, #0
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	231e      	movs	r3, #30
 8008344:	2200      	movs	r2, #0
 8008346:	f002 f8d1 	bl	800a4ec <siprintf>
			"System Stop<0>:Enter stop mode(%d hours %d minutes %d seconds.)",
			DATA_SAMPGAP_H, DATA_SAMPGAP_M, DATA_SAMPGAP_S);
	Log(tmpStr);
 800834a:	003b      	movs	r3, r7
 800834c:	0018      	movs	r0, r3
 800834e:	f7ff f851 	bl	80073f4 <Log>

	HAL_ADC_Stop(&hadc);
 8008352:	4b09      	ldr	r3, [pc, #36]	; (8008378 <Proc_SysStop+0x11c>)
 8008354:	0018      	movs	r0, r3
 8008356:	f7fa fd2d 	bl	8002db4 <HAL_ADC_Stop>
	HAL_Delay(200);
 800835a:	20c8      	movs	r0, #200	; 0xc8
 800835c:	f7fa fb44 	bl	80029e8 <HAL_Delay>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8008360:	2101      	movs	r1, #1
 8008362:	2001      	movs	r0, #1
 8008364:	f7fb fca0 	bl	8003ca8 <HAL_PWR_EnterSTOPMode>
}
 8008368:	46c0      	nop			; (mov r8, r8)
 800836a:	46bd      	mov	sp, r7
 800836c:	b016      	add	sp, #88	; 0x58
 800836e:	bdb0      	pop	{r4, r5, r7, pc}
 8008370:	20000c44 	.word	0x20000c44
 8008374:	0800d514 	.word	0x0800d514
 8008378:	20000f34 	.word	0x20000f34

0800837c <Proc_CorrectRtc>:

/*用网络时间矫正本地时�??*/
void Proc_CorrectRtc()
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
	g_ProcState.maxStep = 2;
 8008380:	4b21      	ldr	r3, [pc, #132]	; (8008408 <Proc_CorrectRtc+0x8c>)
 8008382:	2202      	movs	r2, #2
 8008384:	70da      	strb	r2, [r3, #3]
	//[0-1]从M5310A获得网络时间
	if (g_ProcState.currentStep == 0)
 8008386:	4b20      	ldr	r3, [pc, #128]	; (8008408 <Proc_CorrectRtc+0x8c>)
 8008388:	789b      	ldrb	r3, [r3, #2]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d111      	bne.n	80083b2 <Proc_CorrectRtc+0x36>
	{
		HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)AT_LocalTimeStr,
 800838e:	491f      	ldr	r1, [pc, #124]	; (800840c <Proc_CorrectRtc+0x90>)
 8008390:	4b1f      	ldr	r3, [pc, #124]	; (8008410 <Proc_CorrectRtc+0x94>)
 8008392:	220a      	movs	r2, #10
 8008394:	0018      	movs	r0, r3
 8008396:	f7fd fdff 	bl	8005f98 <HAL_UART_Transmit_DMA>
							  strlen(AT_LocalTimeStr));
		M5310A_CleanRx();
 800839a:	f7ff fd41 	bl	8007e20 <M5310A_CleanRx>
		M5310A_RestartRx();
 800839e:	f7ff fd53 	bl	8007e48 <M5310A_RestartRx>
		g_ProcState.currentStep = 1;
 80083a2:	4b19      	ldr	r3, [pc, #100]	; (8008408 <Proc_CorrectRtc+0x8c>)
 80083a4:	2201      	movs	r2, #1
 80083a6:	709a      	strb	r2, [r3, #2]
		Log("Try to get Internet time from M5310A.");
 80083a8:	4b1a      	ldr	r3, [pc, #104]	; (8008414 <Proc_CorrectRtc+0x98>)
 80083aa:	0018      	movs	r0, r3
 80083ac:	f7ff f822 	bl	80073f4 <Log>
		return;
 80083b0:	e028      	b.n	8008404 <Proc_CorrectRtc+0x88>
	}
	if (g_ProcState.currentStep == 1)
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <Proc_CorrectRtc+0x8c>)
 80083b4:	789b      	ldrb	r3, [r3, #2]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d124      	bne.n	8008404 <Proc_CorrectRtc+0x88>
	{
		// Check return data
		if (strstr(g_AtBuffer.rxData, AT_LocalTimeReturnStr))
 80083ba:	4a17      	ldr	r2, [pc, #92]	; (8008418 <Proc_CorrectRtc+0x9c>)
 80083bc:	4b17      	ldr	r3, [pc, #92]	; (800841c <Proc_CorrectRtc+0xa0>)
 80083be:	0011      	movs	r1, r2
 80083c0:	0018      	movs	r0, r3
 80083c2:	f002 f8b3 	bl	800a52c <strstr>
 80083c6:	1e03      	subs	r3, r0, #0
 80083c8:	d011      	beq.n	80083ee <Proc_CorrectRtc+0x72>
		{
			//解包，并修改本地时间
			CorrectRtcTime(strstr(g_AtBuffer.rxData, AT_LocalTimeReturnStr));
 80083ca:	4a13      	ldr	r2, [pc, #76]	; (8008418 <Proc_CorrectRtc+0x9c>)
 80083cc:	4b13      	ldr	r3, [pc, #76]	; (800841c <Proc_CorrectRtc+0xa0>)
 80083ce:	0011      	movs	r1, r2
 80083d0:	0018      	movs	r0, r3
 80083d2:	f002 f8ab 	bl	800a52c <strstr>
 80083d6:	0003      	movs	r3, r0
 80083d8:	0018      	movs	r0, r3
 80083da:	f7ff f8e7 	bl	80075ac <CorrectRtcTime>
			Log("Get Internet time successfully.");
 80083de:	4b10      	ldr	r3, [pc, #64]	; (8008420 <Proc_CorrectRtc+0xa4>)
 80083e0:	0018      	movs	r0, r3
 80083e2:	f7ff f807 	bl	80073f4 <Log>
			g_ProcState.currentStep = 2;
 80083e6:	4b08      	ldr	r3, [pc, #32]	; (8008408 <Proc_CorrectRtc+0x8c>)
 80083e8:	2202      	movs	r2, #2
 80083ea:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)AT_LocalTimeStr,
								  strlen(AT_LocalTimeStr));
			M5310A_CleanRx();
			M5310A_RestartRx();
		}
		return;
 80083ec:	e009      	b.n	8008402 <Proc_CorrectRtc+0x86>
			HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)AT_LocalTimeStr,
 80083ee:	4907      	ldr	r1, [pc, #28]	; (800840c <Proc_CorrectRtc+0x90>)
 80083f0:	4b07      	ldr	r3, [pc, #28]	; (8008410 <Proc_CorrectRtc+0x94>)
 80083f2:	220a      	movs	r2, #10
 80083f4:	0018      	movs	r0, r3
 80083f6:	f7fd fdcf 	bl	8005f98 <HAL_UART_Transmit_DMA>
			M5310A_CleanRx();
 80083fa:	f7ff fd11 	bl	8007e20 <M5310A_CleanRx>
			M5310A_RestartRx();
 80083fe:	f7ff fd23 	bl	8007e48 <M5310A_RestartRx>
		return;
 8008402:	46c0      	nop			; (mov r8, r8)
	}
}
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20000e28 	.word	0x20000e28
 800840c:	0800d954 	.word	0x0800d954
 8008410:	20000e34 	.word	0x20000e34
 8008414:	0800d554 	.word	0x0800d554
 8008418:	0800d960 	.word	0x0800d960
 800841c:	2000036a 	.word	0x2000036a
 8008420:	0800d57c 	.word	0x0800d57c

08008424 <Proc_ConfigPsm>:

/*Sequence for config M5310A PSM mode */
/*配置M5310A的Power Saving Mode(省电休眠模式)*/
void Proc_ConfigPsm()
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
	g_ProcState.maxStep = 2;
 8008428:	4b1b      	ldr	r3, [pc, #108]	; (8008498 <Proc_ConfigPsm+0x74>)
 800842a:	2202      	movs	r2, #2
 800842c:	70da      	strb	r2, [r3, #3]
	if (g_ProcState.currentStep == 0)
 800842e:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <Proc_ConfigPsm+0x74>)
 8008430:	789b      	ldrb	r3, [r3, #2]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d117      	bne.n	8008466 <Proc_ConfigPsm+0x42>
	{
		g_ProcState.maxOverTimeMs = 20000;
 8008436:	4b18      	ldr	r3, [pc, #96]	; (8008498 <Proc_ConfigPsm+0x74>)
 8008438:	4a18      	ldr	r2, [pc, #96]	; (800849c <Proc_ConfigPsm+0x78>)
 800843a:	605a      	str	r2, [r3, #4]
		HAL_UART_Transmit_DMA(&DTU_PORT, (uint8_t *)AT_CfgPsmStr,
 800843c:	4918      	ldr	r1, [pc, #96]	; (80084a0 <Proc_ConfigPsm+0x7c>)
 800843e:	4b19      	ldr	r3, [pc, #100]	; (80084a4 <Proc_ConfigPsm+0x80>)
 8008440:	220c      	movs	r2, #12
 8008442:	0018      	movs	r0, r3
 8008444:	f7fd fda8 	bl	8005f98 <HAL_UART_Transmit_DMA>
							  strlen(AT_CfgPsmStr));
		M5310A_CleanRx();
 8008448:	f7ff fcea 	bl	8007e20 <M5310A_CleanRx>
		M5310A_RestartRx();
 800844c:	f7ff fcfc 	bl	8007e48 <M5310A_RestartRx>
		g_ProcState.currentStep = 1;
 8008450:	4b11      	ldr	r3, [pc, #68]	; (8008498 <Proc_ConfigPsm+0x74>)
 8008452:	2201      	movs	r2, #1
 8008454:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8008456:	4b10      	ldr	r3, [pc, #64]	; (8008498 <Proc_ConfigPsm+0x74>)
 8008458:	2200      	movs	r2, #0
 800845a:	609a      	str	r2, [r3, #8]
		Log("Config PSM<1>:Transmit AT+CEREG command.");
 800845c:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <Proc_ConfigPsm+0x84>)
 800845e:	0018      	movs	r0, r3
 8008460:	f7fe ffc8 	bl	80073f4 <Log>
		return;
 8008464:	e016      	b.n	8008494 <Proc_ConfigPsm+0x70>
	}
	if (g_ProcState.currentStep == 1)
 8008466:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <Proc_ConfigPsm+0x74>)
 8008468:	789b      	ldrb	r3, [r3, #2]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d112      	bne.n	8008494 <Proc_ConfigPsm+0x70>
	{
		// Check return data
		if (strstr(g_AtBuffer.rxData, AT_CfgPsmReturnStr))
 800846e:	4a0f      	ldr	r2, [pc, #60]	; (80084ac <Proc_ConfigPsm+0x88>)
 8008470:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <Proc_ConfigPsm+0x8c>)
 8008472:	0011      	movs	r1, r2
 8008474:	0018      	movs	r0, r3
 8008476:	f002 f859 	bl	800a52c <strstr>
 800847a:	1e03      	subs	r3, r0, #0
 800847c:	d009      	beq.n	8008492 <Proc_ConfigPsm+0x6e>
		{
			g_ProcState.currentStep = 2;
 800847e:	4b06      	ldr	r3, [pc, #24]	; (8008498 <Proc_ConfigPsm+0x74>)
 8008480:	2202      	movs	r2, #2
 8008482:	709a      	strb	r2, [r3, #2]
			g_ProcState.passedTimeMs = 0;
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <Proc_ConfigPsm+0x74>)
 8008486:	2200      	movs	r2, #0
 8008488:	609a      	str	r2, [r3, #8]
			Log("Config PSM<2>:PSM config OK.");
 800848a:	4b0a      	ldr	r3, [pc, #40]	; (80084b4 <Proc_ConfigPsm+0x90>)
 800848c:	0018      	movs	r0, r3
 800848e:	f7fe ffb1 	bl	80073f4 <Log>
			// Log("Http Post<4>:AT Ping jumped.\r\n");
			// HAL_UART_Transmit_DMA(&DTU_PORT,(uint8_t*)AT_PingStr,strlen(AT_PingStr));
			// CleanRxBuffer();
			// RestartReceive();
		}
		return;
 8008492:	46c0      	nop			; (mov r8, r8)
	}
}
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	20000e28 	.word	0x20000e28
 800849c:	00004e20 	.word	0x00004e20
 80084a0:	0800d93c 	.word	0x0800d93c
 80084a4:	20000e34 	.word	0x20000e34
 80084a8:	0800d59c 	.word	0x0800d59c
 80084ac:	0800d94c 	.word	0x0800d94c
 80084b0:	2000036a 	.word	0x2000036a
 80084b4:	0800d5c8 	.word	0x0800d5c8

080084b8 <MDB_ResetControl>:
/**
 * @brief 重置MODBUS寄存器状态
 *
 */
void MDB_ResetControl()
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
	uint8_t i;
	g_Mdb_AutoReg.currentLooper = 0;
 80084be:	4b14      	ldr	r3, [pc, #80]	; (8008510 <MDB_ResetControl+0x58>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	701a      	strb	r2, [r3, #0]
	g_Mdb_AutoReg.retryCounter = 0;
 80084c4:	4b12      	ldr	r3, [pc, #72]	; (8008510 <MDB_ResetControl+0x58>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	705a      	strb	r2, [r3, #1]
	g_Mdb_AutoReg.timeCounter = 0;
 80084ca:	4b11      	ldr	r3, [pc, #68]	; (8008510 <MDB_ResetControl+0x58>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	805a      	strh	r2, [r3, #2]
	for (i = 0; i < MDB_AUTO_TABLESIZE; i++)
 80084d0:	1dfb      	adds	r3, r7, #7
 80084d2:	2200      	movs	r2, #0
 80084d4:	701a      	strb	r2, [r3, #0]
 80084d6:	e00c      	b.n	80084f2 <MDB_ResetControl+0x3a>
	{
		g_Mdb_AutoReg.table[i].state = Mdb_Empty;
 80084d8:	1dfb      	adds	r3, r7, #7
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	4a0c      	ldr	r2, [pc, #48]	; (8008510 <MDB_ResetControl+0x58>)
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	18d3      	adds	r3, r2, r3
 80084e2:	3306      	adds	r3, #6
 80084e4:	2202      	movs	r2, #2
 80084e6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MDB_AUTO_TABLESIZE; i++)
 80084e8:	1dfb      	adds	r3, r7, #7
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	1dfb      	adds	r3, r7, #7
 80084ee:	3201      	adds	r2, #1
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	1dfb      	adds	r3, r7, #7
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d9ee      	bls.n	80084d8 <MDB_ResetControl+0x20>
	}
	memset(g_Mdb_Buffer.rxData, 0, 128);
 80084fa:	4b06      	ldr	r3, [pc, #24]	; (8008514 <MDB_ResetControl+0x5c>)
 80084fc:	2280      	movs	r2, #128	; 0x80
 80084fe:	2100      	movs	r1, #0
 8008500:	0018      	movs	r0, r3
 8008502:	f001 fb70 	bl	8009be6 <memset>
}
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	46bd      	mov	sp, r7
 800850a:	b002      	add	sp, #8
 800850c:	bd80      	pop	{r7, pc}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	200009e0 	.word	0x200009e0
 8008514:	200007ce 	.word	0x200007ce

08008518 <Init_MDB_AUTO>:
/**
 * @brief 初始化MOSBUS寄存器
 *
 */
void Init_MDB_AUTO()
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
	// Initalize auto reading table
	g_Mdb_AutoReg.table[0].enabled_Line = 1;
 800851c:	4b18      	ldr	r3, [pc, #96]	; (8008580 <Init_MDB_AUTO+0x68>)
 800851e:	2201      	movs	r2, #1
 8008520:	711a      	strb	r2, [r3, #4]
	g_Mdb_AutoReg.table[0].slaveID = 1;
 8008522:	4b17      	ldr	r3, [pc, #92]	; (8008580 <Init_MDB_AUTO+0x68>)
 8008524:	2201      	movs	r2, #1
 8008526:	715a      	strb	r2, [r3, #5]
	g_Mdb_AutoReg.table[0].destPtr = (uint16_t *)&(g_SensorData.temperture);
 8008528:	4b15      	ldr	r3, [pc, #84]	; (8008580 <Init_MDB_AUTO+0x68>)
 800852a:	4a16      	ldr	r2, [pc, #88]	; (8008584 <Init_MDB_AUTO+0x6c>)
 800852c:	609a      	str	r2, [r3, #8]

	g_Mdb_AutoReg.table[1].enabled_Line = 1;
 800852e:	4b14      	ldr	r3, [pc, #80]	; (8008580 <Init_MDB_AUTO+0x68>)
 8008530:	2201      	movs	r2, #1
 8008532:	731a      	strb	r2, [r3, #12]
	g_Mdb_AutoReg.table[1].slaveID = 2;
 8008534:	4b12      	ldr	r3, [pc, #72]	; (8008580 <Init_MDB_AUTO+0x68>)
 8008536:	2202      	movs	r2, #2
 8008538:	735a      	strb	r2, [r3, #13]
	g_Mdb_AutoReg.table[1].destPtr = (uint16_t *)&(g_SensorData.oxgen);
 800853a:	4b11      	ldr	r3, [pc, #68]	; (8008580 <Init_MDB_AUTO+0x68>)
 800853c:	4a12      	ldr	r2, [pc, #72]	; (8008588 <Init_MDB_AUTO+0x70>)
 800853e:	611a      	str	r2, [r3, #16]

	g_Mdb_AutoReg.table[2].enabled_Line = 1;
 8008540:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <Init_MDB_AUTO+0x68>)
 8008542:	2201      	movs	r2, #1
 8008544:	751a      	strb	r2, [r3, #20]
	g_Mdb_AutoReg.table[2].slaveID = 3;
 8008546:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <Init_MDB_AUTO+0x68>)
 8008548:	2203      	movs	r2, #3
 800854a:	755a      	strb	r2, [r3, #21]
	g_Mdb_AutoReg.table[2].destPtr = (uint16_t *)&(g_SensorData.pH);
 800854c:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <Init_MDB_AUTO+0x68>)
 800854e:	4a0f      	ldr	r2, [pc, #60]	; (800858c <Init_MDB_AUTO+0x74>)
 8008550:	619a      	str	r2, [r3, #24]

	g_Mdb_AutoReg.table[3].enabled_Line = 2;
 8008552:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <Init_MDB_AUTO+0x68>)
 8008554:	2202      	movs	r2, #2
 8008556:	771a      	strb	r2, [r3, #28]
	g_Mdb_AutoReg.table[3].slaveID = 4;
 8008558:	4b09      	ldr	r3, [pc, #36]	; (8008580 <Init_MDB_AUTO+0x68>)
 800855a:	2204      	movs	r2, #4
 800855c:	775a      	strb	r2, [r3, #29]
	g_Mdb_AutoReg.table[3].destPtr = (uint16_t *)&(g_SensorData.turbidity);
 800855e:	4b08      	ldr	r3, [pc, #32]	; (8008580 <Init_MDB_AUTO+0x68>)
 8008560:	4a0b      	ldr	r2, [pc, #44]	; (8008590 <Init_MDB_AUTO+0x78>)
 8008562:	621a      	str	r2, [r3, #32]

	g_Mdb_AutoReg.table[4].enabled_Line = 2;
 8008564:	4b06      	ldr	r3, [pc, #24]	; (8008580 <Init_MDB_AUTO+0x68>)
 8008566:	2224      	movs	r2, #36	; 0x24
 8008568:	2102      	movs	r1, #2
 800856a:	5499      	strb	r1, [r3, r2]
	g_Mdb_AutoReg.table[4].slaveID = 5;
 800856c:	4b04      	ldr	r3, [pc, #16]	; (8008580 <Init_MDB_AUTO+0x68>)
 800856e:	2225      	movs	r2, #37	; 0x25
 8008570:	2105      	movs	r1, #5
 8008572:	5499      	strb	r1, [r3, r2]
	g_Mdb_AutoReg.table[4].destPtr = (uint16_t *)&(g_SensorData.ammon_ion_con);
 8008574:	4b02      	ldr	r3, [pc, #8]	; (8008580 <Init_MDB_AUTO+0x68>)
 8008576:	4a07      	ldr	r2, [pc, #28]	; (8008594 <Init_MDB_AUTO+0x7c>)
 8008578:	629a      	str	r2, [r3, #40]	; 0x28
}
 800857a:	46c0      	nop			; (mov r8, r8)
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	200009e0 	.word	0x200009e0
 8008584:	20000a30 	.word	0x20000a30
 8008588:	20000a38 	.word	0x20000a38
 800858c:	20000a34 	.word	0x20000a34
 8008590:	20000a3c 	.word	0x20000a3c
 8008594:	20000a40 	.word	0x20000a40

08008598 <ArrayEqu>:
/**
 * @brief 判断两个8位数组的前n项是否相等
 *
 */
uint8_t ArrayEqu(uint8_t *src, uint8_t *dest, uint16_t length)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	1dbb      	adds	r3, r7, #6
 80085a4:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	for (i = 0; i < length; i++)
 80085a6:	2316      	movs	r3, #22
 80085a8:	18fb      	adds	r3, r7, r3
 80085aa:	2200      	movs	r2, #0
 80085ac:	801a      	strh	r2, [r3, #0]
 80085ae:	e014      	b.n	80085da <ArrayEqu+0x42>
	{
		if (*(src + i) != *(dest + i))
 80085b0:	2116      	movs	r1, #22
 80085b2:	187b      	adds	r3, r7, r1
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	18d3      	adds	r3, r2, r3
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	187b      	adds	r3, r7, r1
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	18cb      	adds	r3, r1, r3
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d001      	beq.n	80085ce <ArrayEqu+0x36>
		{
			return 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	e00d      	b.n	80085ea <ArrayEqu+0x52>
	for (i = 0; i < length; i++)
 80085ce:	2116      	movs	r1, #22
 80085d0:	187b      	adds	r3, r7, r1
 80085d2:	881a      	ldrh	r2, [r3, #0]
 80085d4:	187b      	adds	r3, r7, r1
 80085d6:	3201      	adds	r2, #1
 80085d8:	801a      	strh	r2, [r3, #0]
 80085da:	2316      	movs	r3, #22
 80085dc:	18fa      	adds	r2, r7, r3
 80085de:	1dbb      	adds	r3, r7, #6
 80085e0:	8812      	ldrh	r2, [r2, #0]
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d3e3      	bcc.n	80085b0 <ArrayEqu+0x18>
		}
	}
	return 1;
 80085e8:	2301      	movs	r3, #1
}
 80085ea:	0018      	movs	r0, r3
 80085ec:	46bd      	mov	sp, r7
 80085ee:	b006      	add	sp, #24
 80085f0:	bd80      	pop	{r7, pc}
	...

080085f4 <MDB_DecodeFrame>:
 * @brief 读取传感器数据，进行数据比对和解析
 *
 * @return 是否正常完成解析 1-正常 0-不正常
 */
uint8_t MDB_DecodeFrame()
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
	union f32_u8 t_floatVal;
	t_floatVal.f32 = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	607b      	str	r3, [r7, #4]
	// Try to deal receive buffer
	//通过对比接收到的数据头，判断是否位正确响�??
	//没有CRC校验计算过程
	if (ArrayEqu((uint8_t *)(g_Mdb_Buffer.rxData),
				 (uint8_t *)(MDB_RX_ARRAY[g_Mdb_AutoReg.currentLooper]), 3))
 80085fe:	4b5a      	ldr	r3, [pc, #360]	; (8008768 <MDB_DecodeFrame+0x174>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	001a      	movs	r2, r3
 8008604:	0013      	movs	r3, r2
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	189b      	adds	r3, r3, r2
 800860a:	4a58      	ldr	r2, [pc, #352]	; (800876c <MDB_DecodeFrame+0x178>)
 800860c:	1899      	adds	r1, r3, r2
	if (ArrayEqu((uint8_t *)(g_Mdb_Buffer.rxData),
 800860e:	4b58      	ldr	r3, [pc, #352]	; (8008770 <MDB_DecodeFrame+0x17c>)
 8008610:	2203      	movs	r2, #3
 8008612:	0018      	movs	r0, r3
 8008614:	f7ff ffc0 	bl	8008598 <ArrayEqu>
 8008618:	1e03      	subs	r3, r0, #0
 800861a:	d100      	bne.n	800861e <MDB_DecodeFrame+0x2a>
 800861c:	e09f      	b.n	800875e <MDB_DecodeFrame+0x16a>
	{

		if ((g_Mdb_Buffer.rxData[5] == 0) && (g_Mdb_Buffer.rxData[6] == 0))
 800861e:	4b55      	ldr	r3, [pc, #340]	; (8008774 <MDB_DecodeFrame+0x180>)
 8008620:	2247      	movs	r2, #71	; 0x47
 8008622:	5c9b      	ldrb	r3, [r3, r2]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d106      	bne.n	8008636 <MDB_DecodeFrame+0x42>
 8008628:	4b52      	ldr	r3, [pc, #328]	; (8008774 <MDB_DecodeFrame+0x180>)
 800862a:	2248      	movs	r2, #72	; 0x48
 800862c:	5c9b      	ldrb	r3, [r3, r2]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <MDB_DecodeFrame+0x42>
		{
			return 0;
 8008632:	2300      	movs	r3, #0
 8008634:	e094      	b.n	8008760 <MDB_DecodeFrame+0x16c>
		}

		//解析和存储数据
		if (g_Mdb_Buffer.rxData[0] < 0x7F)
 8008636:	4b4f      	ldr	r3, [pc, #316]	; (8008774 <MDB_DecodeFrame+0x180>)
 8008638:	2242      	movs	r2, #66	; 0x42
 800863a:	5c9b      	ldrb	r3, [r3, r2]
 800863c:	2b7e      	cmp	r3, #126	; 0x7e
 800863e:	d900      	bls.n	8008642 <MDB_DecodeFrame+0x4e>
 8008640:	e088      	b.n	8008754 <MDB_DecodeFrame+0x160>
		{
			switch (g_Mdb_AutoReg.currentLooper)
 8008642:	4b49      	ldr	r3, [pc, #292]	; (8008768 <MDB_DecodeFrame+0x174>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b04      	cmp	r3, #4
 8008648:	d900      	bls.n	800864c <MDB_DecodeFrame+0x58>
 800864a:	e085      	b.n	8008758 <MDB_DecodeFrame+0x164>
 800864c:	009a      	lsls	r2, r3, #2
 800864e:	4b4a      	ldr	r3, [pc, #296]	; (8008778 <MDB_DecodeFrame+0x184>)
 8008650:	18d3      	adds	r3, r2, r3
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	469f      	mov	pc, r3
			{
			case 0:
				g_SensorData.temperture = (float)(g_Mdb_Buffer.rxData[3] * 0x100 + g_Mdb_Buffer.rxData[4]) / 100.0f;
 8008656:	4b47      	ldr	r3, [pc, #284]	; (8008774 <MDB_DecodeFrame+0x180>)
 8008658:	2245      	movs	r2, #69	; 0x45
 800865a:	5c9b      	ldrb	r3, [r3, r2]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	4a45      	ldr	r2, [pc, #276]	; (8008774 <MDB_DecodeFrame+0x180>)
 8008660:	2146      	movs	r1, #70	; 0x46
 8008662:	5c52      	ldrb	r2, [r2, r1]
 8008664:	189b      	adds	r3, r3, r2
 8008666:	0018      	movs	r0, r3
 8008668:	f7f8 fa30 	bl	8000acc <__aeabi_i2f>
 800866c:	1c03      	adds	r3, r0, #0
 800866e:	4943      	ldr	r1, [pc, #268]	; (800877c <MDB_DecodeFrame+0x188>)
 8008670:	1c18      	adds	r0, r3, #0
 8008672:	f7f8 f805 	bl	8000680 <__aeabi_fdiv>
 8008676:	1c03      	adds	r3, r0, #0
 8008678:	1c1a      	adds	r2, r3, #0
 800867a:	4b41      	ldr	r3, [pc, #260]	; (8008780 <MDB_DecodeFrame+0x18c>)
 800867c:	625a      	str	r2, [r3, #36]	; 0x24
				Log("Temperature data updated.");
 800867e:	4b41      	ldr	r3, [pc, #260]	; (8008784 <MDB_DecodeFrame+0x190>)
 8008680:	0018      	movs	r0, r3
 8008682:	f7fe feb7 	bl	80073f4 <Log>
				break;
 8008686:	e068      	b.n	800875a <MDB_DecodeFrame+0x166>
			case 1:
				g_SensorData.oxgen = (float)(g_Mdb_Buffer.rxData[3] * 0x100 + g_Mdb_Buffer.rxData[4]) / 100.0f;
 8008688:	4b3a      	ldr	r3, [pc, #232]	; (8008774 <MDB_DecodeFrame+0x180>)
 800868a:	2245      	movs	r2, #69	; 0x45
 800868c:	5c9b      	ldrb	r3, [r3, r2]
 800868e:	021b      	lsls	r3, r3, #8
 8008690:	4a38      	ldr	r2, [pc, #224]	; (8008774 <MDB_DecodeFrame+0x180>)
 8008692:	2146      	movs	r1, #70	; 0x46
 8008694:	5c52      	ldrb	r2, [r2, r1]
 8008696:	189b      	adds	r3, r3, r2
 8008698:	0018      	movs	r0, r3
 800869a:	f7f8 fa17 	bl	8000acc <__aeabi_i2f>
 800869e:	1c03      	adds	r3, r0, #0
 80086a0:	4936      	ldr	r1, [pc, #216]	; (800877c <MDB_DecodeFrame+0x188>)
 80086a2:	1c18      	adds	r0, r3, #0
 80086a4:	f7f7 ffec 	bl	8000680 <__aeabi_fdiv>
 80086a8:	1c03      	adds	r3, r0, #0
 80086aa:	1c1a      	adds	r2, r3, #0
 80086ac:	4b34      	ldr	r3, [pc, #208]	; (8008780 <MDB_DecodeFrame+0x18c>)
 80086ae:	62da      	str	r2, [r3, #44]	; 0x2c
				Log("Oxygen data updated.");
 80086b0:	4b35      	ldr	r3, [pc, #212]	; (8008788 <MDB_DecodeFrame+0x194>)
 80086b2:	0018      	movs	r0, r3
 80086b4:	f7fe fe9e 	bl	80073f4 <Log>
				break;
 80086b8:	e04f      	b.n	800875a <MDB_DecodeFrame+0x166>
			case 2:
				g_SensorData.pH = (float)(g_Mdb_Buffer.rxData[3] * 0x100 + g_Mdb_Buffer.rxData[4]) / 100.0f;
 80086ba:	4b2e      	ldr	r3, [pc, #184]	; (8008774 <MDB_DecodeFrame+0x180>)
 80086bc:	2245      	movs	r2, #69	; 0x45
 80086be:	5c9b      	ldrb	r3, [r3, r2]
 80086c0:	021b      	lsls	r3, r3, #8
 80086c2:	4a2c      	ldr	r2, [pc, #176]	; (8008774 <MDB_DecodeFrame+0x180>)
 80086c4:	2146      	movs	r1, #70	; 0x46
 80086c6:	5c52      	ldrb	r2, [r2, r1]
 80086c8:	189b      	adds	r3, r3, r2
 80086ca:	0018      	movs	r0, r3
 80086cc:	f7f8 f9fe 	bl	8000acc <__aeabi_i2f>
 80086d0:	1c03      	adds	r3, r0, #0
 80086d2:	492a      	ldr	r1, [pc, #168]	; (800877c <MDB_DecodeFrame+0x188>)
 80086d4:	1c18      	adds	r0, r3, #0
 80086d6:	f7f7 ffd3 	bl	8000680 <__aeabi_fdiv>
 80086da:	1c03      	adds	r3, r0, #0
 80086dc:	1c1a      	adds	r2, r3, #0
 80086de:	4b28      	ldr	r3, [pc, #160]	; (8008780 <MDB_DecodeFrame+0x18c>)
 80086e0:	629a      	str	r2, [r3, #40]	; 0x28
				Log("PH data updated.");
 80086e2:	4b2a      	ldr	r3, [pc, #168]	; (800878c <MDB_DecodeFrame+0x198>)
 80086e4:	0018      	movs	r0, r3
 80086e6:	f7fe fe85 	bl	80073f4 <Log>
				break;
 80086ea:	e036      	b.n	800875a <MDB_DecodeFrame+0x166>
			case 3:
				t_floatVal.u8[3] = g_Mdb_Buffer.rxData[3];
 80086ec:	4b21      	ldr	r3, [pc, #132]	; (8008774 <MDB_DecodeFrame+0x180>)
 80086ee:	2245      	movs	r2, #69	; 0x45
 80086f0:	5c9a      	ldrb	r2, [r3, r2]
 80086f2:	1d3b      	adds	r3, r7, #4
 80086f4:	70da      	strb	r2, [r3, #3]
				t_floatVal.u8[2] = g_Mdb_Buffer.rxData[4];
 80086f6:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <MDB_DecodeFrame+0x180>)
 80086f8:	2246      	movs	r2, #70	; 0x46
 80086fa:	5c9a      	ldrb	r2, [r3, r2]
 80086fc:	1d3b      	adds	r3, r7, #4
 80086fe:	709a      	strb	r2, [r3, #2]
				t_floatVal.u8[1] = g_Mdb_Buffer.rxData[5];
 8008700:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <MDB_DecodeFrame+0x180>)
 8008702:	2247      	movs	r2, #71	; 0x47
 8008704:	5c9a      	ldrb	r2, [r3, r2]
 8008706:	1d3b      	adds	r3, r7, #4
 8008708:	705a      	strb	r2, [r3, #1]
				t_floatVal.u8[0] = g_Mdb_Buffer.rxData[6];
 800870a:	4b1a      	ldr	r3, [pc, #104]	; (8008774 <MDB_DecodeFrame+0x180>)
 800870c:	2248      	movs	r2, #72	; 0x48
 800870e:	5c9a      	ldrb	r2, [r3, r2]
 8008710:	1d3b      	adds	r3, r7, #4
 8008712:	701a      	strb	r2, [r3, #0]

				g_SensorData.turbidity = t_floatVal.f32;
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	4b1a      	ldr	r3, [pc, #104]	; (8008780 <MDB_DecodeFrame+0x18c>)
 8008718:	631a      	str	r2, [r3, #48]	; 0x30
				Log("Turbidity data updated.");
 800871a:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <MDB_DecodeFrame+0x19c>)
 800871c:	0018      	movs	r0, r3
 800871e:	f7fe fe69 	bl	80073f4 <Log>
			case 4:
				g_SensorData.ammon_ion_con = (float)(g_Mdb_Buffer.rxData[3] * 0x100 + g_Mdb_Buffer.rxData[4]) / 100.0f;
 8008722:	4b14      	ldr	r3, [pc, #80]	; (8008774 <MDB_DecodeFrame+0x180>)
 8008724:	2245      	movs	r2, #69	; 0x45
 8008726:	5c9b      	ldrb	r3, [r3, r2]
 8008728:	021b      	lsls	r3, r3, #8
 800872a:	4a12      	ldr	r2, [pc, #72]	; (8008774 <MDB_DecodeFrame+0x180>)
 800872c:	2146      	movs	r1, #70	; 0x46
 800872e:	5c52      	ldrb	r2, [r2, r1]
 8008730:	189b      	adds	r3, r3, r2
 8008732:	0018      	movs	r0, r3
 8008734:	f7f8 f9ca 	bl	8000acc <__aeabi_i2f>
 8008738:	1c03      	adds	r3, r0, #0
 800873a:	4910      	ldr	r1, [pc, #64]	; (800877c <MDB_DecodeFrame+0x188>)
 800873c:	1c18      	adds	r0, r3, #0
 800873e:	f7f7 ff9f 	bl	8000680 <__aeabi_fdiv>
 8008742:	1c03      	adds	r3, r0, #0
 8008744:	1c1a      	adds	r2, r3, #0
 8008746:	4b0e      	ldr	r3, [pc, #56]	; (8008780 <MDB_DecodeFrame+0x18c>)
 8008748:	635a      	str	r2, [r3, #52]	; 0x34
				Log("Ammonium ion concentration data updated.");
 800874a:	4b12      	ldr	r3, [pc, #72]	; (8008794 <MDB_DecodeFrame+0x1a0>)
 800874c:	0018      	movs	r0, r3
 800874e:	f7fe fe51 	bl	80073f4 <Log>
			default:
				break;
 8008752:	e001      	b.n	8008758 <MDB_DecodeFrame+0x164>
			}
		}
 8008754:	46c0      	nop			; (mov r8, r8)
 8008756:	e000      	b.n	800875a <MDB_DecodeFrame+0x166>
				break;
 8008758:	46c0      	nop			; (mov r8, r8)
		return 1;
 800875a:	2301      	movs	r3, #1
 800875c:	e000      	b.n	8008760 <MDB_DecodeFrame+0x16c>
	}
	else
	{
		return 0;
 800875e:	2300      	movs	r3, #0
	}
}
 8008760:	0018      	movs	r0, r3
 8008762:	46bd      	mov	sp, r7
 8008764:	b002      	add	sp, #8
 8008766:	bd80      	pop	{r7, pc}
 8008768:	200009e0 	.word	0x200009e0
 800876c:	20000028 	.word	0x20000028
 8008770:	200007ce 	.word	0x200007ce
 8008774:	2000078c 	.word	0x2000078c
 8008778:	0800d97c 	.word	0x0800d97c
 800877c:	42c80000 	.word	0x42c80000
 8008780:	20000a0c 	.word	0x20000a0c
 8008784:	0800d5e8 	.word	0x0800d5e8
 8008788:	0800d604 	.word	0x0800d604
 800878c:	0800d61c 	.word	0x0800d61c
 8008790:	0800d630 	.word	0x0800d630
 8008794:	0800d648 	.word	0x0800d648

08008798 <Proc_MDBread>:
/**
 * @brief 读取传感器采集的数据
 *
 */
void Proc_MDBread()
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef t_CurrTime;
	g_ProcState.maxStep = MDB_AUTO_TABLESIZE;
 800879e:	4b88      	ldr	r3, [pc, #544]	; (80089c0 <Proc_MDBread+0x228>)
 80087a0:	2205      	movs	r2, #5
 80087a2:	70da      	strb	r2, [r3, #3]
	g_ProcState.maxOverTimeMs = 8000;
 80087a4:	4b86      	ldr	r3, [pc, #536]	; (80089c0 <Proc_MDBread+0x228>)
 80087a6:	22fa      	movs	r2, #250	; 0xfa
 80087a8:	0152      	lsls	r2, r2, #5
 80087aa:	605a      	str	r2, [r3, #4]
	HAL_RTC_GetTime(&hrtc, &t_CurrTime, RTC_FORMAT_BIN);
 80087ac:	1d39      	adds	r1, r7, #4
 80087ae:	4b85      	ldr	r3, [pc, #532]	; (80089c4 <Proc_MDBread+0x22c>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7fc fae8 	bl	8004d88 <HAL_RTC_GetTime>

	// 打开传感器线路1和2的电源，等待30秒后设备启动完成
	if (g_Mdb_AutoReg.currentLooper == 0)
 80087b8:	4b83      	ldr	r3, [pc, #524]	; (80089c8 <Proc_MDBread+0x230>)
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d120      	bne.n	8008802 <Proc_MDBread+0x6a>
	{
		if (GPIO_PIN_SET != HAL_GPIO_ReadPin(PWR1_EN_GPIO_Port, PWR1_EN_Pin))
 80087c0:	2380      	movs	r3, #128	; 0x80
 80087c2:	021a      	lsls	r2, r3, #8
 80087c4:	23a0      	movs	r3, #160	; 0xa0
 80087c6:	05db      	lsls	r3, r3, #23
 80087c8:	0011      	movs	r1, r2
 80087ca:	0018      	movs	r0, r3
 80087cc:	f7fb fa32 	bl	8003c34 <HAL_GPIO_ReadPin>
 80087d0:	0003      	movs	r3, r0
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d015      	beq.n	8008802 <Proc_MDBread+0x6a>
		{
			HAL_GPIO_WritePin(PWR1_EN_GPIO_Port, PWR1_EN_Pin, GPIO_PIN_SET);
 80087d6:	2380      	movs	r3, #128	; 0x80
 80087d8:	0219      	lsls	r1, r3, #8
 80087da:	23a0      	movs	r3, #160	; 0xa0
 80087dc:	05db      	lsls	r3, r3, #23
 80087de:	2201      	movs	r2, #1
 80087e0:	0018      	movs	r0, r3
 80087e2:	f7fb fa44 	bl	8003c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWR2_EN_GPIO_Port, PWR2_EN_Pin, GPIO_PIN_SET);
 80087e6:	4b79      	ldr	r3, [pc, #484]	; (80089cc <Proc_MDBread+0x234>)
 80087e8:	2201      	movs	r2, #1
 80087ea:	2180      	movs	r1, #128	; 0x80
 80087ec:	0018      	movs	r0, r3
 80087ee:	f7fb fa3e 	bl	8003c6e <HAL_GPIO_WritePin>
			Log("Turn on power 1+2 and wait 30seconds.");
 80087f2:	4b77      	ldr	r3, [pc, #476]	; (80089d0 <Proc_MDBread+0x238>)
 80087f4:	0018      	movs	r0, r3
 80087f6:	f7fe fdfd 	bl	80073f4 <Log>
			HAL_Delay(30000);
 80087fa:	4b76      	ldr	r3, [pc, #472]	; (80089d4 <Proc_MDBread+0x23c>)
 80087fc:	0018      	movs	r0, r3
 80087fe:	f7fa f8f3 	bl	80029e8 <HAL_Delay>
		}
	}
	// Ask looper
	g_Mdb_AutoReg.currentLooper = g_ProcState.currentStep;
 8008802:	4b6f      	ldr	r3, [pc, #444]	; (80089c0 <Proc_MDBread+0x228>)
 8008804:	789a      	ldrb	r2, [r3, #2]
 8008806:	4b70      	ldr	r3, [pc, #448]	; (80089c8 <Proc_MDBread+0x230>)
 8008808:	701a      	strb	r2, [r3, #0]

	// 读取传感器数据
	if (MDB_DecodeFrame() != 0)
 800880a:	f7ff fef3 	bl	80085f4 <MDB_DecodeFrame>
 800880e:	1e03      	subs	r3, r0, #0
 8008810:	d03a      	beq.n	8008888 <Proc_MDBread+0xf0>
	{
		// 接收到数据
		HAL_UART_AbortReceive(&RS485_1_PORT);
 8008812:	4b71      	ldr	r3, [pc, #452]	; (80089d8 <Proc_MDBread+0x240>)
 8008814:	0018      	movs	r0, r3
 8008816:	f7fd fce7 	bl	80061e8 <HAL_UART_AbortReceive>
		HAL_UART_AbortReceive(&RS485_2_PORT);
 800881a:	4b70      	ldr	r3, [pc, #448]	; (80089dc <Proc_MDBread+0x244>)
 800881c:	0018      	movs	r0, r3
 800881e:	f7fd fce3 	bl	80061e8 <HAL_UART_AbortReceive>
		memset(g_Mdb_Buffer.rxData, 0, 128);
 8008822:	4b6f      	ldr	r3, [pc, #444]	; (80089e0 <Proc_MDBread+0x248>)
 8008824:	2280      	movs	r2, #128	; 0x80
 8008826:	2100      	movs	r1, #0
 8008828:	0018      	movs	r0, r3
 800882a:	f001 f9dc 	bl	8009be6 <memset>
		g_Mdb_AutoReg.timeCounter = 0;
 800882e:	4b66      	ldr	r3, [pc, #408]	; (80089c8 <Proc_MDBread+0x230>)
 8008830:	2200      	movs	r2, #0
 8008832:	805a      	strh	r2, [r3, #2]
		g_ProcState.currentStep++;
 8008834:	4b62      	ldr	r3, [pc, #392]	; (80089c0 <Proc_MDBread+0x228>)
 8008836:	789b      	ldrb	r3, [r3, #2]
 8008838:	3301      	adds	r3, #1
 800883a:	b2da      	uxtb	r2, r3
 800883c:	4b60      	ldr	r3, [pc, #384]	; (80089c0 <Proc_MDBread+0x228>)
 800883e:	709a      	strb	r2, [r3, #2]
		g_ProcState.passedTimeMs = 0;
 8008840:	4b5f      	ldr	r3, [pc, #380]	; (80089c0 <Proc_MDBread+0x228>)
 8008842:	2200      	movs	r2, #0
 8008844:	609a      	str	r2, [r3, #8]
		g_Mdb_AutoReg.retryCounter = 0;
 8008846:	4b60      	ldr	r3, [pc, #384]	; (80089c8 <Proc_MDBread+0x230>)
 8008848:	2200      	movs	r2, #0
 800884a:	705a      	strb	r2, [r3, #1]
		Log("Modbus:PDU received.");
 800884c:	4b65      	ldr	r3, [pc, #404]	; (80089e4 <Proc_MDBread+0x24c>)
 800884e:	0018      	movs	r0, r3
 8008850:	f7fe fdd0 	bl	80073f4 <Log>
		if (g_Mdb_AutoReg.currentLooper == g_ProcState.maxStep)
 8008854:	4b5c      	ldr	r3, [pc, #368]	; (80089c8 <Proc_MDBread+0x230>)
 8008856:	781a      	ldrb	r2, [r3, #0]
 8008858:	4b59      	ldr	r3, [pc, #356]	; (80089c0 <Proc_MDBread+0x228>)
 800885a:	78db      	ldrb	r3, [r3, #3]
 800885c:	429a      	cmp	r2, r3
 800885e:	d000      	beq.n	8008862 <Proc_MDBread+0xca>
 8008860:	e09c      	b.n	800899c <Proc_MDBread+0x204>
		{
			// 关闭传感器
			HAL_GPIO_WritePin(PWR1_EN_GPIO_Port, PWR1_EN_Pin, GPIO_PIN_RESET);
 8008862:	2380      	movs	r3, #128	; 0x80
 8008864:	0219      	lsls	r1, r3, #8
 8008866:	23a0      	movs	r3, #160	; 0xa0
 8008868:	05db      	lsls	r3, r3, #23
 800886a:	2200      	movs	r2, #0
 800886c:	0018      	movs	r0, r3
 800886e:	f7fb f9fe 	bl	8003c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PWR2_EN_GPIO_Port, PWR2_EN_Pin, GPIO_PIN_RESET);
 8008872:	4b56      	ldr	r3, [pc, #344]	; (80089cc <Proc_MDBread+0x234>)
 8008874:	2200      	movs	r2, #0
 8008876:	2180      	movs	r1, #128	; 0x80
 8008878:	0018      	movs	r0, r3
 800887a:	f7fb f9f8 	bl	8003c6e <HAL_GPIO_WritePin>
			Log("Turn off power 1+2 .");
 800887e:	4b5a      	ldr	r3, [pc, #360]	; (80089e8 <Proc_MDBread+0x250>)
 8008880:	0018      	movs	r0, r3
 8008882:	f7fe fdb7 	bl	80073f4 <Log>
 8008886:	e089      	b.n	800899c <Proc_MDBread+0x204>
		}
	}
	else
	{
		// 未接收到数据
		if (g_Mdb_AutoReg.timeCounter == 0)
 8008888:	4b4f      	ldr	r3, [pc, #316]	; (80089c8 <Proc_MDBread+0x230>)
 800888a:	885b      	ldrh	r3, [r3, #2]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d141      	bne.n	8008914 <Proc_MDBread+0x17c>
		{
			// 若计时器为0，则可以尝试读取数据
			HAL_UART_AbortReceive(&RS485_1_PORT);
 8008890:	4b51      	ldr	r3, [pc, #324]	; (80089d8 <Proc_MDBread+0x240>)
 8008892:	0018      	movs	r0, r3
 8008894:	f7fd fca8 	bl	80061e8 <HAL_UART_AbortReceive>
			HAL_UART_AbortReceive(&RS485_2_PORT);
 8008898:	4b50      	ldr	r3, [pc, #320]	; (80089dc <Proc_MDBread+0x244>)
 800889a:	0018      	movs	r0, r3
 800889c:	f7fd fca4 	bl	80061e8 <HAL_UART_AbortReceive>
			memset(g_Mdb_Buffer.rxData, 0, 128);
 80088a0:	4b4f      	ldr	r3, [pc, #316]	; (80089e0 <Proc_MDBread+0x248>)
 80088a2:	2280      	movs	r2, #128	; 0x80
 80088a4:	2100      	movs	r1, #0
 80088a6:	0018      	movs	r0, r3
 80088a8:	f001 f99d 	bl	8009be6 <memset>
			// 查询数据
			if (g_Mdb_AutoReg.table[g_Mdb_AutoReg.currentLooper].enabled_Line == 1)
 80088ac:	4b46      	ldr	r3, [pc, #280]	; (80089c8 <Proc_MDBread+0x230>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	4a45      	ldr	r2, [pc, #276]	; (80089c8 <Proc_MDBread+0x230>)
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	18d3      	adds	r3, r2, r3
 80088b6:	3304      	adds	r3, #4
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d111      	bne.n	80088e2 <Proc_MDBread+0x14a>
			{
				// 查询线路1上的设备数据
				HAL_UART_Transmit(&RS485_1_PORT,
								  MDB_TX_ARRAY[g_Mdb_AutoReg.currentLooper], 8, 1000);
 80088be:	4b42      	ldr	r3, [pc, #264]	; (80089c8 <Proc_MDBread+0x230>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	00da      	lsls	r2, r3, #3
 80088c4:	4b49      	ldr	r3, [pc, #292]	; (80089ec <Proc_MDBread+0x254>)
 80088c6:	18d1      	adds	r1, r2, r3
				HAL_UART_Transmit(&RS485_1_PORT,
 80088c8:	23fa      	movs	r3, #250	; 0xfa
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4842      	ldr	r0, [pc, #264]	; (80089d8 <Proc_MDBread+0x240>)
 80088ce:	2208      	movs	r2, #8
 80088d0:	f7fd faba 	bl	8005e48 <HAL_UART_Transmit>
				HAL_UART_Receive_DMA(&RS485_1_PORT,
 80088d4:	4942      	ldr	r1, [pc, #264]	; (80089e0 <Proc_MDBread+0x248>)
 80088d6:	4b40      	ldr	r3, [pc, #256]	; (80089d8 <Proc_MDBread+0x240>)
 80088d8:	227f      	movs	r2, #127	; 0x7f
 80088da:	0018      	movs	r0, r3
 80088dc:	f7fd fbec 	bl	80060b8 <HAL_UART_Receive_DMA>
 80088e0:	e010      	b.n	8008904 <Proc_MDBread+0x16c>
			}
			else
			{
				// 查询线路2上的设备数据
				HAL_UART_Transmit(&RS485_2_PORT,
								  MDB_TX_ARRAY[g_Mdb_AutoReg.currentLooper], 8, 1000);
 80088e2:	4b39      	ldr	r3, [pc, #228]	; (80089c8 <Proc_MDBread+0x230>)
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	00da      	lsls	r2, r3, #3
 80088e8:	4b40      	ldr	r3, [pc, #256]	; (80089ec <Proc_MDBread+0x254>)
 80088ea:	18d1      	adds	r1, r2, r3
				HAL_UART_Transmit(&RS485_2_PORT,
 80088ec:	23fa      	movs	r3, #250	; 0xfa
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	483a      	ldr	r0, [pc, #232]	; (80089dc <Proc_MDBread+0x244>)
 80088f2:	2208      	movs	r2, #8
 80088f4:	f7fd faa8 	bl	8005e48 <HAL_UART_Transmit>
				HAL_UART_Receive_DMA(&RS485_2_PORT,
 80088f8:	4939      	ldr	r1, [pc, #228]	; (80089e0 <Proc_MDBread+0x248>)
 80088fa:	4b38      	ldr	r3, [pc, #224]	; (80089dc <Proc_MDBread+0x244>)
 80088fc:	227f      	movs	r2, #127	; 0x7f
 80088fe:	0018      	movs	r0, r3
 8008900:	f7fd fbda 	bl	80060b8 <HAL_UART_Receive_DMA>
									 (uint8_t *)(g_Mdb_Buffer.rxData), 127);
			}
			if (g_Mdb_AutoReg.retryCounter == 0)
 8008904:	4b30      	ldr	r3, [pc, #192]	; (80089c8 <Proc_MDBread+0x230>)
 8008906:	785b      	ldrb	r3, [r3, #1]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d103      	bne.n	8008914 <Proc_MDBread+0x17c>
			{
				Log("Modbus:Send master read request.");
 800890c:	4b38      	ldr	r3, [pc, #224]	; (80089f0 <Proc_MDBread+0x258>)
 800890e:	0018      	movs	r0, r3
 8008910:	f7fe fd70 	bl	80073f4 <Log>
			}
		}

		// 使用计时器来操控重试的时间间隔
		if (g_Mdb_AutoReg.timeCounter < MDB_OVERTIME_MS)
 8008914:	4b2c      	ldr	r3, [pc, #176]	; (80089c8 <Proc_MDBread+0x230>)
 8008916:	885a      	ldrh	r2, [r3, #2]
 8008918:	23fa      	movs	r3, #250	; 0xfa
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	429a      	cmp	r2, r3
 800891e:	d206      	bcs.n	800892e <Proc_MDBread+0x196>
		{
			// 时间间隔未到阈值，则等待
			g_Mdb_AutoReg.timeCounter += CIRCLE_GAP_MS;
 8008920:	4b29      	ldr	r3, [pc, #164]	; (80089c8 <Proc_MDBread+0x230>)
 8008922:	885b      	ldrh	r3, [r3, #2]
 8008924:	3332      	adds	r3, #50	; 0x32
 8008926:	b29a      	uxth	r2, r3
 8008928:	4b27      	ldr	r3, [pc, #156]	; (80089c8 <Proc_MDBread+0x230>)
 800892a:	805a      	strh	r2, [r3, #2]
 800892c:	e036      	b.n	800899c <Proc_MDBread+0x204>
		}
		else
		{
			// 时间间隔达到阈值，可以重试了
			if (g_Mdb_AutoReg.retryCounter < 3)
 800892e:	4b26      	ldr	r3, [pc, #152]	; (80089c8 <Proc_MDBread+0x230>)
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d811      	bhi.n	800895a <Proc_MDBread+0x1c2>
			{
				// 重试次数未达到阈值
				g_Mdb_AutoReg.retryCounter++;
 8008936:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <Proc_MDBread+0x230>)
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	3301      	adds	r3, #1
 800893c:	b2da      	uxtb	r2, r3
 800893e:	4b22      	ldr	r3, [pc, #136]	; (80089c8 <Proc_MDBread+0x230>)
 8008940:	705a      	strb	r2, [r3, #1]
				g_Mdb_AutoReg.timeCounter = 0;
 8008942:	4b21      	ldr	r3, [pc, #132]	; (80089c8 <Proc_MDBread+0x230>)
 8008944:	2200      	movs	r2, #0
 8008946:	805a      	strh	r2, [r3, #2]
				g_Mdb_AutoReg.table[g_Mdb_AutoReg.currentLooper].state =
 8008948:	4b1f      	ldr	r3, [pc, #124]	; (80089c8 <Proc_MDBread+0x230>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	4a1e      	ldr	r2, [pc, #120]	; (80089c8 <Proc_MDBread+0x230>)
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	18d3      	adds	r3, r2, r3
 8008952:	3306      	adds	r3, #6
 8008954:	2201      	movs	r2, #1
 8008956:	701a      	strb	r2, [r3, #0]
 8008958:	e020      	b.n	800899c <Proc_MDBread+0x204>
					Mdb_Reading;
			}
			else
			{
				// 重试次数超过阈值
				g_Mdb_AutoReg.table[g_Mdb_AutoReg.currentLooper].state =
 800895a:	4b1b      	ldr	r3, [pc, #108]	; (80089c8 <Proc_MDBread+0x230>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	4a1a      	ldr	r2, [pc, #104]	; (80089c8 <Proc_MDBread+0x230>)
 8008960:	00db      	lsls	r3, r3, #3
 8008962:	18d3      	adds	r3, r2, r3
 8008964:	3306      	adds	r3, #6
 8008966:	2200      	movs	r2, #0
 8008968:	701a      	strb	r2, [r3, #0]
					MDB_Lost;
				memset(g_Mdb_Buffer.rxData, 0, 128);
 800896a:	4b1d      	ldr	r3, [pc, #116]	; (80089e0 <Proc_MDBread+0x248>)
 800896c:	2280      	movs	r2, #128	; 0x80
 800896e:	2100      	movs	r1, #0
 8008970:	0018      	movs	r0, r3
 8008972:	f001 f938 	bl	8009be6 <memset>
				g_Mdb_AutoReg.timeCounter = 0;
 8008976:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <Proc_MDBread+0x230>)
 8008978:	2200      	movs	r2, #0
 800897a:	805a      	strh	r2, [r3, #2]
				g_ProcState.currentStep++;
 800897c:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <Proc_MDBread+0x228>)
 800897e:	789b      	ldrb	r3, [r3, #2]
 8008980:	3301      	adds	r3, #1
 8008982:	b2da      	uxtb	r2, r3
 8008984:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <Proc_MDBread+0x228>)
 8008986:	709a      	strb	r2, [r3, #2]
				g_ProcState.passedTimeMs = 0;
 8008988:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <Proc_MDBread+0x228>)
 800898a:	2200      	movs	r2, #0
 800898c:	609a      	str	r2, [r3, #8]
				g_Mdb_AutoReg.retryCounter = 0;
 800898e:	4b0e      	ldr	r3, [pc, #56]	; (80089c8 <Proc_MDBread+0x230>)
 8008990:	2200      	movs	r2, #0
 8008992:	705a      	strb	r2, [r3, #1]
				Log("Modbus:Slave response timeout.");
 8008994:	4b17      	ldr	r3, [pc, #92]	; (80089f4 <Proc_MDBread+0x25c>)
 8008996:	0018      	movs	r0, r3
 8008998:	f7fe fd2c 	bl	80073f4 <Log>
			}
		}
	}

	// Clear REG statue
	if (g_ProcState.currentStep == g_ProcState.maxStep)
 800899c:	4b08      	ldr	r3, [pc, #32]	; (80089c0 <Proc_MDBread+0x228>)
 800899e:	789a      	ldrb	r2, [r3, #2]
 80089a0:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <Proc_MDBread+0x228>)
 80089a2:	78db      	ldrb	r3, [r3, #3]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d107      	bne.n	80089b8 <Proc_MDBread+0x220>
	{

		MDB_ResetControl();
 80089a8:	f7ff fd86 	bl	80084b8 <MDB_ResetControl>
		memset(g_Mdb_Buffer.rxData, 0, 128);
 80089ac:	4b0c      	ldr	r3, [pc, #48]	; (80089e0 <Proc_MDBread+0x248>)
 80089ae:	2280      	movs	r2, #128	; 0x80
 80089b0:	2100      	movs	r1, #0
 80089b2:	0018      	movs	r0, r3
 80089b4:	f001 f917 	bl	8009be6 <memset>
	}
}
 80089b8:	46c0      	nop			; (mov r8, r8)
 80089ba:	46bd      	mov	sp, r7
 80089bc:	b006      	add	sp, #24
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20000e28 	.word	0x20000e28
 80089c4:	20000c44 	.word	0x20000c44
 80089c8:	200009e0 	.word	0x200009e0
 80089cc:	50000400 	.word	0x50000400
 80089d0:	0800d674 	.word	0x0800d674
 80089d4:	00007530 	.word	0x00007530
 80089d8:	20000960 	.word	0x20000960
 80089dc:	20000850 	.word	0x20000850
 80089e0:	200007ce 	.word	0x200007ce
 80089e4:	0800d69c 	.word	0x0800d69c
 80089e8:	0800d6b4 	.word	0x0800d6b4
 80089ec:	20000000 	.word	0x20000000
 80089f0:	0800d6cc 	.word	0x0800d6cc
 80089f4:	0800d6f0 	.word	0x0800d6f0

080089f8 <main>:
 * @brief 主函数
 *
 * @return 程序是否正常结束 0-正常 非0-不正常
 */
int main(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80089fc:	f7f9 ffbe 	bl	800297c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8008a00:	f000 f82a 	bl	8008a58 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8008a04:	f000 faf6 	bl	8008ff4 <MX_GPIO_Init>
	MX_DMA_Init();
 8008a08:	f000 face 	bl	8008fa8 <MX_DMA_Init>
	MX_ADC_Init();
 8008a0c:	f000 f89a 	bl	8008b44 <MX_ADC_Init>
	MX_SPI2_Init();
 8008a10:	f000 f992 	bl	8008d38 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8008a14:	f000 fa04 	bl	8008e20 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8008a18:	f000 fa34 	bl	8008e84 <MX_USART2_UART_Init>
	MX_USART4_UART_Init();
 8008a1c:	f000 fa62 	bl	8008ee4 <MX_USART4_UART_Init>
	MX_USART5_UART_Init();
 8008a20:	f000 fa90 	bl	8008f44 <MX_USART5_UART_Init>
	MX_RTC_Init();
 8008a24:	f000 f918 	bl	8008c58 <MX_RTC_Init>
	MX_TIM6_Init();
 8008a28:	f000 f9be 	bl	8008da8 <MX_TIM6_Init>
	MX_CRC_Init();
 8008a2c:	f000 f8f0 	bl	8008c10 <MX_CRC_Init>

	// 初始化全局变量和日志功能
	MDB_ResetControl();
 8008a30:	f7ff fd42 	bl	80084b8 <MDB_ResetControl>
	Act_ResetProc();
 8008a34:	f7fe ffc2 	bl	80079bc <Act_ResetProc>
	Init_MDB_AUTO();
 8008a38:	f7ff fd6e 	bl	8008518 <Init_MDB_AUTO>
	Init_Log();
 8008a3c:	f7fe fccc 	bl	80073d8 <Init_Log>
	HAL_TIM_Base_Start_IT(&htim6);
 8008a40:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <main+0x5c>)
 8008a42:	0018      	movs	r0, r3
 8008a44:	f7fc ffdf 	bl	8005a06 <HAL_TIM_Base_Start_IT>

	// 初始化外设
	HardwareInit();
 8008a48:	f7fe fe22 	bl	8007690 <HardwareInit>

	// 进入主程序流程
	while (1)
	{
		HardwareLowlevelLoop();
 8008a4c:	f7fe fee8 	bl	8007820 <HardwareLowlevelLoop>
 8008a50:	e7fc      	b.n	8008a4c <main+0x54>
 8008a52:	46c0      	nop			; (mov r8, r8)
 8008a54:	20000c68 	.word	0x20000c68

08008a58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8008a58:	b590      	push	{r4, r7, lr}
 8008a5a:	b09b      	sub	sp, #108	; 0x6c
 8008a5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008a5e:	2434      	movs	r4, #52	; 0x34
 8008a60:	193b      	adds	r3, r7, r4
 8008a62:	0018      	movs	r0, r3
 8008a64:	2334      	movs	r3, #52	; 0x34
 8008a66:	001a      	movs	r2, r3
 8008a68:	2100      	movs	r1, #0
 8008a6a:	f001 f8bc 	bl	8009be6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008a6e:	2320      	movs	r3, #32
 8008a70:	18fb      	adds	r3, r7, r3
 8008a72:	0018      	movs	r0, r3
 8008a74:	2314      	movs	r3, #20
 8008a76:	001a      	movs	r2, r3
 8008a78:	2100      	movs	r1, #0
 8008a7a:	f001 f8b4 	bl	8009be6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008a7e:	003b      	movs	r3, r7
 8008a80:	0018      	movs	r0, r3
 8008a82:	2320      	movs	r3, #32
 8008a84:	001a      	movs	r2, r3
 8008a86:	2100      	movs	r1, #0
 8008a88:	f001 f8ad 	bl	8009be6 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a8c:	4b2b      	ldr	r3, [pc, #172]	; (8008b3c <SystemClock_Config+0xe4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a2b      	ldr	r2, [pc, #172]	; (8008b40 <SystemClock_Config+0xe8>)
 8008a92:	401a      	ands	r2, r3
 8008a94:	4b29      	ldr	r3, [pc, #164]	; (8008b3c <SystemClock_Config+0xe4>)
 8008a96:	2180      	movs	r1, #128	; 0x80
 8008a98:	0109      	lsls	r1, r1, #4
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	601a      	str	r2, [r3, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
 8008a9e:	0021      	movs	r1, r4
 8008aa0:	187b      	adds	r3, r7, r1
 8008aa2:	2218      	movs	r2, #24
 8008aa4:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008aa6:	187b      	adds	r3, r7, r1
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008aac:	187b      	adds	r3, r7, r1
 8008aae:	2201      	movs	r2, #1
 8008ab0:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8008ab2:	187b      	adds	r3, r7, r1
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008ab8:	187b      	adds	r3, r7, r1
 8008aba:	22c0      	movs	r2, #192	; 0xc0
 8008abc:	0212      	lsls	r2, r2, #8
 8008abe:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008ac0:	187b      	adds	r3, r7, r1
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008ac6:	187b      	adds	r3, r7, r1
 8008ac8:	0018      	movs	r0, r3
 8008aca:	f7fb f925 	bl	8003d18 <HAL_RCC_OscConfig>
 8008ace:	1e03      	subs	r3, r0, #0
 8008ad0:	d001      	beq.n	8008ad6 <SystemClock_Config+0x7e>
	{
		Error_Handler();
 8008ad2:	f000 fb2d 	bl	8009130 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ad6:	2120      	movs	r1, #32
 8008ad8:	187b      	adds	r3, r7, r1
 8008ada:	220f      	movs	r2, #15
 8008adc:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8008ade:	187b      	adds	r3, r7, r1
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008ae4:	187b      	adds	r3, r7, r1
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008aea:	187b      	adds	r3, r7, r1
 8008aec:	2200      	movs	r2, #0
 8008aee:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008af0:	187b      	adds	r3, r7, r1
 8008af2:	2200      	movs	r2, #0
 8008af4:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008af6:	187b      	adds	r3, r7, r1
 8008af8:	2100      	movs	r1, #0
 8008afa:	0018      	movs	r0, r3
 8008afc:	f7fb fc84 	bl	8004408 <HAL_RCC_ClockConfig>
 8008b00:	1e03      	subs	r3, r0, #0
 8008b02:	d001      	beq.n	8008b08 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8008b04:	f000 fb14 	bl	8009130 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_RTC;
 8008b08:	003b      	movs	r3, r7
 8008b0a:	2223      	movs	r2, #35	; 0x23
 8008b0c:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008b0e:	003b      	movs	r3, r7
 8008b10:	2200      	movs	r2, #0
 8008b12:	609a      	str	r2, [r3, #8]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008b14:	003b      	movs	r3, r7
 8008b16:	2200      	movs	r2, #0
 8008b18:	60da      	str	r2, [r3, #12]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008b1a:	003b      	movs	r3, r7
 8008b1c:	2280      	movs	r2, #128	; 0x80
 8008b1e:	0292      	lsls	r2, r2, #10
 8008b20:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b22:	003b      	movs	r3, r7
 8008b24:	0018      	movs	r0, r3
 8008b26:	f7fb fe87 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 8008b2a:	1e03      	subs	r3, r0, #0
 8008b2c:	d001      	beq.n	8008b32 <SystemClock_Config+0xda>
	{
		Error_Handler();
 8008b2e:	f000 faff 	bl	8009130 <Error_Handler>
	}
}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	46bd      	mov	sp, r7
 8008b36:	b01b      	add	sp, #108	; 0x6c
 8008b38:	bd90      	pop	{r4, r7, pc}
 8008b3a:	46c0      	nop			; (mov r8, r8)
 8008b3c:	40007000 	.word	0x40007000
 8008b40:	ffffe7ff 	.word	0xffffe7ff

08008b44 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8008b4a:	003b      	movs	r3, r7
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	2308      	movs	r3, #8
 8008b50:	001a      	movs	r2, r3
 8008b52:	2100      	movs	r1, #0
 8008b54:	f001 f847 	bl	8009be6 <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8008b58:	4b2a      	ldr	r3, [pc, #168]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008b5a:	4a2b      	ldr	r2, [pc, #172]	; (8008c08 <MX_ADC_Init+0xc4>)
 8008b5c:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8008b5e:	4b29      	ldr	r3, [pc, #164]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008b64:	4b27      	ldr	r3, [pc, #156]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008b66:	2280      	movs	r2, #128	; 0x80
 8008b68:	0612      	lsls	r2, r2, #24
 8008b6a:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008b6c:	4b25      	ldr	r3, [pc, #148]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8008b72:	4b24      	ldr	r3, [pc, #144]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008b74:	2206      	movs	r2, #6
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008b78:	4b22      	ldr	r3, [pc, #136]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008b7e:	4b21      	ldr	r3, [pc, #132]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = DISABLE;
 8008b84:	4b1f      	ldr	r3, [pc, #124]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008b86:	2220      	movs	r2, #32
 8008b88:	2100      	movs	r1, #0
 8008b8a:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8008b8c:	4b1d      	ldr	r3, [pc, #116]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008b8e:	2221      	movs	r2, #33	; 0x21
 8008b90:	2100      	movs	r1, #0
 8008b92:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b94:	4b1b      	ldr	r3, [pc, #108]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b9a:	4b1a      	ldr	r3, [pc, #104]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008b9c:	22c2      	movs	r2, #194	; 0xc2
 8008b9e:	32ff      	adds	r2, #255	; 0xff
 8008ba0:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 8008ba2:	4b18      	ldr	r3, [pc, #96]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008ba4:	222c      	movs	r2, #44	; 0x2c
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008baa:	4b16      	ldr	r3, [pc, #88]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008bac:	2204      	movs	r2, #4
 8008bae:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008bb0:	4b14      	ldr	r3, [pc, #80]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8008bb6:	4b13      	ldr	r3, [pc, #76]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8008bbc:	4b11      	ldr	r3, [pc, #68]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008bc2:	4b10      	ldr	r3, [pc, #64]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8008bc8:	4b0e      	ldr	r3, [pc, #56]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008bca:	0018      	movs	r0, r3
 8008bcc:	f7f9 ff2a 	bl	8002a24 <HAL_ADC_Init>
 8008bd0:	1e03      	subs	r3, r0, #0
 8008bd2:	d001      	beq.n	8008bd8 <MX_ADC_Init+0x94>
	{
		Error_Handler();
 8008bd4:	f000 faac 	bl	8009130 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8008bd8:	003b      	movs	r3, r7
 8008bda:	4a0c      	ldr	r2, [pc, #48]	; (8008c0c <MX_ADC_Init+0xc8>)
 8008bdc:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008bde:	003b      	movs	r3, r7
 8008be0:	2280      	movs	r2, #128	; 0x80
 8008be2:	0152      	lsls	r2, r2, #5
 8008be4:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008be6:	003a      	movs	r2, r7
 8008be8:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <MX_ADC_Init+0xc0>)
 8008bea:	0011      	movs	r1, r2
 8008bec:	0018      	movs	r0, r3
 8008bee:	f7fa f92d 	bl	8002e4c <HAL_ADC_ConfigChannel>
 8008bf2:	1e03      	subs	r3, r0, #0
 8008bf4:	d001      	beq.n	8008bfa <MX_ADC_Init+0xb6>
	{
		Error_Handler();
 8008bf6:	f000 fa9b 	bl	8009130 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */
}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	b002      	add	sp, #8
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	20000f34 	.word	0x20000f34
 8008c08:	40012400 	.word	0x40012400
 8008c0c:	14000020 	.word	0x14000020

08008c10 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8008c14:	4b0e      	ldr	r3, [pc, #56]	; (8008c50 <MX_CRC_Init+0x40>)
 8008c16:	4a0f      	ldr	r2, [pc, #60]	; (8008c54 <MX_CRC_Init+0x44>)
 8008c18:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <MX_CRC_Init+0x40>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <MX_CRC_Init+0x40>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008c26:	4b0a      	ldr	r3, [pc, #40]	; (8008c50 <MX_CRC_Init+0x40>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008c2c:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <MX_CRC_Init+0x40>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_HALFWORDS;
 8008c32:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <MX_CRC_Init+0x40>)
 8008c34:	2202      	movs	r2, #2
 8008c36:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <MX_CRC_Init+0x40>)
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	f7fa fb5c 	bl	80032f8 <HAL_CRC_Init>
 8008c40:	1e03      	subs	r3, r0, #0
 8008c42:	d001      	beq.n	8008c48 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8008c44:	f000 fa74 	bl	8009130 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */
}
 8008c48:	46c0      	nop			; (mov r8, r8)
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	46c0      	nop			; (mov r8, r8)
 8008c50:	2000048c 	.word	0x2000048c
 8008c54:	40023000 	.word	0x40023000

08008c58 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8008c5e:	1d3b      	adds	r3, r7, #4
 8008c60:	0018      	movs	r0, r3
 8008c62:	2314      	movs	r3, #20
 8008c64:	001a      	movs	r2, r3
 8008c66:	2100      	movs	r1, #0
 8008c68:	f000 ffbd 	bl	8009be6 <memset>
	RTC_DateTypeDef sDate = {0};
 8008c6c:	003b      	movs	r3, r7
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8008c72:	4b2e      	ldr	r3, [pc, #184]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008c74:	4a2e      	ldr	r2, [pc, #184]	; (8008d30 <MX_RTC_Init+0xd8>)
 8008c76:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008c78:	4b2c      	ldr	r3, [pc, #176]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8008c7e:	4b2b      	ldr	r3, [pc, #172]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008c80:	227f      	movs	r2, #127	; 0x7f
 8008c82:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8008c84:	4b29      	ldr	r3, [pc, #164]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008c86:	22ff      	movs	r2, #255	; 0xff
 8008c88:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008c8a:	4b28      	ldr	r3, [pc, #160]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008c90:	4b26      	ldr	r3, [pc, #152]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008c96:	4b25      	ldr	r3, [pc, #148]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008c9c:	4b23      	ldr	r3, [pc, #140]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008ca2:	4b22      	ldr	r3, [pc, #136]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	f7fb ff0d 	bl	8004ac4 <HAL_RTC_Init>
 8008caa:	1e03      	subs	r3, r0, #0
 8008cac:	d001      	beq.n	8008cb2 <MX_RTC_Init+0x5a>
	{
		Error_Handler();
 8008cae:	f000 fa3f 	bl	8009130 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8008cb2:	1d3b      	adds	r3, r7, #4
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x0;
 8008cb8:	1d3b      	adds	r3, r7, #4
 8008cba:	2200      	movs	r2, #0
 8008cbc:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x0;
 8008cbe:	1d3b      	adds	r3, r7, #4
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008cc4:	1d3b      	adds	r3, r7, #4
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008cca:	1d3b      	adds	r3, r7, #4
 8008ccc:	2200      	movs	r2, #0
 8008cce:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8008cd0:	1d39      	adds	r1, r7, #4
 8008cd2:	4b16      	ldr	r3, [pc, #88]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f7fb ff92 	bl	8004c00 <HAL_RTC_SetTime>
 8008cdc:	1e03      	subs	r3, r0, #0
 8008cde:	d001      	beq.n	8008ce4 <MX_RTC_Init+0x8c>
	{
		Error_Handler();
 8008ce0:	f000 fa26 	bl	8009130 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8008ce4:	003b      	movs	r3, r7
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8008cea:	003b      	movs	r3, r7
 8008cec:	2201      	movs	r2, #1
 8008cee:	705a      	strb	r2, [r3, #1]
	sDate.Date = 0x1;
 8008cf0:	003b      	movs	r3, r7
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	709a      	strb	r2, [r3, #2]
	sDate.Year = 0x0;
 8008cf6:	003b      	movs	r3, r7
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8008cfc:	0039      	movs	r1, r7
 8008cfe:	4b0b      	ldr	r3, [pc, #44]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008d00:	2201      	movs	r2, #1
 8008d02:	0018      	movs	r0, r3
 8008d04:	f7fc f89c 	bl	8004e40 <HAL_RTC_SetDate>
 8008d08:	1e03      	subs	r3, r0, #0
 8008d0a:	d001      	beq.n	8008d10 <MX_RTC_Init+0xb8>
	{
		Error_Handler();
 8008d0c:	f000 fa10 	bl	8009130 <Error_Handler>
	}
	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 65535,
 8008d10:	4908      	ldr	r1, [pc, #32]	; (8008d34 <MX_RTC_Init+0xdc>)
 8008d12:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <MX_RTC_Init+0xd4>)
 8008d14:	2204      	movs	r2, #4
 8008d16:	0018      	movs	r0, r3
 8008d18:	f7fc fa24 	bl	8005164 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008d1c:	1e03      	subs	r3, r0, #0
 8008d1e:	d001      	beq.n	8008d24 <MX_RTC_Init+0xcc>
									RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
	{
		Error_Handler();
 8008d20:	f000 fa06 	bl	8009130 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */
}
 8008d24:	46c0      	nop			; (mov r8, r8)
 8008d26:	46bd      	mov	sp, r7
 8008d28:	b006      	add	sp, #24
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20000c44 	.word	0x20000c44
 8008d30:	40002800 	.word	0x40002800
 8008d34:	0000ffff 	.word	0x0000ffff

08008d38 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8008d3c:	4b18      	ldr	r3, [pc, #96]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d3e:	4a19      	ldr	r2, [pc, #100]	; (8008da4 <MX_SPI2_Init+0x6c>)
 8008d40:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8008d42:	4b17      	ldr	r3, [pc, #92]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d44:	2282      	movs	r2, #130	; 0x82
 8008d46:	0052      	lsls	r2, r2, #1
 8008d48:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008d50:	4b13      	ldr	r3, [pc, #76]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d56:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008d5c:	4b10      	ldr	r3, [pc, #64]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8008d62:	4b0f      	ldr	r3, [pc, #60]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d64:	2280      	movs	r2, #128	; 0x80
 8008d66:	0092      	lsls	r2, r2, #2
 8008d68:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8008d6a:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d6c:	2238      	movs	r2, #56	; 0x38
 8008d6e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008d70:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008d76:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d7c:	4b08      	ldr	r3, [pc, #32]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8008d82:	4b07      	ldr	r3, [pc, #28]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d84:	2207      	movs	r2, #7
 8008d86:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008d88:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <MX_SPI2_Init+0x68>)
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f7fc fb3c 	bl	8005408 <HAL_SPI_Init>
 8008d90:	1e03      	subs	r3, r0, #0
 8008d92:	d001      	beq.n	8008d98 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8008d94:	f000 f9cc 	bl	8009130 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */
}
 8008d98:	46c0      	nop			; (mov r8, r8)
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	46c0      	nop			; (mov r8, r8)
 8008da0:	20000434 	.word	0x20000434
 8008da4:	40003800 	.word	0x40003800

08008da8 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008dae:	003b      	movs	r3, r7
 8008db0:	0018      	movs	r0, r3
 8008db2:	2308      	movs	r3, #8
 8008db4:	001a      	movs	r2, r3
 8008db6:	2100      	movs	r1, #0
 8008db8:	f000 ff15 	bl	8009be6 <memset>

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8008dbc:	4b15      	ldr	r3, [pc, #84]	; (8008e14 <MX_TIM6_Init+0x6c>)
 8008dbe:	4a16      	ldr	r2, [pc, #88]	; (8008e18 <MX_TIM6_Init+0x70>)
 8008dc0:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16;
 8008dc2:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <MX_TIM6_Init+0x6c>)
 8008dc4:	2210      	movs	r2, #16
 8008dc6:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008dc8:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <MX_TIM6_Init+0x6c>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50000;
 8008dce:	4b11      	ldr	r3, [pc, #68]	; (8008e14 <MX_TIM6_Init+0x6c>)
 8008dd0:	4a12      	ldr	r2, [pc, #72]	; (8008e1c <MX_TIM6_Init+0x74>)
 8008dd2:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008dd4:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <MX_TIM6_Init+0x6c>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008dda:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <MX_TIM6_Init+0x6c>)
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f7fc fde6 	bl	80059ae <HAL_TIM_Base_Init>
 8008de2:	1e03      	subs	r3, r0, #0
 8008de4:	d001      	beq.n	8008dea <MX_TIM6_Init+0x42>
	{
		Error_Handler();
 8008de6:	f000 f9a3 	bl	8009130 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008dea:	003b      	movs	r3, r7
 8008dec:	2200      	movs	r2, #0
 8008dee:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008df0:	003b      	movs	r3, r7
 8008df2:	2200      	movs	r2, #0
 8008df4:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008df6:	003a      	movs	r2, r7
 8008df8:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <MX_TIM6_Init+0x6c>)
 8008dfa:	0011      	movs	r1, r2
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	f7fc ff8b 	bl	8005d18 <HAL_TIMEx_MasterConfigSynchronization>
 8008e02:	1e03      	subs	r3, r0, #0
 8008e04:	d001      	beq.n	8008e0a <MX_TIM6_Init+0x62>
	{
		Error_Handler();
 8008e06:	f000 f993 	bl	8009130 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */
}
 8008e0a:	46c0      	nop			; (mov r8, r8)
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	b002      	add	sp, #8
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	46c0      	nop			; (mov r8, r8)
 8008e14:	20000c68 	.word	0x20000c68
 8008e18:	40001000 	.word	0x40001000
 8008e1c:	0000c350 	.word	0x0000c350

08008e20 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8008e24:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e26:	4a16      	ldr	r2, [pc, #88]	; (8008e80 <MX_USART1_UART_Init+0x60>)
 8008e28:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8008e2a:	4b14      	ldr	r3, [pc, #80]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e2c:	2296      	movs	r2, #150	; 0x96
 8008e2e:	0192      	lsls	r2, r2, #6
 8008e30:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008e32:	4b12      	ldr	r3, [pc, #72]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8008e38:	4b10      	ldr	r3, [pc, #64]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8008e3e:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8008e44:	4b0d      	ldr	r3, [pc, #52]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e46:	220c      	movs	r2, #12
 8008e48:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e4a:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e50:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008e56:	4b09      	ldr	r3, [pc, #36]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008e5c:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8008e62:	4806      	ldr	r0, [pc, #24]	; (8008e7c <MX_USART1_UART_Init+0x5c>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	2200      	movs	r2, #0
 8008e68:	2100      	movs	r1, #0
 8008e6a:	f7fe f911 	bl	8007090 <HAL_RS485Ex_Init>
 8008e6e:	1e03      	subs	r3, r0, #0
 8008e70:	d001      	beq.n	8008e76 <MX_USART1_UART_Init+0x56>
	{
		Error_Handler();
 8008e72:	f000 f95d 	bl	8009130 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	20000960 	.word	0x20000960
 8008e80:	40013800 	.word	0x40013800

08008e84 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8008e88:	4b14      	ldr	r3, [pc, #80]	; (8008edc <MX_USART2_UART_Init+0x58>)
 8008e8a:	4a15      	ldr	r2, [pc, #84]	; (8008ee0 <MX_USART2_UART_Init+0x5c>)
 8008e8c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8008e8e:	4b13      	ldr	r3, [pc, #76]	; (8008edc <MX_USART2_UART_Init+0x58>)
 8008e90:	22e1      	movs	r2, #225	; 0xe1
 8008e92:	0252      	lsls	r2, r2, #9
 8008e94:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008e96:	4b11      	ldr	r3, [pc, #68]	; (8008edc <MX_USART2_UART_Init+0x58>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8008e9c:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <MX_USART2_UART_Init+0x58>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8008ea2:	4b0e      	ldr	r3, [pc, #56]	; (8008edc <MX_USART2_UART_Init+0x58>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8008ea8:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <MX_USART2_UART_Init+0x58>)
 8008eaa:	220c      	movs	r2, #12
 8008eac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008eae:	4b0b      	ldr	r3, [pc, #44]	; (8008edc <MX_USART2_UART_Init+0x58>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008eb4:	4b09      	ldr	r3, [pc, #36]	; (8008edc <MX_USART2_UART_Init+0x58>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008eba:	4b08      	ldr	r3, [pc, #32]	; (8008edc <MX_USART2_UART_Init+0x58>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008ec0:	4b06      	ldr	r3, [pc, #24]	; (8008edc <MX_USART2_UART_Init+0x58>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8008ec6:	4b05      	ldr	r3, [pc, #20]	; (8008edc <MX_USART2_UART_Init+0x58>)
 8008ec8:	0018      	movs	r0, r3
 8008eca:	f7fc ff69 	bl	8005da0 <HAL_UART_Init>
 8008ece:	1e03      	subs	r3, r0, #0
 8008ed0:	d001      	beq.n	8008ed6 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8008ed2:	f000 f92d 	bl	8009130 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8008ed6:	46c0      	nop			; (mov r8, r8)
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20000eb4 	.word	0x20000eb4
 8008ee0:	40004400 	.word	0x40004400

08008ee4 <MX_USART4_UART_Init>:
 * @brief USART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART4_UART_Init(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
	/* USER CODE END USART4_Init 0 */

	/* USER CODE BEGIN USART4_Init 1 */

	/* USER CODE END USART4_Init 1 */
	huart4.Instance = USART4;
 8008ee8:	4b14      	ldr	r3, [pc, #80]	; (8008f3c <MX_USART4_UART_Init+0x58>)
 8008eea:	4a15      	ldr	r2, [pc, #84]	; (8008f40 <MX_USART4_UART_Init+0x5c>)
 8008eec:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8008eee:	4b13      	ldr	r3, [pc, #76]	; (8008f3c <MX_USART4_UART_Init+0x58>)
 8008ef0:	2296      	movs	r2, #150	; 0x96
 8008ef2:	0192      	lsls	r2, r2, #6
 8008ef4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008ef6:	4b11      	ldr	r3, [pc, #68]	; (8008f3c <MX_USART4_UART_Init+0x58>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8008efc:	4b0f      	ldr	r3, [pc, #60]	; (8008f3c <MX_USART4_UART_Init+0x58>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8008f02:	4b0e      	ldr	r3, [pc, #56]	; (8008f3c <MX_USART4_UART_Init+0x58>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8008f08:	4b0c      	ldr	r3, [pc, #48]	; (8008f3c <MX_USART4_UART_Init+0x58>)
 8008f0a:	220c      	movs	r2, #12
 8008f0c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f0e:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <MX_USART4_UART_Init+0x58>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f14:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <MX_USART4_UART_Init+0x58>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008f1a:	4b08      	ldr	r3, [pc, #32]	; (8008f3c <MX_USART4_UART_Init+0x58>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008f20:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <MX_USART4_UART_Init+0x58>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <MX_USART4_UART_Init+0x58>)
 8008f28:	0018      	movs	r0, r3
 8008f2a:	f7fc ff39 	bl	8005da0 <HAL_UART_Init>
 8008f2e:	1e03      	subs	r3, r0, #0
 8008f30:	d001      	beq.n	8008f36 <MX_USART4_UART_Init+0x52>
	{
		Error_Handler();
 8008f32:	f000 f8fd 	bl	8009130 <Error_Handler>
	}
	/* USER CODE BEGIN USART4_Init 2 */

	/* USER CODE END USART4_Init 2 */
}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20000e34 	.word	0x20000e34
 8008f40:	40004c00 	.word	0x40004c00

08008f44 <MX_USART5_UART_Init>:
 * @brief USART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART5_UART_Init(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
	/* USER CODE END USART5_Init 0 */

	/* USER CODE BEGIN USART5_Init 1 */

	/* USER CODE END USART5_Init 1 */
	huart5.Instance = USART5;
 8008f48:	4b15      	ldr	r3, [pc, #84]	; (8008fa0 <MX_USART5_UART_Init+0x5c>)
 8008f4a:	4a16      	ldr	r2, [pc, #88]	; (8008fa4 <MX_USART5_UART_Init+0x60>)
 8008f4c:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 9600;
 8008f4e:	4b14      	ldr	r3, [pc, #80]	; (8008fa0 <MX_USART5_UART_Init+0x5c>)
 8008f50:	2296      	movs	r2, #150	; 0x96
 8008f52:	0192      	lsls	r2, r2, #6
 8008f54:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8008f56:	4b12      	ldr	r3, [pc, #72]	; (8008fa0 <MX_USART5_UART_Init+0x5c>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8008f5c:	4b10      	ldr	r3, [pc, #64]	; (8008fa0 <MX_USART5_UART_Init+0x5c>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8008f62:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <MX_USART5_UART_Init+0x5c>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8008f68:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <MX_USART5_UART_Init+0x5c>)
 8008f6a:	220c      	movs	r2, #12
 8008f6c:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f6e:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <MX_USART5_UART_Init+0x5c>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f74:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <MX_USART5_UART_Init+0x5c>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008f7a:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <MX_USART5_UART_Init+0x5c>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008f80:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <MX_USART5_UART_Init+0x5c>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RS485Ex_Init(&huart5, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8008f86:	4806      	ldr	r0, [pc, #24]	; (8008fa0 <MX_USART5_UART_Init+0x5c>)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	f7fe f87f 	bl	8007090 <HAL_RS485Ex_Init>
 8008f92:	1e03      	subs	r3, r0, #0
 8008f94:	d001      	beq.n	8008f9a <MX_USART5_UART_Init+0x56>
	{
		Error_Handler();
 8008f96:	f000 f8cb 	bl	8009130 <Error_Handler>
	}
	/* USER CODE BEGIN USART5_Init 2 */

	/* USER CODE END USART5_Init 2 */
}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20000850 	.word	0x20000850
 8008fa4:	40005000 	.word	0x40005000

08008fa8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8008fae:	4b10      	ldr	r3, [pc, #64]	; (8008ff0 <MX_DMA_Init+0x48>)
 8008fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fb2:	4b0f      	ldr	r3, [pc, #60]	; (8008ff0 <MX_DMA_Init+0x48>)
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8008fba:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <MX_DMA_Init+0x48>)
 8008fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	607b      	str	r3, [r7, #4]
 8008fc4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2100      	movs	r1, #0
 8008fca:	200a      	movs	r0, #10
 8008fcc:	f7fa f96e 	bl	80032ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8008fd0:	200a      	movs	r0, #10
 8008fd2:	f7fa f980 	bl	80032d6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	200b      	movs	r0, #11
 8008fdc:	f7fa f966 	bl	80032ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8008fe0:	200b      	movs	r0, #11
 8008fe2:	f7fa f978 	bl	80032d6 <HAL_NVIC_EnableIRQ>
}
 8008fe6:	46c0      	nop			; (mov r8, r8)
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	b002      	add	sp, #8
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	46c0      	nop			; (mov r8, r8)
 8008ff0:	40021000 	.word	0x40021000

08008ff4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8008ff4:	b590      	push	{r4, r7, lr}
 8008ff6:	b089      	sub	sp, #36	; 0x24
 8008ff8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ffa:	240c      	movs	r4, #12
 8008ffc:	193b      	adds	r3, r7, r4
 8008ffe:	0018      	movs	r0, r3
 8009000:	2314      	movs	r3, #20
 8009002:	001a      	movs	r2, r3
 8009004:	2100      	movs	r1, #0
 8009006:	f000 fdee 	bl	8009be6 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800900a:	4b3a      	ldr	r3, [pc, #232]	; (80090f4 <MX_GPIO_Init+0x100>)
 800900c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900e:	4b39      	ldr	r3, [pc, #228]	; (80090f4 <MX_GPIO_Init+0x100>)
 8009010:	2104      	movs	r1, #4
 8009012:	430a      	orrs	r2, r1
 8009014:	62da      	str	r2, [r3, #44]	; 0x2c
 8009016:	4b37      	ldr	r3, [pc, #220]	; (80090f4 <MX_GPIO_Init+0x100>)
 8009018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901a:	2204      	movs	r2, #4
 800901c:	4013      	ands	r3, r2
 800901e:	60bb      	str	r3, [r7, #8]
 8009020:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009022:	4b34      	ldr	r3, [pc, #208]	; (80090f4 <MX_GPIO_Init+0x100>)
 8009024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009026:	4b33      	ldr	r3, [pc, #204]	; (80090f4 <MX_GPIO_Init+0x100>)
 8009028:	2101      	movs	r1, #1
 800902a:	430a      	orrs	r2, r1
 800902c:	62da      	str	r2, [r3, #44]	; 0x2c
 800902e:	4b31      	ldr	r3, [pc, #196]	; (80090f4 <MX_GPIO_Init+0x100>)
 8009030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009032:	2201      	movs	r2, #1
 8009034:	4013      	ands	r3, r2
 8009036:	607b      	str	r3, [r7, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800903a:	4b2e      	ldr	r3, [pc, #184]	; (80090f4 <MX_GPIO_Init+0x100>)
 800903c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800903e:	4b2d      	ldr	r3, [pc, #180]	; (80090f4 <MX_GPIO_Init+0x100>)
 8009040:	2102      	movs	r1, #2
 8009042:	430a      	orrs	r2, r1
 8009044:	62da      	str	r2, [r3, #44]	; 0x2c
 8009046:	4b2b      	ldr	r3, [pc, #172]	; (80090f4 <MX_GPIO_Init+0x100>)
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	2202      	movs	r2, #2
 800904c:	4013      	ands	r3, r2
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8009052:	23ae      	movs	r3, #174	; 0xae
 8009054:	015b      	lsls	r3, r3, #5
 8009056:	4828      	ldr	r0, [pc, #160]	; (80090f8 <MX_GPIO_Init+0x104>)
 8009058:	2200      	movs	r2, #0
 800905a:	0019      	movs	r1, r3
 800905c:	f7fa fe07 	bl	8003c6e <HAL_GPIO_WritePin>
					  VSEN_Pin | SPI2_NCS_Pin | UART5_NRE_Pin | PWR2_EN_Pin | BRESET_Pin,
					  GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, UART1_NRE_Pin | PWR1_EN_Pin, GPIO_PIN_RESET);
 8009060:	2388      	movs	r3, #136	; 0x88
 8009062:	0219      	lsls	r1, r3, #8
 8009064:	23a0      	movs	r3, #160	; 0xa0
 8009066:	05db      	lsls	r3, r3, #23
 8009068:	2200      	movs	r2, #0
 800906a:	0018      	movs	r0, r3
 800906c:	f7fa fdff 	bl	8003c6e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : VSEN_Pin SPI2_NCS_Pin UART5_NRE_Pin PWR2_EN_Pin */
	GPIO_InitStruct.Pin = VSEN_Pin | SPI2_NCS_Pin | UART5_NRE_Pin | PWR2_EN_Pin;
 8009070:	193b      	adds	r3, r7, r4
 8009072:	22a6      	movs	r2, #166	; 0xa6
 8009074:	0152      	lsls	r2, r2, #5
 8009076:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009078:	193b      	adds	r3, r7, r4
 800907a:	2201      	movs	r2, #1
 800907c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800907e:	193b      	adds	r3, r7, r4
 8009080:	2200      	movs	r2, #0
 8009082:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009084:	193b      	adds	r3, r7, r4
 8009086:	2200      	movs	r2, #0
 8009088:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800908a:	193b      	adds	r3, r7, r4
 800908c:	4a1a      	ldr	r2, [pc, #104]	; (80090f8 <MX_GPIO_Init+0x104>)
 800908e:	0019      	movs	r1, r3
 8009090:	0010      	movs	r0, r2
 8009092:	f7fa fc51 	bl	8003938 <HAL_GPIO_Init>

	/*Configure GPIO pins : UART1_NRE_Pin PWR1_EN_Pin */
	GPIO_InitStruct.Pin = UART1_NRE_Pin | PWR1_EN_Pin;
 8009096:	0021      	movs	r1, r4
 8009098:	187b      	adds	r3, r7, r1
 800909a:	2288      	movs	r2, #136	; 0x88
 800909c:	0212      	lsls	r2, r2, #8
 800909e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090a0:	000c      	movs	r4, r1
 80090a2:	193b      	adds	r3, r7, r4
 80090a4:	2201      	movs	r2, #1
 80090a6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a8:	193b      	adds	r3, r7, r4
 80090aa:	2200      	movs	r2, #0
 80090ac:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090ae:	193b      	adds	r3, r7, r4
 80090b0:	2200      	movs	r2, #0
 80090b2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090b4:	193a      	adds	r2, r7, r4
 80090b6:	23a0      	movs	r3, #160	; 0xa0
 80090b8:	05db      	lsls	r3, r3, #23
 80090ba:	0011      	movs	r1, r2
 80090bc:	0018      	movs	r0, r3
 80090be:	f7fa fc3b 	bl	8003938 <HAL_GPIO_Init>

	/*Configure GPIO pin : BRESET_Pin */
	GPIO_InitStruct.Pin = BRESET_Pin;
 80090c2:	0021      	movs	r1, r4
 80090c4:	187b      	adds	r3, r7, r1
 80090c6:	2280      	movs	r2, #128	; 0x80
 80090c8:	0052      	lsls	r2, r2, #1
 80090ca:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80090cc:	187b      	adds	r3, r7, r1
 80090ce:	2211      	movs	r2, #17
 80090d0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090d2:	187b      	adds	r3, r7, r1
 80090d4:	2200      	movs	r2, #0
 80090d6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090d8:	187b      	adds	r3, r7, r1
 80090da:	2200      	movs	r2, #0
 80090dc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BRESET_GPIO_Port, &GPIO_InitStruct);
 80090de:	187b      	adds	r3, r7, r1
 80090e0:	4a05      	ldr	r2, [pc, #20]	; (80090f8 <MX_GPIO_Init+0x104>)
 80090e2:	0019      	movs	r1, r3
 80090e4:	0010      	movs	r0, r2
 80090e6:	f7fa fc27 	bl	8003938 <HAL_GPIO_Init>
}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	46bd      	mov	sp, r7
 80090ee:	b009      	add	sp, #36	; 0x24
 80090f0:	bd90      	pop	{r4, r7, pc}
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	40021000 	.word	0x40021000
 80090f8:	50000400 	.word	0x50000400

080090fc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	2380      	movs	r3, #128	; 0x80
 800910a:	05db      	lsls	r3, r3, #23
 800910c:	429a      	cmp	r2, r3
 800910e:	d101      	bne.n	8009114 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		HAL_IncTick();
 8009110:	f7f9 fc54 	bl	80029bc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM6)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a04      	ldr	r2, [pc, #16]	; (800912c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d101      	bne.n	8009122 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		HardwareLoop10ms();
 800911e:	f7fe faaf 	bl	8007680 <HardwareLoop10ms>
	}
	/* USER CODE END Callback 1 */
}
 8009122:	46c0      	nop			; (mov r8, r8)
 8009124:	46bd      	mov	sp, r7
 8009126:	b002      	add	sp, #8
 8009128:	bd80      	pop	{r7, pc}
 800912a:	46c0      	nop			; (mov r8, r8)
 800912c:	40001000 	.word	0x40001000

08009130 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8009134:	46c0      	nop			; (mov r8, r8)
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009140:	4b07      	ldr	r3, [pc, #28]	; (8009160 <HAL_MspInit+0x24>)
 8009142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009144:	4b06      	ldr	r3, [pc, #24]	; (8009160 <HAL_MspInit+0x24>)
 8009146:	2101      	movs	r1, #1
 8009148:	430a      	orrs	r2, r1
 800914a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800914c:	4b04      	ldr	r3, [pc, #16]	; (8009160 <HAL_MspInit+0x24>)
 800914e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009150:	4b03      	ldr	r3, [pc, #12]	; (8009160 <HAL_MspInit+0x24>)
 8009152:	2180      	movs	r1, #128	; 0x80
 8009154:	0549      	lsls	r1, r1, #21
 8009156:	430a      	orrs	r2, r1
 8009158:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800915a:	46c0      	nop			; (mov r8, r8)
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	40021000 	.word	0x40021000

08009164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009164:	b590      	push	{r4, r7, lr}
 8009166:	b089      	sub	sp, #36	; 0x24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800916c:	240c      	movs	r4, #12
 800916e:	193b      	adds	r3, r7, r4
 8009170:	0018      	movs	r0, r3
 8009172:	2314      	movs	r3, #20
 8009174:	001a      	movs	r2, r3
 8009176:	2100      	movs	r1, #0
 8009178:	f000 fd35 	bl	8009be6 <memset>
  if(hadc->Instance==ADC1)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a14      	ldr	r2, [pc, #80]	; (80091d4 <HAL_ADC_MspInit+0x70>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d122      	bne.n	80091cc <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009186:	4b14      	ldr	r3, [pc, #80]	; (80091d8 <HAL_ADC_MspInit+0x74>)
 8009188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800918a:	4b13      	ldr	r3, [pc, #76]	; (80091d8 <HAL_ADC_MspInit+0x74>)
 800918c:	2180      	movs	r1, #128	; 0x80
 800918e:	0089      	lsls	r1, r1, #2
 8009190:	430a      	orrs	r2, r1
 8009192:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009194:	4b10      	ldr	r3, [pc, #64]	; (80091d8 <HAL_ADC_MspInit+0x74>)
 8009196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009198:	4b0f      	ldr	r3, [pc, #60]	; (80091d8 <HAL_ADC_MspInit+0x74>)
 800919a:	2101      	movs	r1, #1
 800919c:	430a      	orrs	r2, r1
 800919e:	62da      	str	r2, [r3, #44]	; 0x2c
 80091a0:	4b0d      	ldr	r3, [pc, #52]	; (80091d8 <HAL_ADC_MspInit+0x74>)
 80091a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a4:	2201      	movs	r2, #1
 80091a6:	4013      	ands	r3, r2
 80091a8:	60bb      	str	r3, [r7, #8]
 80091aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = AIN_BAT_Pin;
 80091ac:	193b      	adds	r3, r7, r4
 80091ae:	2220      	movs	r2, #32
 80091b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80091b2:	193b      	adds	r3, r7, r4
 80091b4:	2203      	movs	r2, #3
 80091b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091b8:	193b      	adds	r3, r7, r4
 80091ba:	2200      	movs	r2, #0
 80091bc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AIN_BAT_GPIO_Port, &GPIO_InitStruct);
 80091be:	193a      	adds	r2, r7, r4
 80091c0:	23a0      	movs	r3, #160	; 0xa0
 80091c2:	05db      	lsls	r3, r3, #23
 80091c4:	0011      	movs	r1, r2
 80091c6:	0018      	movs	r0, r3
 80091c8:	f7fa fbb6 	bl	8003938 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80091cc:	46c0      	nop			; (mov r8, r8)
 80091ce:	46bd      	mov	sp, r7
 80091d0:	b009      	add	sp, #36	; 0x24
 80091d2:	bd90      	pop	{r4, r7, pc}
 80091d4:	40012400 	.word	0x40012400
 80091d8:	40021000 	.word	0x40021000

080091dc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a0a      	ldr	r2, [pc, #40]	; (8009214 <HAL_CRC_MspInit+0x38>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d10d      	bne.n	800920a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80091ee:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <HAL_CRC_MspInit+0x3c>)
 80091f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091f2:	4b09      	ldr	r3, [pc, #36]	; (8009218 <HAL_CRC_MspInit+0x3c>)
 80091f4:	2180      	movs	r1, #128	; 0x80
 80091f6:	0149      	lsls	r1, r1, #5
 80091f8:	430a      	orrs	r2, r1
 80091fa:	631a      	str	r2, [r3, #48]	; 0x30
 80091fc:	4b06      	ldr	r3, [pc, #24]	; (8009218 <HAL_CRC_MspInit+0x3c>)
 80091fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009200:	2380      	movs	r3, #128	; 0x80
 8009202:	015b      	lsls	r3, r3, #5
 8009204:	4013      	ands	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	46bd      	mov	sp, r7
 800920e:	b004      	add	sp, #16
 8009210:	bd80      	pop	{r7, pc}
 8009212:	46c0      	nop			; (mov r8, r8)
 8009214:	40023000 	.word	0x40023000
 8009218:	40021000 	.word	0x40021000

0800921c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a0a      	ldr	r2, [pc, #40]	; (8009254 <HAL_RTC_MspInit+0x38>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d10e      	bne.n	800924c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800922e:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <HAL_RTC_MspInit+0x3c>)
 8009230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009232:	4b09      	ldr	r3, [pc, #36]	; (8009258 <HAL_RTC_MspInit+0x3c>)
 8009234:	2180      	movs	r1, #128	; 0x80
 8009236:	02c9      	lsls	r1, r1, #11
 8009238:	430a      	orrs	r2, r1
 800923a:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800923c:	2200      	movs	r2, #0
 800923e:	2100      	movs	r1, #0
 8009240:	2002      	movs	r0, #2
 8009242:	f7fa f833 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8009246:	2002      	movs	r0, #2
 8009248:	f7fa f845 	bl	80032d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800924c:	46c0      	nop			; (mov r8, r8)
 800924e:	46bd      	mov	sp, r7
 8009250:	b002      	add	sp, #8
 8009252:	bd80      	pop	{r7, pc}
 8009254:	40002800 	.word	0x40002800
 8009258:	40021000 	.word	0x40021000

0800925c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800925c:	b590      	push	{r4, r7, lr}
 800925e:	b089      	sub	sp, #36	; 0x24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009264:	240c      	movs	r4, #12
 8009266:	193b      	adds	r3, r7, r4
 8009268:	0018      	movs	r0, r3
 800926a:	2314      	movs	r3, #20
 800926c:	001a      	movs	r2, r3
 800926e:	2100      	movs	r1, #0
 8009270:	f000 fcb9 	bl	8009be6 <memset>
  if(hspi->Instance==SPI2)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a18      	ldr	r2, [pc, #96]	; (80092dc <HAL_SPI_MspInit+0x80>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d129      	bne.n	80092d2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800927e:	4b18      	ldr	r3, [pc, #96]	; (80092e0 <HAL_SPI_MspInit+0x84>)
 8009280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009282:	4b17      	ldr	r3, [pc, #92]	; (80092e0 <HAL_SPI_MspInit+0x84>)
 8009284:	2180      	movs	r1, #128	; 0x80
 8009286:	01c9      	lsls	r1, r1, #7
 8009288:	430a      	orrs	r2, r1
 800928a:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800928c:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <HAL_SPI_MspInit+0x84>)
 800928e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009290:	4b13      	ldr	r3, [pc, #76]	; (80092e0 <HAL_SPI_MspInit+0x84>)
 8009292:	2102      	movs	r1, #2
 8009294:	430a      	orrs	r2, r1
 8009296:	62da      	str	r2, [r3, #44]	; 0x2c
 8009298:	4b11      	ldr	r3, [pc, #68]	; (80092e0 <HAL_SPI_MspInit+0x84>)
 800929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929c:	2202      	movs	r2, #2
 800929e:	4013      	ands	r3, r2
 80092a0:	60bb      	str	r3, [r7, #8]
 80092a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80092a4:	193b      	adds	r3, r7, r4
 80092a6:	22e0      	movs	r2, #224	; 0xe0
 80092a8:	0212      	lsls	r2, r2, #8
 80092aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092ac:	0021      	movs	r1, r4
 80092ae:	187b      	adds	r3, r7, r1
 80092b0:	2202      	movs	r2, #2
 80092b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092b4:	187b      	adds	r3, r7, r1
 80092b6:	2200      	movs	r2, #0
 80092b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092ba:	187b      	adds	r3, r7, r1
 80092bc:	2203      	movs	r2, #3
 80092be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80092c0:	187b      	adds	r3, r7, r1
 80092c2:	2200      	movs	r2, #0
 80092c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092c6:	187b      	adds	r3, r7, r1
 80092c8:	4a06      	ldr	r2, [pc, #24]	; (80092e4 <HAL_SPI_MspInit+0x88>)
 80092ca:	0019      	movs	r1, r3
 80092cc:	0010      	movs	r0, r2
 80092ce:	f7fa fb33 	bl	8003938 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80092d2:	46c0      	nop			; (mov r8, r8)
 80092d4:	46bd      	mov	sp, r7
 80092d6:	b009      	add	sp, #36	; 0x24
 80092d8:	bd90      	pop	{r4, r7, pc}
 80092da:	46c0      	nop			; (mov r8, r8)
 80092dc:	40003800 	.word	0x40003800
 80092e0:	40021000 	.word	0x40021000
 80092e4:	50000400 	.word	0x50000400

080092e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a0a      	ldr	r2, [pc, #40]	; (8009320 <HAL_TIM_Base_MspInit+0x38>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d10d      	bne.n	8009316 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80092fa:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <HAL_TIM_Base_MspInit+0x3c>)
 80092fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092fe:	4b09      	ldr	r3, [pc, #36]	; (8009324 <HAL_TIM_Base_MspInit+0x3c>)
 8009300:	2110      	movs	r1, #16
 8009302:	430a      	orrs	r2, r1
 8009304:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8009306:	2200      	movs	r2, #0
 8009308:	2100      	movs	r1, #0
 800930a:	2011      	movs	r0, #17
 800930c:	f7f9 ffce 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8009310:	2011      	movs	r0, #17
 8009312:	f7f9 ffe0 	bl	80032d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8009316:	46c0      	nop			; (mov r8, r8)
 8009318:	46bd      	mov	sp, r7
 800931a:	b002      	add	sp, #8
 800931c:	bd80      	pop	{r7, pc}
 800931e:	46c0      	nop			; (mov r8, r8)
 8009320:	40001000 	.word	0x40001000
 8009324:	40021000 	.word	0x40021000

08009328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009328:	b590      	push	{r4, r7, lr}
 800932a:	b08d      	sub	sp, #52	; 0x34
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009330:	241c      	movs	r4, #28
 8009332:	193b      	adds	r3, r7, r4
 8009334:	0018      	movs	r0, r3
 8009336:	2314      	movs	r3, #20
 8009338:	001a      	movs	r2, r3
 800933a:	2100      	movs	r1, #0
 800933c:	f000 fc53 	bl	8009be6 <memset>
  if(huart->Instance==USART1)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4ac6      	ldr	r2, [pc, #792]	; (8009660 <HAL_UART_MspInit+0x338>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d173      	bne.n	8009432 <HAL_UART_MspInit+0x10a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800934a:	4bc6      	ldr	r3, [pc, #792]	; (8009664 <HAL_UART_MspInit+0x33c>)
 800934c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800934e:	4bc5      	ldr	r3, [pc, #788]	; (8009664 <HAL_UART_MspInit+0x33c>)
 8009350:	2180      	movs	r1, #128	; 0x80
 8009352:	01c9      	lsls	r1, r1, #7
 8009354:	430a      	orrs	r2, r1
 8009356:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009358:	4bc2      	ldr	r3, [pc, #776]	; (8009664 <HAL_UART_MspInit+0x33c>)
 800935a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935c:	4bc1      	ldr	r3, [pc, #772]	; (8009664 <HAL_UART_MspInit+0x33c>)
 800935e:	2101      	movs	r1, #1
 8009360:	430a      	orrs	r2, r1
 8009362:	62da      	str	r2, [r3, #44]	; 0x2c
 8009364:	4bbf      	ldr	r3, [pc, #764]	; (8009664 <HAL_UART_MspInit+0x33c>)
 8009366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009368:	2201      	movs	r2, #1
 800936a:	4013      	ands	r3, r2
 800936c:	61bb      	str	r3, [r7, #24]
 800936e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8009370:	193b      	adds	r3, r7, r4
 8009372:	2290      	movs	r2, #144	; 0x90
 8009374:	0152      	lsls	r2, r2, #5
 8009376:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009378:	193b      	adds	r3, r7, r4
 800937a:	2202      	movs	r2, #2
 800937c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800937e:	193b      	adds	r3, r7, r4
 8009380:	2200      	movs	r2, #0
 8009382:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009384:	193b      	adds	r3, r7, r4
 8009386:	2203      	movs	r2, #3
 8009388:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800938a:	193b      	adds	r3, r7, r4
 800938c:	2204      	movs	r2, #4
 800938e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009390:	193a      	adds	r2, r7, r4
 8009392:	23a0      	movs	r3, #160	; 0xa0
 8009394:	05db      	lsls	r3, r3, #23
 8009396:	0011      	movs	r1, r2
 8009398:	0018      	movs	r0, r3
 800939a:	f7fa facd 	bl	8003938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800939e:	0021      	movs	r1, r4
 80093a0:	187b      	adds	r3, r7, r1
 80093a2:	2280      	movs	r2, #128	; 0x80
 80093a4:	00d2      	lsls	r2, r2, #3
 80093a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093a8:	187b      	adds	r3, r7, r1
 80093aa:	2202      	movs	r2, #2
 80093ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80093ae:	187b      	adds	r3, r7, r1
 80093b0:	2201      	movs	r2, #1
 80093b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093b4:	187b      	adds	r3, r7, r1
 80093b6:	2203      	movs	r2, #3
 80093b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80093ba:	187b      	adds	r3, r7, r1
 80093bc:	2204      	movs	r2, #4
 80093be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093c0:	187a      	adds	r2, r7, r1
 80093c2:	23a0      	movs	r3, #160	; 0xa0
 80093c4:	05db      	lsls	r3, r3, #23
 80093c6:	0011      	movs	r1, r2
 80093c8:	0018      	movs	r0, r3
 80093ca:	f7fa fab5 	bl	8003938 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80093ce:	4ba6      	ldr	r3, [pc, #664]	; (8009668 <HAL_UART_MspInit+0x340>)
 80093d0:	4aa6      	ldr	r2, [pc, #664]	; (800966c <HAL_UART_MspInit+0x344>)
 80093d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80093d4:	4ba4      	ldr	r3, [pc, #656]	; (8009668 <HAL_UART_MspInit+0x340>)
 80093d6:	2203      	movs	r2, #3
 80093d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80093da:	4ba3      	ldr	r3, [pc, #652]	; (8009668 <HAL_UART_MspInit+0x340>)
 80093dc:	2200      	movs	r2, #0
 80093de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80093e0:	4ba1      	ldr	r3, [pc, #644]	; (8009668 <HAL_UART_MspInit+0x340>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80093e6:	4ba0      	ldr	r3, [pc, #640]	; (8009668 <HAL_UART_MspInit+0x340>)
 80093e8:	2280      	movs	r2, #128	; 0x80
 80093ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80093ec:	4b9e      	ldr	r3, [pc, #632]	; (8009668 <HAL_UART_MspInit+0x340>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80093f2:	4b9d      	ldr	r3, [pc, #628]	; (8009668 <HAL_UART_MspInit+0x340>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80093f8:	4b9b      	ldr	r3, [pc, #620]	; (8009668 <HAL_UART_MspInit+0x340>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80093fe:	4b9a      	ldr	r3, [pc, #616]	; (8009668 <HAL_UART_MspInit+0x340>)
 8009400:	2200      	movs	r2, #0
 8009402:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009404:	4b98      	ldr	r3, [pc, #608]	; (8009668 <HAL_UART_MspInit+0x340>)
 8009406:	0018      	movs	r0, r3
 8009408:	f7fa f84a 	bl	80034a0 <HAL_DMA_Init>
 800940c:	1e03      	subs	r3, r0, #0
 800940e:	d001      	beq.n	8009414 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8009410:	f7ff fe8e 	bl	8009130 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a94      	ldr	r2, [pc, #592]	; (8009668 <HAL_UART_MspInit+0x340>)
 8009418:	66da      	str	r2, [r3, #108]	; 0x6c
 800941a:	4b93      	ldr	r3, [pc, #588]	; (8009668 <HAL_UART_MspInit+0x340>)
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009420:	2200      	movs	r2, #0
 8009422:	2100      	movs	r1, #0
 8009424:	201b      	movs	r0, #27
 8009426:	f7f9 ff41 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800942a:	201b      	movs	r0, #27
 800942c:	f7f9 ff53 	bl	80032d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8009430:	e191      	b.n	8009756 <HAL_UART_MspInit+0x42e>
  else if(huart->Instance==USART2)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a8e      	ldr	r2, [pc, #568]	; (8009670 <HAL_UART_MspInit+0x348>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d000      	beq.n	800943e <HAL_UART_MspInit+0x116>
 800943c:	e084      	b.n	8009548 <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART2_CLK_ENABLE();
 800943e:	4b89      	ldr	r3, [pc, #548]	; (8009664 <HAL_UART_MspInit+0x33c>)
 8009440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009442:	4b88      	ldr	r3, [pc, #544]	; (8009664 <HAL_UART_MspInit+0x33c>)
 8009444:	2180      	movs	r1, #128	; 0x80
 8009446:	0289      	lsls	r1, r1, #10
 8009448:	430a      	orrs	r2, r1
 800944a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800944c:	4b85      	ldr	r3, [pc, #532]	; (8009664 <HAL_UART_MspInit+0x33c>)
 800944e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009450:	4b84      	ldr	r3, [pc, #528]	; (8009664 <HAL_UART_MspInit+0x33c>)
 8009452:	2101      	movs	r1, #1
 8009454:	430a      	orrs	r2, r1
 8009456:	62da      	str	r2, [r3, #44]	; 0x2c
 8009458:	4b82      	ldr	r3, [pc, #520]	; (8009664 <HAL_UART_MspInit+0x33c>)
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	2201      	movs	r2, #1
 800945e:	4013      	ands	r3, r2
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009464:	211c      	movs	r1, #28
 8009466:	187b      	adds	r3, r7, r1
 8009468:	220c      	movs	r2, #12
 800946a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800946c:	187b      	adds	r3, r7, r1
 800946e:	2202      	movs	r2, #2
 8009470:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009472:	187b      	adds	r3, r7, r1
 8009474:	2200      	movs	r2, #0
 8009476:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009478:	187b      	adds	r3, r7, r1
 800947a:	2203      	movs	r2, #3
 800947c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800947e:	187b      	adds	r3, r7, r1
 8009480:	2204      	movs	r2, #4
 8009482:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009484:	187a      	adds	r2, r7, r1
 8009486:	23a0      	movs	r3, #160	; 0xa0
 8009488:	05db      	lsls	r3, r3, #23
 800948a:	0011      	movs	r1, r2
 800948c:	0018      	movs	r0, r3
 800948e:	f7fa fa53 	bl	8003938 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8009492:	4b78      	ldr	r3, [pc, #480]	; (8009674 <HAL_UART_MspInit+0x34c>)
 8009494:	4a78      	ldr	r2, [pc, #480]	; (8009678 <HAL_UART_MspInit+0x350>)
 8009496:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8009498:	4b76      	ldr	r3, [pc, #472]	; (8009674 <HAL_UART_MspInit+0x34c>)
 800949a:	2204      	movs	r2, #4
 800949c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800949e:	4b75      	ldr	r3, [pc, #468]	; (8009674 <HAL_UART_MspInit+0x34c>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80094a4:	4b73      	ldr	r3, [pc, #460]	; (8009674 <HAL_UART_MspInit+0x34c>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80094aa:	4b72      	ldr	r3, [pc, #456]	; (8009674 <HAL_UART_MspInit+0x34c>)
 80094ac:	2280      	movs	r2, #128	; 0x80
 80094ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80094b0:	4b70      	ldr	r3, [pc, #448]	; (8009674 <HAL_UART_MspInit+0x34c>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80094b6:	4b6f      	ldr	r3, [pc, #444]	; (8009674 <HAL_UART_MspInit+0x34c>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80094bc:	4b6d      	ldr	r3, [pc, #436]	; (8009674 <HAL_UART_MspInit+0x34c>)
 80094be:	2200      	movs	r2, #0
 80094c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80094c2:	4b6c      	ldr	r3, [pc, #432]	; (8009674 <HAL_UART_MspInit+0x34c>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80094c8:	4b6a      	ldr	r3, [pc, #424]	; (8009674 <HAL_UART_MspInit+0x34c>)
 80094ca:	0018      	movs	r0, r3
 80094cc:	f7f9 ffe8 	bl	80034a0 <HAL_DMA_Init>
 80094d0:	1e03      	subs	r3, r0, #0
 80094d2:	d001      	beq.n	80094d8 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 80094d4:	f7ff fe2c 	bl	8009130 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a66      	ldr	r2, [pc, #408]	; (8009674 <HAL_UART_MspInit+0x34c>)
 80094dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80094de:	4b65      	ldr	r3, [pc, #404]	; (8009674 <HAL_UART_MspInit+0x34c>)
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80094e4:	4b65      	ldr	r3, [pc, #404]	; (800967c <HAL_UART_MspInit+0x354>)
 80094e6:	4a66      	ldr	r2, [pc, #408]	; (8009680 <HAL_UART_MspInit+0x358>)
 80094e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 80094ea:	4b64      	ldr	r3, [pc, #400]	; (800967c <HAL_UART_MspInit+0x354>)
 80094ec:	2204      	movs	r2, #4
 80094ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80094f0:	4b62      	ldr	r3, [pc, #392]	; (800967c <HAL_UART_MspInit+0x354>)
 80094f2:	2210      	movs	r2, #16
 80094f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80094f6:	4b61      	ldr	r3, [pc, #388]	; (800967c <HAL_UART_MspInit+0x354>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80094fc:	4b5f      	ldr	r3, [pc, #380]	; (800967c <HAL_UART_MspInit+0x354>)
 80094fe:	2280      	movs	r2, #128	; 0x80
 8009500:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009502:	4b5e      	ldr	r3, [pc, #376]	; (800967c <HAL_UART_MspInit+0x354>)
 8009504:	2200      	movs	r2, #0
 8009506:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009508:	4b5c      	ldr	r3, [pc, #368]	; (800967c <HAL_UART_MspInit+0x354>)
 800950a:	2200      	movs	r2, #0
 800950c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800950e:	4b5b      	ldr	r3, [pc, #364]	; (800967c <HAL_UART_MspInit+0x354>)
 8009510:	2200      	movs	r2, #0
 8009512:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009514:	4b59      	ldr	r3, [pc, #356]	; (800967c <HAL_UART_MspInit+0x354>)
 8009516:	2200      	movs	r2, #0
 8009518:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800951a:	4b58      	ldr	r3, [pc, #352]	; (800967c <HAL_UART_MspInit+0x354>)
 800951c:	0018      	movs	r0, r3
 800951e:	f7f9 ffbf 	bl	80034a0 <HAL_DMA_Init>
 8009522:	1e03      	subs	r3, r0, #0
 8009524:	d001      	beq.n	800952a <HAL_UART_MspInit+0x202>
      Error_Handler();
 8009526:	f7ff fe03 	bl	8009130 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a53      	ldr	r2, [pc, #332]	; (800967c <HAL_UART_MspInit+0x354>)
 800952e:	669a      	str	r2, [r3, #104]	; 0x68
 8009530:	4b52      	ldr	r3, [pc, #328]	; (800967c <HAL_UART_MspInit+0x354>)
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009536:	2200      	movs	r2, #0
 8009538:	2100      	movs	r1, #0
 800953a:	201c      	movs	r0, #28
 800953c:	f7f9 feb6 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009540:	201c      	movs	r0, #28
 8009542:	f7f9 fec8 	bl	80032d6 <HAL_NVIC_EnableIRQ>
}
 8009546:	e106      	b.n	8009756 <HAL_UART_MspInit+0x42e>
  else if(huart->Instance==USART4)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a4d      	ldr	r2, [pc, #308]	; (8009684 <HAL_UART_MspInit+0x35c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d000      	beq.n	8009554 <HAL_UART_MspInit+0x22c>
 8009552:	e0a1      	b.n	8009698 <HAL_UART_MspInit+0x370>
    __HAL_RCC_USART4_CLK_ENABLE();
 8009554:	4b43      	ldr	r3, [pc, #268]	; (8009664 <HAL_UART_MspInit+0x33c>)
 8009556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009558:	4b42      	ldr	r3, [pc, #264]	; (8009664 <HAL_UART_MspInit+0x33c>)
 800955a:	2180      	movs	r1, #128	; 0x80
 800955c:	0309      	lsls	r1, r1, #12
 800955e:	430a      	orrs	r2, r1
 8009560:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009562:	4b40      	ldr	r3, [pc, #256]	; (8009664 <HAL_UART_MspInit+0x33c>)
 8009564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009566:	4b3f      	ldr	r3, [pc, #252]	; (8009664 <HAL_UART_MspInit+0x33c>)
 8009568:	2101      	movs	r1, #1
 800956a:	430a      	orrs	r2, r1
 800956c:	62da      	str	r2, [r3, #44]	; 0x2c
 800956e:	4b3d      	ldr	r3, [pc, #244]	; (8009664 <HAL_UART_MspInit+0x33c>)
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	2201      	movs	r2, #1
 8009574:	4013      	ands	r3, r2
 8009576:	613b      	str	r3, [r7, #16]
 8009578:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800957a:	211c      	movs	r1, #28
 800957c:	187b      	adds	r3, r7, r1
 800957e:	2203      	movs	r2, #3
 8009580:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009582:	187b      	adds	r3, r7, r1
 8009584:	2202      	movs	r2, #2
 8009586:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009588:	187b      	adds	r3, r7, r1
 800958a:	2200      	movs	r2, #0
 800958c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800958e:	187b      	adds	r3, r7, r1
 8009590:	2203      	movs	r2, #3
 8009592:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8009594:	187b      	adds	r3, r7, r1
 8009596:	2206      	movs	r2, #6
 8009598:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800959a:	187a      	adds	r2, r7, r1
 800959c:	23a0      	movs	r3, #160	; 0xa0
 800959e:	05db      	lsls	r3, r3, #23
 80095a0:	0011      	movs	r1, r2
 80095a2:	0018      	movs	r0, r3
 80095a4:	f7fa f9c8 	bl	8003938 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80095a8:	4b37      	ldr	r3, [pc, #220]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095aa:	4a38      	ldr	r2, [pc, #224]	; (800968c <HAL_UART_MspInit+0x364>)
 80095ac:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80095ae:	4b36      	ldr	r3, [pc, #216]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095b0:	220c      	movs	r2, #12
 80095b2:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80095b4:	4b34      	ldr	r3, [pc, #208]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80095ba:	4b33      	ldr	r3, [pc, #204]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095bc:	2200      	movs	r2, #0
 80095be:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80095c0:	4b31      	ldr	r3, [pc, #196]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095c2:	2280      	movs	r2, #128	; 0x80
 80095c4:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80095c6:	4b30      	ldr	r3, [pc, #192]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80095cc:	4b2e      	ldr	r3, [pc, #184]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 80095d2:	4b2d      	ldr	r3, [pc, #180]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80095d8:	4b2b      	ldr	r3, [pc, #172]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095da:	2200      	movs	r2, #0
 80095dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80095de:	4b2a      	ldr	r3, [pc, #168]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095e0:	0018      	movs	r0, r3
 80095e2:	f7f9 ff5d 	bl	80034a0 <HAL_DMA_Init>
 80095e6:	1e03      	subs	r3, r0, #0
 80095e8:	d001      	beq.n	80095ee <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 80095ea:	f7ff fda1 	bl	8009130 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a25      	ldr	r2, [pc, #148]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80095f4:	4b24      	ldr	r3, [pc, #144]	; (8009688 <HAL_UART_MspInit+0x360>)
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80095fa:	4b25      	ldr	r3, [pc, #148]	; (8009690 <HAL_UART_MspInit+0x368>)
 80095fc:	4a25      	ldr	r2, [pc, #148]	; (8009694 <HAL_UART_MspInit+0x36c>)
 80095fe:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8009600:	4b23      	ldr	r3, [pc, #140]	; (8009690 <HAL_UART_MspInit+0x368>)
 8009602:	220c      	movs	r2, #12
 8009604:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009606:	4b22      	ldr	r3, [pc, #136]	; (8009690 <HAL_UART_MspInit+0x368>)
 8009608:	2210      	movs	r2, #16
 800960a:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800960c:	4b20      	ldr	r3, [pc, #128]	; (8009690 <HAL_UART_MspInit+0x368>)
 800960e:	2200      	movs	r2, #0
 8009610:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009612:	4b1f      	ldr	r3, [pc, #124]	; (8009690 <HAL_UART_MspInit+0x368>)
 8009614:	2280      	movs	r2, #128	; 0x80
 8009616:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009618:	4b1d      	ldr	r3, [pc, #116]	; (8009690 <HAL_UART_MspInit+0x368>)
 800961a:	2200      	movs	r2, #0
 800961c:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800961e:	4b1c      	ldr	r3, [pc, #112]	; (8009690 <HAL_UART_MspInit+0x368>)
 8009620:	2200      	movs	r2, #0
 8009622:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8009624:	4b1a      	ldr	r3, [pc, #104]	; (8009690 <HAL_UART_MspInit+0x368>)
 8009626:	2200      	movs	r2, #0
 8009628:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800962a:	4b19      	ldr	r3, [pc, #100]	; (8009690 <HAL_UART_MspInit+0x368>)
 800962c:	2200      	movs	r2, #0
 800962e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8009630:	4b17      	ldr	r3, [pc, #92]	; (8009690 <HAL_UART_MspInit+0x368>)
 8009632:	0018      	movs	r0, r3
 8009634:	f7f9 ff34 	bl	80034a0 <HAL_DMA_Init>
 8009638:	1e03      	subs	r3, r0, #0
 800963a:	d001      	beq.n	8009640 <HAL_UART_MspInit+0x318>
      Error_Handler();
 800963c:	f7ff fd78 	bl	8009130 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a13      	ldr	r2, [pc, #76]	; (8009690 <HAL_UART_MspInit+0x368>)
 8009644:	669a      	str	r2, [r3, #104]	; 0x68
 8009646:	4b12      	ldr	r3, [pc, #72]	; (8009690 <HAL_UART_MspInit+0x368>)
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800964c:	2200      	movs	r2, #0
 800964e:	2100      	movs	r1, #0
 8009650:	200e      	movs	r0, #14
 8009652:	f7f9 fe2b 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8009656:	200e      	movs	r0, #14
 8009658:	f7f9 fe3d 	bl	80032d6 <HAL_NVIC_EnableIRQ>
}
 800965c:	e07b      	b.n	8009756 <HAL_UART_MspInit+0x42e>
 800965e:	46c0      	nop			; (mov r8, r8)
 8009660:	40013800 	.word	0x40013800
 8009664:	40021000 	.word	0x40021000
 8009668:	200008d0 	.word	0x200008d0
 800966c:	40020030 	.word	0x40020030
 8009670:	40004400 	.word	0x40004400
 8009674:	200003ec 	.word	0x200003ec
 8009678:	40020058 	.word	0x40020058
 800967c:	20000918 	.word	0x20000918
 8009680:	40020044 	.word	0x40020044
 8009684:	40004c00 	.word	0x40004c00
 8009688:	20000744 	.word	0x20000744
 800968c:	4002006c 	.word	0x4002006c
 8009690:	200004f8 	.word	0x200004f8
 8009694:	40020080 	.word	0x40020080
  else if(huart->Instance==USART5)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a30      	ldr	r2, [pc, #192]	; (8009760 <HAL_UART_MspInit+0x438>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d159      	bne.n	8009756 <HAL_UART_MspInit+0x42e>
    __HAL_RCC_USART5_CLK_ENABLE();
 80096a2:	4b30      	ldr	r3, [pc, #192]	; (8009764 <HAL_UART_MspInit+0x43c>)
 80096a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096a6:	4b2f      	ldr	r3, [pc, #188]	; (8009764 <HAL_UART_MspInit+0x43c>)
 80096a8:	2180      	movs	r1, #128	; 0x80
 80096aa:	0349      	lsls	r1, r1, #13
 80096ac:	430a      	orrs	r2, r1
 80096ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096b0:	4b2c      	ldr	r3, [pc, #176]	; (8009764 <HAL_UART_MspInit+0x43c>)
 80096b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b4:	4b2b      	ldr	r3, [pc, #172]	; (8009764 <HAL_UART_MspInit+0x43c>)
 80096b6:	2102      	movs	r1, #2
 80096b8:	430a      	orrs	r2, r1
 80096ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80096bc:	4b29      	ldr	r3, [pc, #164]	; (8009764 <HAL_UART_MspInit+0x43c>)
 80096be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c0:	2202      	movs	r2, #2
 80096c2:	4013      	ands	r3, r2
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80096c8:	211c      	movs	r1, #28
 80096ca:	187b      	adds	r3, r7, r1
 80096cc:	2238      	movs	r2, #56	; 0x38
 80096ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096d0:	187b      	adds	r3, r7, r1
 80096d2:	2202      	movs	r2, #2
 80096d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096d6:	187b      	adds	r3, r7, r1
 80096d8:	2200      	movs	r2, #0
 80096da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096dc:	187b      	adds	r3, r7, r1
 80096de:	2203      	movs	r2, #3
 80096e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 80096e2:	187b      	adds	r3, r7, r1
 80096e4:	2206      	movs	r2, #6
 80096e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096e8:	187b      	adds	r3, r7, r1
 80096ea:	4a1f      	ldr	r2, [pc, #124]	; (8009768 <HAL_UART_MspInit+0x440>)
 80096ec:	0019      	movs	r1, r3
 80096ee:	0010      	movs	r0, r2
 80096f0:	f7fa f922 	bl	8003938 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA1_Channel2;
 80096f4:	4b1d      	ldr	r3, [pc, #116]	; (800976c <HAL_UART_MspInit+0x444>)
 80096f6:	4a1e      	ldr	r2, [pc, #120]	; (8009770 <HAL_UART_MspInit+0x448>)
 80096f8:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_13;
 80096fa:	4b1c      	ldr	r3, [pc, #112]	; (800976c <HAL_UART_MspInit+0x444>)
 80096fc:	220d      	movs	r2, #13
 80096fe:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009700:	4b1a      	ldr	r3, [pc, #104]	; (800976c <HAL_UART_MspInit+0x444>)
 8009702:	2200      	movs	r2, #0
 8009704:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009706:	4b19      	ldr	r3, [pc, #100]	; (800976c <HAL_UART_MspInit+0x444>)
 8009708:	2200      	movs	r2, #0
 800970a:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800970c:	4b17      	ldr	r3, [pc, #92]	; (800976c <HAL_UART_MspInit+0x444>)
 800970e:	2280      	movs	r2, #128	; 0x80
 8009710:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009712:	4b16      	ldr	r3, [pc, #88]	; (800976c <HAL_UART_MspInit+0x444>)
 8009714:	2200      	movs	r2, #0
 8009716:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009718:	4b14      	ldr	r3, [pc, #80]	; (800976c <HAL_UART_MspInit+0x444>)
 800971a:	2200      	movs	r2, #0
 800971c:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <HAL_UART_MspInit+0x444>)
 8009720:	2200      	movs	r2, #0
 8009722:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009724:	4b11      	ldr	r3, [pc, #68]	; (800976c <HAL_UART_MspInit+0x444>)
 8009726:	2200      	movs	r2, #0
 8009728:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 800972a:	4b10      	ldr	r3, [pc, #64]	; (800976c <HAL_UART_MspInit+0x444>)
 800972c:	0018      	movs	r0, r3
 800972e:	f7f9 feb7 	bl	80034a0 <HAL_DMA_Init>
 8009732:	1e03      	subs	r3, r0, #0
 8009734:	d001      	beq.n	800973a <HAL_UART_MspInit+0x412>
      Error_Handler();
 8009736:	f7ff fcfb 	bl	8009130 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart5_rx);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a0b      	ldr	r2, [pc, #44]	; (800976c <HAL_UART_MspInit+0x444>)
 800973e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009740:	4b0a      	ldr	r3, [pc, #40]	; (800976c <HAL_UART_MspInit+0x444>)
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8009746:	2200      	movs	r2, #0
 8009748:	2100      	movs	r1, #0
 800974a:	200e      	movs	r0, #14
 800974c:	f7f9 fdae 	bl	80032ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8009750:	200e      	movs	r0, #14
 8009752:	f7f9 fdc0 	bl	80032d6 <HAL_NVIC_EnableIRQ>
}
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	46bd      	mov	sp, r7
 800975a:	b00d      	add	sp, #52	; 0x34
 800975c:	bd90      	pop	{r4, r7, pc}
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	40005000 	.word	0x40005000
 8009764:	40021000 	.word	0x40021000
 8009768:	50000400 	.word	0x50000400
 800976c:	200004b0 	.word	0x200004b0
 8009770:	4002001c 	.word	0x4002001c

08009774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08a      	sub	sp, #40	; 0x28
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	0019      	movs	r1, r3
 800978a:	200f      	movs	r0, #15
 800978c:	f7f9 fd8e 	bl	80032ac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8009790:	200f      	movs	r0, #15
 8009792:	f7f9 fda0 	bl	80032d6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8009796:	4b1d      	ldr	r3, [pc, #116]	; (800980c <HAL_InitTick+0x98>)
 8009798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800979a:	4b1c      	ldr	r3, [pc, #112]	; (800980c <HAL_InitTick+0x98>)
 800979c:	2101      	movs	r1, #1
 800979e:	430a      	orrs	r2, r1
 80097a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80097a2:	2308      	movs	r3, #8
 80097a4:	18fa      	adds	r2, r7, r3
 80097a6:	230c      	movs	r3, #12
 80097a8:	18fb      	adds	r3, r7, r3
 80097aa:	0011      	movs	r1, r2
 80097ac:	0018      	movs	r0, r3
 80097ae:	f7fb f811 	bl	80047d4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80097b2:	f7fa ffe3 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 80097b6:	0003      	movs	r3, r0
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	4914      	ldr	r1, [pc, #80]	; (8009810 <HAL_InitTick+0x9c>)
 80097be:	0018      	movs	r0, r3
 80097c0:	f7f6 fcbe 	bl	8000140 <__udivsi3>
 80097c4:	0003      	movs	r3, r0
 80097c6:	3b01      	subs	r3, #1
 80097c8:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80097ca:	4b12      	ldr	r3, [pc, #72]	; (8009814 <HAL_InitTick+0xa0>)
 80097cc:	2280      	movs	r2, #128	; 0x80
 80097ce:	05d2      	lsls	r2, r2, #23
 80097d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80097d2:	4b10      	ldr	r3, [pc, #64]	; (8009814 <HAL_InitTick+0xa0>)
 80097d4:	4a10      	ldr	r2, [pc, #64]	; (8009818 <HAL_InitTick+0xa4>)
 80097d6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80097d8:	4b0e      	ldr	r3, [pc, #56]	; (8009814 <HAL_InitTick+0xa0>)
 80097da:	6a3a      	ldr	r2, [r7, #32]
 80097dc:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 80097de:	4b0d      	ldr	r3, [pc, #52]	; (8009814 <HAL_InitTick+0xa0>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097e4:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <HAL_InitTick+0xa0>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80097ea:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <HAL_InitTick+0xa0>)
 80097ec:	0018      	movs	r0, r3
 80097ee:	f7fc f8de 	bl	80059ae <HAL_TIM_Base_Init>
 80097f2:	1e03      	subs	r3, r0, #0
 80097f4:	d105      	bne.n	8009802 <HAL_InitTick+0x8e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80097f6:	4b07      	ldr	r3, [pc, #28]	; (8009814 <HAL_InitTick+0xa0>)
 80097f8:	0018      	movs	r0, r3
 80097fa:	f7fc f904 	bl	8005a06 <HAL_TIM_Base_Start_IT>
 80097fe:	0003      	movs	r3, r0
 8009800:	e000      	b.n	8009804 <HAL_InitTick+0x90>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
}
 8009804:	0018      	movs	r0, r3
 8009806:	46bd      	mov	sp, r7
 8009808:	b00a      	add	sp, #40	; 0x28
 800980a:	bd80      	pop	{r7, pc}
 800980c:	40021000 	.word	0x40021000
 8009810:	000f4240 	.word	0x000f4240
 8009814:	20000f90 	.word	0x20000f90
 8009818:	000003e7 	.word	0x000003e7

0800981c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009820:	46c0      	nop			; (mov r8, r8)
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800982a:	e7fe      	b.n	800982a <HardFault_Handler+0x4>

0800982c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8009830:	46c0      	nop			; (mov r8, r8)
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009844:	46c0      	nop			; (mov r8, r8)
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8009850:	4b03      	ldr	r3, [pc, #12]	; (8009860 <RTC_IRQHandler+0x14>)
 8009852:	0018      	movs	r0, r3
 8009854:	f7fb fdae 	bl	80053b4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8009858:	46c0      	nop			; (mov r8, r8)
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	20000c44 	.word	0x20000c44

08009864 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 8009868:	4b05      	ldr	r3, [pc, #20]	; (8009880 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800986a:	0018      	movs	r0, r3
 800986c:	f7f9 ff7d 	bl	800376a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009870:	4b04      	ldr	r3, [pc, #16]	; (8009884 <DMA1_Channel2_3_IRQHandler+0x20>)
 8009872:	0018      	movs	r0, r3
 8009874:	f7f9 ff79 	bl	800376a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8009878:	46c0      	nop			; (mov r8, r8)
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	46c0      	nop			; (mov r8, r8)
 8009880:	200004b0 	.word	0x200004b0
 8009884:	200008d0 	.word	0x200008d0

08009888 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800988c:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800988e:	0018      	movs	r0, r3
 8009890:	f7f9 ff6b 	bl	800376a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009894:	4b08      	ldr	r3, [pc, #32]	; (80098b8 <DMA1_Channel4_5_6_7_IRQHandler+0x30>)
 8009896:	0018      	movs	r0, r3
 8009898:	f7f9 ff67 	bl	800376a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800989c:	4b07      	ldr	r3, [pc, #28]	; (80098bc <DMA1_Channel4_5_6_7_IRQHandler+0x34>)
 800989e:	0018      	movs	r0, r3
 80098a0:	f7f9 ff63 	bl	800376a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80098a4:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <DMA1_Channel4_5_6_7_IRQHandler+0x38>)
 80098a6:	0018      	movs	r0, r3
 80098a8:	f7f9 ff5f 	bl	800376a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80098ac:	46c0      	nop			; (mov r8, r8)
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	46c0      	nop			; (mov r8, r8)
 80098b4:	20000918 	.word	0x20000918
 80098b8:	200003ec 	.word	0x200003ec
 80098bc:	20000744 	.word	0x20000744
 80098c0:	200004f8 	.word	0x200004f8

080098c4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80098c8:	4b05      	ldr	r3, [pc, #20]	; (80098e0 <USART4_5_IRQHandler+0x1c>)
 80098ca:	0018      	movs	r0, r3
 80098cc:	f7fc fce6 	bl	800629c <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 80098d0:	4b04      	ldr	r3, [pc, #16]	; (80098e4 <USART4_5_IRQHandler+0x20>)
 80098d2:	0018      	movs	r0, r3
 80098d4:	f7fc fce2 	bl	800629c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80098d8:	46c0      	nop			; (mov r8, r8)
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	46c0      	nop			; (mov r8, r8)
 80098e0:	20000e34 	.word	0x20000e34
 80098e4:	20000850 	.word	0x20000850

080098e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80098ec:	4b03      	ldr	r3, [pc, #12]	; (80098fc <TIM2_IRQHandler+0x14>)
 80098ee:	0018      	movs	r0, r3
 80098f0:	f7fc f8ab 	bl	8005a4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80098f4:	46c0      	nop			; (mov r8, r8)
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	20000f90 	.word	0x20000f90

08009900 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009904:	4b03      	ldr	r3, [pc, #12]	; (8009914 <TIM6_IRQHandler+0x14>)
 8009906:	0018      	movs	r0, r3
 8009908:	f7fc f89f 	bl	8005a4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800990c:	46c0      	nop			; (mov r8, r8)
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	20000c68 	.word	0x20000c68

08009918 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800991c:	4b03      	ldr	r3, [pc, #12]	; (800992c <USART1_IRQHandler+0x14>)
 800991e:	0018      	movs	r0, r3
 8009920:	f7fc fcbc 	bl	800629c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009924:	46c0      	nop			; (mov r8, r8)
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	46c0      	nop			; (mov r8, r8)
 800992c:	20000960 	.word	0x20000960

08009930 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009934:	4b03      	ldr	r3, [pc, #12]	; (8009944 <USART2_IRQHandler+0x14>)
 8009936:	0018      	movs	r0, r3
 8009938:	f7fc fcb0 	bl	800629c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800993c:	46c0      	nop			; (mov r8, r8)
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	46c0      	nop			; (mov r8, r8)
 8009944:	20000eb4 	.word	0x20000eb4

08009948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
	return 1;
 800994c:	2301      	movs	r3, #1
}
 800994e:	0018      	movs	r0, r3
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <_kill>:

int _kill(int pid, int sig)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800995e:	f000 f90f 	bl	8009b80 <__errno>
 8009962:	0003      	movs	r3, r0
 8009964:	2216      	movs	r2, #22
 8009966:	601a      	str	r2, [r3, #0]
	return -1;
 8009968:	2301      	movs	r3, #1
 800996a:	425b      	negs	r3, r3
}
 800996c:	0018      	movs	r0, r3
 800996e:	46bd      	mov	sp, r7
 8009970:	b002      	add	sp, #8
 8009972:	bd80      	pop	{r7, pc}

08009974 <_exit>:

void _exit (int status)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800997c:	2301      	movs	r3, #1
 800997e:	425a      	negs	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	0011      	movs	r1, r2
 8009984:	0018      	movs	r0, r3
 8009986:	f7ff ffe5 	bl	8009954 <_kill>
	while (1) {}		/* Make sure we hang here */
 800998a:	e7fe      	b.n	800998a <_exit+0x16>

0800998c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009998:	2300      	movs	r3, #0
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	e00a      	b.n	80099b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800999e:	e000      	b.n	80099a2 <_read+0x16>
 80099a0:	bf00      	nop
 80099a2:	0001      	movs	r1, r0
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	60ba      	str	r2, [r7, #8]
 80099aa:	b2ca      	uxtb	r2, r1
 80099ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	3301      	adds	r3, #1
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	dbf0      	blt.n	800999e <_read+0x12>
	}

return len;
 80099bc:	687b      	ldr	r3, [r7, #4]
}
 80099be:	0018      	movs	r0, r3
 80099c0:	46bd      	mov	sp, r7
 80099c2:	b006      	add	sp, #24
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b086      	sub	sp, #24
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]
 80099d6:	e009      	b.n	80099ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	60ba      	str	r2, [r7, #8]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	0018      	movs	r0, r3
 80099e2:	e000      	b.n	80099e6 <_write+0x20>
 80099e4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	3301      	adds	r3, #1
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	dbf1      	blt.n	80099d8 <_write+0x12>
	}
	return len;
 80099f4:	687b      	ldr	r3, [r7, #4]
}
 80099f6:	0018      	movs	r0, r3
 80099f8:	46bd      	mov	sp, r7
 80099fa:	b006      	add	sp, #24
 80099fc:	bd80      	pop	{r7, pc}

080099fe <_close>:

int _close(int file)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
	return -1;
 8009a06:	2301      	movs	r3, #1
 8009a08:	425b      	negs	r3, r3
}
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	b002      	add	sp, #8
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b082      	sub	sp, #8
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2280      	movs	r2, #128	; 0x80
 8009a20:	0192      	lsls	r2, r2, #6
 8009a22:	605a      	str	r2, [r3, #4]
	return 0;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	0018      	movs	r0, r3
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	b002      	add	sp, #8
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <_isatty>:

int _isatty(int file)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
	return 1;
 8009a36:	2301      	movs	r3, #1
}
 8009a38:	0018      	movs	r0, r3
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	b002      	add	sp, #8
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
	return 0;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	0018      	movs	r0, r3
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b004      	add	sp, #16
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009a60:	4b11      	ldr	r3, [pc, #68]	; (8009aa8 <_sbrk+0x50>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d102      	bne.n	8009a6e <_sbrk+0x16>
		heap_end = &end;
 8009a68:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <_sbrk+0x50>)
 8009a6a:	4a10      	ldr	r2, [pc, #64]	; (8009aac <_sbrk+0x54>)
 8009a6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009a6e:	4b0e      	ldr	r3, [pc, #56]	; (8009aa8 <_sbrk+0x50>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <_sbrk+0x50>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	18d2      	adds	r2, r2, r3
 8009a7c:	466b      	mov	r3, sp
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d907      	bls.n	8009a92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009a82:	f000 f87d 	bl	8009b80 <__errno>
 8009a86:	0003      	movs	r3, r0
 8009a88:	220c      	movs	r2, #12
 8009a8a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	425b      	negs	r3, r3
 8009a90:	e006      	b.n	8009aa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8009a92:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <_sbrk+0x50>)
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	18d2      	adds	r2, r2, r3
 8009a9a:	4b03      	ldr	r3, [pc, #12]	; (8009aa8 <_sbrk+0x50>)
 8009a9c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
}
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	b004      	add	sp, #16
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20000228 	.word	0x20000228
 8009aac:	20000fe0 	.word	0x20000fe0

08009ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8009ab4:	4b17      	ldr	r3, [pc, #92]	; (8009b14 <SystemInit+0x64>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	4b16      	ldr	r3, [pc, #88]	; (8009b14 <SystemInit+0x64>)
 8009aba:	2180      	movs	r1, #128	; 0x80
 8009abc:	0049      	lsls	r1, r1, #1
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8009ac2:	4b14      	ldr	r3, [pc, #80]	; (8009b14 <SystemInit+0x64>)
 8009ac4:	68da      	ldr	r2, [r3, #12]
 8009ac6:	4b13      	ldr	r3, [pc, #76]	; (8009b14 <SystemInit+0x64>)
 8009ac8:	4913      	ldr	r1, [pc, #76]	; (8009b18 <SystemInit+0x68>)
 8009aca:	400a      	ands	r2, r1
 8009acc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8009ace:	4b11      	ldr	r3, [pc, #68]	; (8009b14 <SystemInit+0x64>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	4b10      	ldr	r3, [pc, #64]	; (8009b14 <SystemInit+0x64>)
 8009ad4:	4911      	ldr	r1, [pc, #68]	; (8009b1c <SystemInit+0x6c>)
 8009ad6:	400a      	ands	r2, r1
 8009ad8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8009ada:	4b0e      	ldr	r3, [pc, #56]	; (8009b14 <SystemInit+0x64>)
 8009adc:	689a      	ldr	r2, [r3, #8]
 8009ade:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <SystemInit+0x64>)
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	438a      	bics	r2, r1
 8009ae4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8009ae6:	4b0b      	ldr	r3, [pc, #44]	; (8009b14 <SystemInit+0x64>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	4b0a      	ldr	r3, [pc, #40]	; (8009b14 <SystemInit+0x64>)
 8009aec:	490c      	ldr	r1, [pc, #48]	; (8009b20 <SystemInit+0x70>)
 8009aee:	400a      	ands	r2, r1
 8009af0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8009af2:	4b08      	ldr	r3, [pc, #32]	; (8009b14 <SystemInit+0x64>)
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	4b07      	ldr	r3, [pc, #28]	; (8009b14 <SystemInit+0x64>)
 8009af8:	490a      	ldr	r1, [pc, #40]	; (8009b24 <SystemInit+0x74>)
 8009afa:	400a      	ands	r2, r1
 8009afc:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8009afe:	4b05      	ldr	r3, [pc, #20]	; (8009b14 <SystemInit+0x64>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009b04:	4b08      	ldr	r3, [pc, #32]	; (8009b28 <SystemInit+0x78>)
 8009b06:	2280      	movs	r2, #128	; 0x80
 8009b08:	0512      	lsls	r2, r2, #20
 8009b0a:	609a      	str	r2, [r3, #8]
#endif
}
 8009b0c:	46c0      	nop			; (mov r8, r8)
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	46c0      	nop			; (mov r8, r8)
 8009b14:	40021000 	.word	0x40021000
 8009b18:	88ff400c 	.word	0x88ff400c
 8009b1c:	fef6fff6 	.word	0xfef6fff6
 8009b20:	fffbffff 	.word	0xfffbffff
 8009b24:	ff02ffff 	.word	0xff02ffff
 8009b28:	e000ed00 	.word	0xe000ed00

08009b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009b2c:	480d      	ldr	r0, [pc, #52]	; (8009b64 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009b2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8009b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009b32:	e003      	b.n	8009b3c <LoopCopyDataInit>

08009b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009b34:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8009b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009b3a:	3104      	adds	r1, #4

08009b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8009b3c:	480b      	ldr	r0, [pc, #44]	; (8009b6c <LoopForever+0xa>)
  ldr  r3, =_edata
 8009b3e:	4b0c      	ldr	r3, [pc, #48]	; (8009b70 <LoopForever+0xe>)
  adds  r2, r0, r1
 8009b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009b44:	d3f6      	bcc.n	8009b34 <CopyDataInit>
  ldr  r2, =_sbss
 8009b46:	4a0b      	ldr	r2, [pc, #44]	; (8009b74 <LoopForever+0x12>)
  b  LoopFillZerobss
 8009b48:	e002      	b.n	8009b50 <LoopFillZerobss>

08009b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8009b4a:	2300      	movs	r3, #0
  str  r3, [r2]
 8009b4c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009b4e:	3204      	adds	r2, #4

08009b50 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8009b50:	4b09      	ldr	r3, [pc, #36]	; (8009b78 <LoopForever+0x16>)
  cmp  r2, r3
 8009b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009b54:	d3f9      	bcc.n	8009b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8009b56:	f7ff ffab 	bl	8009ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009b5a:	f000 f817 	bl	8009b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009b5e:	f7fe ff4b 	bl	80089f8 <main>

08009b62 <LoopForever>:

LoopForever:
    b LoopForever
 8009b62:	e7fe      	b.n	8009b62 <LoopForever>
   ldr   r0, =_estack
 8009b64:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8009b68:	0800de18 	.word	0x0800de18
  ldr  r0, =_sdata
 8009b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009b70:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 8009b74:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 8009b78:	20000fdc 	.word	0x20000fdc

08009b7c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009b7c:	e7fe      	b.n	8009b7c <ADC1_COMP_IRQHandler>
	...

08009b80 <__errno>:
 8009b80:	4b01      	ldr	r3, [pc, #4]	; (8009b88 <__errno+0x8>)
 8009b82:	6818      	ldr	r0, [r3, #0]
 8009b84:	4770      	bx	lr
 8009b86:	46c0      	nop			; (mov r8, r8)
 8009b88:	2000003c 	.word	0x2000003c

08009b8c <__libc_init_array>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	2600      	movs	r6, #0
 8009b90:	4d0c      	ldr	r5, [pc, #48]	; (8009bc4 <__libc_init_array+0x38>)
 8009b92:	4c0d      	ldr	r4, [pc, #52]	; (8009bc8 <__libc_init_array+0x3c>)
 8009b94:	1b64      	subs	r4, r4, r5
 8009b96:	10a4      	asrs	r4, r4, #2
 8009b98:	42a6      	cmp	r6, r4
 8009b9a:	d109      	bne.n	8009bb0 <__libc_init_array+0x24>
 8009b9c:	2600      	movs	r6, #0
 8009b9e:	f003 f9b9 	bl	800cf14 <_init>
 8009ba2:	4d0a      	ldr	r5, [pc, #40]	; (8009bcc <__libc_init_array+0x40>)
 8009ba4:	4c0a      	ldr	r4, [pc, #40]	; (8009bd0 <__libc_init_array+0x44>)
 8009ba6:	1b64      	subs	r4, r4, r5
 8009ba8:	10a4      	asrs	r4, r4, #2
 8009baa:	42a6      	cmp	r6, r4
 8009bac:	d105      	bne.n	8009bba <__libc_init_array+0x2e>
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	00b3      	lsls	r3, r6, #2
 8009bb2:	58eb      	ldr	r3, [r5, r3]
 8009bb4:	4798      	blx	r3
 8009bb6:	3601      	adds	r6, #1
 8009bb8:	e7ee      	b.n	8009b98 <__libc_init_array+0xc>
 8009bba:	00b3      	lsls	r3, r6, #2
 8009bbc:	58eb      	ldr	r3, [r5, r3]
 8009bbe:	4798      	blx	r3
 8009bc0:	3601      	adds	r6, #1
 8009bc2:	e7f2      	b.n	8009baa <__libc_init_array+0x1e>
 8009bc4:	0800de10 	.word	0x0800de10
 8009bc8:	0800de10 	.word	0x0800de10
 8009bcc:	0800de10 	.word	0x0800de10
 8009bd0:	0800de14 	.word	0x0800de14

08009bd4 <memcpy>:
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d100      	bne.n	8009bde <memcpy+0xa>
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	5ccc      	ldrb	r4, [r1, r3]
 8009be0:	54c4      	strb	r4, [r0, r3]
 8009be2:	3301      	adds	r3, #1
 8009be4:	e7f8      	b.n	8009bd8 <memcpy+0x4>

08009be6 <memset>:
 8009be6:	0003      	movs	r3, r0
 8009be8:	1882      	adds	r2, r0, r2
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d100      	bne.n	8009bf0 <memset+0xa>
 8009bee:	4770      	bx	lr
 8009bf0:	7019      	strb	r1, [r3, #0]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	e7f9      	b.n	8009bea <memset+0x4>

08009bf6 <__cvt>:
 8009bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bf8:	001e      	movs	r6, r3
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	0014      	movs	r4, r2
 8009bfe:	b08b      	sub	sp, #44	; 0x2c
 8009c00:	429e      	cmp	r6, r3
 8009c02:	da04      	bge.n	8009c0e <__cvt+0x18>
 8009c04:	2180      	movs	r1, #128	; 0x80
 8009c06:	0609      	lsls	r1, r1, #24
 8009c08:	1873      	adds	r3, r6, r1
 8009c0a:	001e      	movs	r6, r3
 8009c0c:	232d      	movs	r3, #45	; 0x2d
 8009c0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c10:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009c12:	7013      	strb	r3, [r2, #0]
 8009c14:	2320      	movs	r3, #32
 8009c16:	2203      	movs	r2, #3
 8009c18:	439f      	bics	r7, r3
 8009c1a:	2f46      	cmp	r7, #70	; 0x46
 8009c1c:	d007      	beq.n	8009c2e <__cvt+0x38>
 8009c1e:	003b      	movs	r3, r7
 8009c20:	3b45      	subs	r3, #69	; 0x45
 8009c22:	4259      	negs	r1, r3
 8009c24:	414b      	adcs	r3, r1
 8009c26:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009c28:	3a01      	subs	r2, #1
 8009c2a:	18cb      	adds	r3, r1, r3
 8009c2c:	9310      	str	r3, [sp, #64]	; 0x40
 8009c2e:	ab09      	add	r3, sp, #36	; 0x24
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	ab08      	add	r3, sp, #32
 8009c34:	9303      	str	r3, [sp, #12]
 8009c36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c38:	9200      	str	r2, [sp, #0]
 8009c3a:	9302      	str	r3, [sp, #8]
 8009c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c3e:	0022      	movs	r2, r4
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	0033      	movs	r3, r6
 8009c44:	f000 fd14 	bl	800a670 <_dtoa_r>
 8009c48:	0005      	movs	r5, r0
 8009c4a:	2f47      	cmp	r7, #71	; 0x47
 8009c4c:	d102      	bne.n	8009c54 <__cvt+0x5e>
 8009c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c50:	07db      	lsls	r3, r3, #31
 8009c52:	d528      	bpl.n	8009ca6 <__cvt+0xb0>
 8009c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c56:	18eb      	adds	r3, r5, r3
 8009c58:	9307      	str	r3, [sp, #28]
 8009c5a:	2f46      	cmp	r7, #70	; 0x46
 8009c5c:	d114      	bne.n	8009c88 <__cvt+0x92>
 8009c5e:	782b      	ldrb	r3, [r5, #0]
 8009c60:	2b30      	cmp	r3, #48	; 0x30
 8009c62:	d10c      	bne.n	8009c7e <__cvt+0x88>
 8009c64:	2200      	movs	r2, #0
 8009c66:	2300      	movs	r3, #0
 8009c68:	0020      	movs	r0, r4
 8009c6a:	0031      	movs	r1, r6
 8009c6c:	f7f6 fbee 	bl	800044c <__aeabi_dcmpeq>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d104      	bne.n	8009c7e <__cvt+0x88>
 8009c74:	2301      	movs	r3, #1
 8009c76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c78:	1a9b      	subs	r3, r3, r2
 8009c7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c7c:	6013      	str	r3, [r2, #0]
 8009c7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c80:	9a07      	ldr	r2, [sp, #28]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	18d3      	adds	r3, r2, r3
 8009c86:	9307      	str	r3, [sp, #28]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	0020      	movs	r0, r4
 8009c8e:	0031      	movs	r1, r6
 8009c90:	f7f6 fbdc 	bl	800044c <__aeabi_dcmpeq>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d001      	beq.n	8009c9c <__cvt+0xa6>
 8009c98:	9b07      	ldr	r3, [sp, #28]
 8009c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c9c:	2230      	movs	r2, #48	; 0x30
 8009c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca0:	9907      	ldr	r1, [sp, #28]
 8009ca2:	428b      	cmp	r3, r1
 8009ca4:	d306      	bcc.n	8009cb4 <__cvt+0xbe>
 8009ca6:	0028      	movs	r0, r5
 8009ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009caa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009cac:	1b5b      	subs	r3, r3, r5
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	b00b      	add	sp, #44	; 0x2c
 8009cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cb4:	1c59      	adds	r1, r3, #1
 8009cb6:	9109      	str	r1, [sp, #36]	; 0x24
 8009cb8:	701a      	strb	r2, [r3, #0]
 8009cba:	e7f0      	b.n	8009c9e <__cvt+0xa8>

08009cbc <__exponent>:
 8009cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cbe:	1c83      	adds	r3, r0, #2
 8009cc0:	b087      	sub	sp, #28
 8009cc2:	9303      	str	r3, [sp, #12]
 8009cc4:	0005      	movs	r5, r0
 8009cc6:	000c      	movs	r4, r1
 8009cc8:	232b      	movs	r3, #43	; 0x2b
 8009cca:	7002      	strb	r2, [r0, #0]
 8009ccc:	2900      	cmp	r1, #0
 8009cce:	da01      	bge.n	8009cd4 <__exponent+0x18>
 8009cd0:	424c      	negs	r4, r1
 8009cd2:	3302      	adds	r3, #2
 8009cd4:	706b      	strb	r3, [r5, #1]
 8009cd6:	2c09      	cmp	r4, #9
 8009cd8:	dd31      	ble.n	8009d3e <__exponent+0x82>
 8009cda:	270a      	movs	r7, #10
 8009cdc:	ab04      	add	r3, sp, #16
 8009cde:	1dde      	adds	r6, r3, #7
 8009ce0:	0020      	movs	r0, r4
 8009ce2:	0039      	movs	r1, r7
 8009ce4:	9601      	str	r6, [sp, #4]
 8009ce6:	f7f6 fb9b 	bl	8000420 <__aeabi_idivmod>
 8009cea:	3e01      	subs	r6, #1
 8009cec:	3130      	adds	r1, #48	; 0x30
 8009cee:	0020      	movs	r0, r4
 8009cf0:	7031      	strb	r1, [r6, #0]
 8009cf2:	0039      	movs	r1, r7
 8009cf4:	9402      	str	r4, [sp, #8]
 8009cf6:	f7f6 faad 	bl	8000254 <__divsi3>
 8009cfa:	9b02      	ldr	r3, [sp, #8]
 8009cfc:	0004      	movs	r4, r0
 8009cfe:	2b63      	cmp	r3, #99	; 0x63
 8009d00:	dcee      	bgt.n	8009ce0 <__exponent+0x24>
 8009d02:	9b01      	ldr	r3, [sp, #4]
 8009d04:	3430      	adds	r4, #48	; 0x30
 8009d06:	1e9a      	subs	r2, r3, #2
 8009d08:	0013      	movs	r3, r2
 8009d0a:	9903      	ldr	r1, [sp, #12]
 8009d0c:	7014      	strb	r4, [r2, #0]
 8009d0e:	a804      	add	r0, sp, #16
 8009d10:	3007      	adds	r0, #7
 8009d12:	4298      	cmp	r0, r3
 8009d14:	d80e      	bhi.n	8009d34 <__exponent+0x78>
 8009d16:	ab04      	add	r3, sp, #16
 8009d18:	3307      	adds	r3, #7
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d804      	bhi.n	8009d2a <__exponent+0x6e>
 8009d20:	ab04      	add	r3, sp, #16
 8009d22:	3009      	adds	r0, #9
 8009d24:	18c0      	adds	r0, r0, r3
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	1ac0      	subs	r0, r0, r3
 8009d2a:	9b03      	ldr	r3, [sp, #12]
 8009d2c:	1818      	adds	r0, r3, r0
 8009d2e:	1b40      	subs	r0, r0, r5
 8009d30:	b007      	add	sp, #28
 8009d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d34:	7818      	ldrb	r0, [r3, #0]
 8009d36:	3301      	adds	r3, #1
 8009d38:	7008      	strb	r0, [r1, #0]
 8009d3a:	3101      	adds	r1, #1
 8009d3c:	e7e7      	b.n	8009d0e <__exponent+0x52>
 8009d3e:	2330      	movs	r3, #48	; 0x30
 8009d40:	18e4      	adds	r4, r4, r3
 8009d42:	70ab      	strb	r3, [r5, #2]
 8009d44:	1d28      	adds	r0, r5, #4
 8009d46:	70ec      	strb	r4, [r5, #3]
 8009d48:	e7f1      	b.n	8009d2e <__exponent+0x72>
	...

08009d4c <_printf_float>:
 8009d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d4e:	b095      	sub	sp, #84	; 0x54
 8009d50:	000c      	movs	r4, r1
 8009d52:	9208      	str	r2, [sp, #32]
 8009d54:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009d56:	9309      	str	r3, [sp, #36]	; 0x24
 8009d58:	0007      	movs	r7, r0
 8009d5a:	f001 faa7 	bl	800b2ac <_localeconv_r>
 8009d5e:	6803      	ldr	r3, [r0, #0]
 8009d60:	0018      	movs	r0, r3
 8009d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d64:	f7f6 f9d0 	bl	8000108 <strlen>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	9312      	str	r3, [sp, #72]	; 0x48
 8009d6c:	7e23      	ldrb	r3, [r4, #24]
 8009d6e:	2207      	movs	r2, #7
 8009d70:	001e      	movs	r6, r3
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	900d      	str	r0, [sp, #52]	; 0x34
 8009d76:	930c      	str	r3, [sp, #48]	; 0x30
 8009d78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d7a:	682b      	ldr	r3, [r5, #0]
 8009d7c:	05c9      	lsls	r1, r1, #23
 8009d7e:	d547      	bpl.n	8009e10 <_printf_float+0xc4>
 8009d80:	189b      	adds	r3, r3, r2
 8009d82:	4393      	bics	r3, r2
 8009d84:	001a      	movs	r2, r3
 8009d86:	3208      	adds	r2, #8
 8009d88:	602a      	str	r2, [r5, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	64a2      	str	r2, [r4, #72]	; 0x48
 8009d90:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009d92:	2201      	movs	r2, #1
 8009d94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009d96:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009d98:	930a      	str	r3, [sp, #40]	; 0x28
 8009d9a:	006b      	lsls	r3, r5, #1
 8009d9c:	085b      	lsrs	r3, r3, #1
 8009d9e:	930e      	str	r3, [sp, #56]	; 0x38
 8009da0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009da2:	4ba8      	ldr	r3, [pc, #672]	; (800a044 <_printf_float+0x2f8>)
 8009da4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009da6:	4252      	negs	r2, r2
 8009da8:	f7f8 fc44 	bl	8002634 <__aeabi_dcmpun>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d131      	bne.n	8009e14 <_printf_float+0xc8>
 8009db0:	2201      	movs	r2, #1
 8009db2:	4ba4      	ldr	r3, [pc, #656]	; (800a044 <_printf_float+0x2f8>)
 8009db4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009db6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009db8:	4252      	negs	r2, r2
 8009dba:	f7f6 fb57 	bl	800046c <__aeabi_dcmple>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d128      	bne.n	8009e14 <_printf_float+0xc8>
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	0029      	movs	r1, r5
 8009dc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009dca:	f7f6 fb45 	bl	8000458 <__aeabi_dcmplt>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d003      	beq.n	8009dda <_printf_float+0x8e>
 8009dd2:	0023      	movs	r3, r4
 8009dd4:	222d      	movs	r2, #45	; 0x2d
 8009dd6:	3343      	adds	r3, #67	; 0x43
 8009dd8:	701a      	strb	r2, [r3, #0]
 8009dda:	4d9b      	ldr	r5, [pc, #620]	; (800a048 <_printf_float+0x2fc>)
 8009ddc:	2e47      	cmp	r6, #71	; 0x47
 8009dde:	d900      	bls.n	8009de2 <_printf_float+0x96>
 8009de0:	4d9a      	ldr	r5, [pc, #616]	; (800a04c <_printf_float+0x300>)
 8009de2:	2303      	movs	r3, #3
 8009de4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009de6:	6123      	str	r3, [r4, #16]
 8009de8:	3301      	adds	r3, #1
 8009dea:	439a      	bics	r2, r3
 8009dec:	2300      	movs	r3, #0
 8009dee:	6022      	str	r2, [r4, #0]
 8009df0:	930a      	str	r3, [sp, #40]	; 0x28
 8009df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df4:	0021      	movs	r1, r4
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	0038      	movs	r0, r7
 8009dfa:	9b08      	ldr	r3, [sp, #32]
 8009dfc:	aa13      	add	r2, sp, #76	; 0x4c
 8009dfe:	f000 f9f3 	bl	800a1e8 <_printf_common>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	d000      	beq.n	8009e08 <_printf_float+0xbc>
 8009e06:	e09e      	b.n	8009f46 <_printf_float+0x1fa>
 8009e08:	2001      	movs	r0, #1
 8009e0a:	4240      	negs	r0, r0
 8009e0c:	b015      	add	sp, #84	; 0x54
 8009e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e10:	3307      	adds	r3, #7
 8009e12:	e7b6      	b.n	8009d82 <_printf_float+0x36>
 8009e14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e16:	002b      	movs	r3, r5
 8009e18:	0010      	movs	r0, r2
 8009e1a:	0029      	movs	r1, r5
 8009e1c:	f7f8 fc0a 	bl	8002634 <__aeabi_dcmpun>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d00a      	beq.n	8009e3a <_printf_float+0xee>
 8009e24:	2d00      	cmp	r5, #0
 8009e26:	da03      	bge.n	8009e30 <_printf_float+0xe4>
 8009e28:	0023      	movs	r3, r4
 8009e2a:	222d      	movs	r2, #45	; 0x2d
 8009e2c:	3343      	adds	r3, #67	; 0x43
 8009e2e:	701a      	strb	r2, [r3, #0]
 8009e30:	4d87      	ldr	r5, [pc, #540]	; (800a050 <_printf_float+0x304>)
 8009e32:	2e47      	cmp	r6, #71	; 0x47
 8009e34:	d9d5      	bls.n	8009de2 <_printf_float+0x96>
 8009e36:	4d87      	ldr	r5, [pc, #540]	; (800a054 <_printf_float+0x308>)
 8009e38:	e7d3      	b.n	8009de2 <_printf_float+0x96>
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	0031      	movs	r1, r6
 8009e3e:	6863      	ldr	r3, [r4, #4]
 8009e40:	4391      	bics	r1, r2
 8009e42:	910e      	str	r1, [sp, #56]	; 0x38
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	d147      	bne.n	8009ed8 <_printf_float+0x18c>
 8009e48:	3307      	adds	r3, #7
 8009e4a:	6063      	str	r3, [r4, #4]
 8009e4c:	2380      	movs	r3, #128	; 0x80
 8009e4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	4313      	orrs	r3, r2
 8009e54:	2200      	movs	r2, #0
 8009e56:	9206      	str	r2, [sp, #24]
 8009e58:	aa12      	add	r2, sp, #72	; 0x48
 8009e5a:	9205      	str	r2, [sp, #20]
 8009e5c:	aa11      	add	r2, sp, #68	; 0x44
 8009e5e:	9203      	str	r2, [sp, #12]
 8009e60:	2223      	movs	r2, #35	; 0x23
 8009e62:	a908      	add	r1, sp, #32
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	9301      	str	r3, [sp, #4]
 8009e68:	6863      	ldr	r3, [r4, #4]
 8009e6a:	1852      	adds	r2, r2, r1
 8009e6c:	9202      	str	r2, [sp, #8]
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	0038      	movs	r0, r7
 8009e72:	002b      	movs	r3, r5
 8009e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e76:	9604      	str	r6, [sp, #16]
 8009e78:	f7ff febd 	bl	8009bf6 <__cvt>
 8009e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e7e:	0005      	movs	r5, r0
 8009e80:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009e82:	2b47      	cmp	r3, #71	; 0x47
 8009e84:	d108      	bne.n	8009e98 <_printf_float+0x14c>
 8009e86:	1ccb      	adds	r3, r1, #3
 8009e88:	db02      	blt.n	8009e90 <_printf_float+0x144>
 8009e8a:	6863      	ldr	r3, [r4, #4]
 8009e8c:	4299      	cmp	r1, r3
 8009e8e:	dd46      	ble.n	8009f1e <_printf_float+0x1d2>
 8009e90:	0033      	movs	r3, r6
 8009e92:	3b02      	subs	r3, #2
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	001e      	movs	r6, r3
 8009e98:	2e65      	cmp	r6, #101	; 0x65
 8009e9a:	d824      	bhi.n	8009ee6 <_printf_float+0x19a>
 8009e9c:	0020      	movs	r0, r4
 8009e9e:	0032      	movs	r2, r6
 8009ea0:	3901      	subs	r1, #1
 8009ea2:	3050      	adds	r0, #80	; 0x50
 8009ea4:	9111      	str	r1, [sp, #68]	; 0x44
 8009ea6:	f7ff ff09 	bl	8009cbc <__exponent>
 8009eaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009eac:	900a      	str	r0, [sp, #40]	; 0x28
 8009eae:	1813      	adds	r3, r2, r0
 8009eb0:	6123      	str	r3, [r4, #16]
 8009eb2:	2a01      	cmp	r2, #1
 8009eb4:	dc02      	bgt.n	8009ebc <_printf_float+0x170>
 8009eb6:	6822      	ldr	r2, [r4, #0]
 8009eb8:	07d2      	lsls	r2, r2, #31
 8009eba:	d501      	bpl.n	8009ec0 <_printf_float+0x174>
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	6123      	str	r3, [r4, #16]
 8009ec0:	2323      	movs	r3, #35	; 0x23
 8009ec2:	aa08      	add	r2, sp, #32
 8009ec4:	189b      	adds	r3, r3, r2
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d100      	bne.n	8009ece <_printf_float+0x182>
 8009ecc:	e791      	b.n	8009df2 <_printf_float+0xa6>
 8009ece:	0023      	movs	r3, r4
 8009ed0:	222d      	movs	r2, #45	; 0x2d
 8009ed2:	3343      	adds	r3, #67	; 0x43
 8009ed4:	701a      	strb	r2, [r3, #0]
 8009ed6:	e78c      	b.n	8009df2 <_printf_float+0xa6>
 8009ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009eda:	2a47      	cmp	r2, #71	; 0x47
 8009edc:	d1b6      	bne.n	8009e4c <_printf_float+0x100>
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1b4      	bne.n	8009e4c <_printf_float+0x100>
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	e7b1      	b.n	8009e4a <_printf_float+0xfe>
 8009ee6:	2e66      	cmp	r6, #102	; 0x66
 8009ee8:	d11b      	bne.n	8009f22 <_printf_float+0x1d6>
 8009eea:	6863      	ldr	r3, [r4, #4]
 8009eec:	2900      	cmp	r1, #0
 8009eee:	dd0d      	ble.n	8009f0c <_printf_float+0x1c0>
 8009ef0:	6121      	str	r1, [r4, #16]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d102      	bne.n	8009efc <_printf_float+0x1b0>
 8009ef6:	6822      	ldr	r2, [r4, #0]
 8009ef8:	07d2      	lsls	r2, r2, #31
 8009efa:	d502      	bpl.n	8009f02 <_printf_float+0x1b6>
 8009efc:	3301      	adds	r3, #1
 8009efe:	1859      	adds	r1, r3, r1
 8009f00:	6121      	str	r1, [r4, #16]
 8009f02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f04:	65a3      	str	r3, [r4, #88]	; 0x58
 8009f06:	2300      	movs	r3, #0
 8009f08:	930a      	str	r3, [sp, #40]	; 0x28
 8009f0a:	e7d9      	b.n	8009ec0 <_printf_float+0x174>
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d103      	bne.n	8009f18 <_printf_float+0x1cc>
 8009f10:	2201      	movs	r2, #1
 8009f12:	6821      	ldr	r1, [r4, #0]
 8009f14:	4211      	tst	r1, r2
 8009f16:	d000      	beq.n	8009f1a <_printf_float+0x1ce>
 8009f18:	1c9a      	adds	r2, r3, #2
 8009f1a:	6122      	str	r2, [r4, #16]
 8009f1c:	e7f1      	b.n	8009f02 <_printf_float+0x1b6>
 8009f1e:	2367      	movs	r3, #103	; 0x67
 8009f20:	001e      	movs	r6, r3
 8009f22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f26:	4293      	cmp	r3, r2
 8009f28:	db06      	blt.n	8009f38 <_printf_float+0x1ec>
 8009f2a:	6822      	ldr	r2, [r4, #0]
 8009f2c:	6123      	str	r3, [r4, #16]
 8009f2e:	07d2      	lsls	r2, r2, #31
 8009f30:	d5e7      	bpl.n	8009f02 <_printf_float+0x1b6>
 8009f32:	3301      	adds	r3, #1
 8009f34:	6123      	str	r3, [r4, #16]
 8009f36:	e7e4      	b.n	8009f02 <_printf_float+0x1b6>
 8009f38:	2101      	movs	r1, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	dc01      	bgt.n	8009f42 <_printf_float+0x1f6>
 8009f3e:	1849      	adds	r1, r1, r1
 8009f40:	1ac9      	subs	r1, r1, r3
 8009f42:	1852      	adds	r2, r2, r1
 8009f44:	e7e9      	b.n	8009f1a <_printf_float+0x1ce>
 8009f46:	6822      	ldr	r2, [r4, #0]
 8009f48:	0553      	lsls	r3, r2, #21
 8009f4a:	d408      	bmi.n	8009f5e <_printf_float+0x212>
 8009f4c:	6923      	ldr	r3, [r4, #16]
 8009f4e:	002a      	movs	r2, r5
 8009f50:	0038      	movs	r0, r7
 8009f52:	9908      	ldr	r1, [sp, #32]
 8009f54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f56:	47a8      	blx	r5
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d129      	bne.n	8009fb0 <_printf_float+0x264>
 8009f5c:	e754      	b.n	8009e08 <_printf_float+0xbc>
 8009f5e:	2e65      	cmp	r6, #101	; 0x65
 8009f60:	d800      	bhi.n	8009f64 <_printf_float+0x218>
 8009f62:	e0ec      	b.n	800a13e <_printf_float+0x3f2>
 8009f64:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009f66:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f7f6 fa6e 	bl	800044c <__aeabi_dcmpeq>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d034      	beq.n	8009fde <_printf_float+0x292>
 8009f74:	2301      	movs	r3, #1
 8009f76:	0038      	movs	r0, r7
 8009f78:	4a37      	ldr	r2, [pc, #220]	; (800a058 <_printf_float+0x30c>)
 8009f7a:	9908      	ldr	r1, [sp, #32]
 8009f7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f7e:	47a8      	blx	r5
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d100      	bne.n	8009f86 <_printf_float+0x23a>
 8009f84:	e740      	b.n	8009e08 <_printf_float+0xbc>
 8009f86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	db02      	blt.n	8009f94 <_printf_float+0x248>
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	07db      	lsls	r3, r3, #31
 8009f92:	d50d      	bpl.n	8009fb0 <_printf_float+0x264>
 8009f94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f96:	0038      	movs	r0, r7
 8009f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f9c:	9908      	ldr	r1, [sp, #32]
 8009f9e:	47a8      	blx	r5
 8009fa0:	2500      	movs	r5, #0
 8009fa2:	1c43      	adds	r3, r0, #1
 8009fa4:	d100      	bne.n	8009fa8 <_printf_float+0x25c>
 8009fa6:	e72f      	b.n	8009e08 <_printf_float+0xbc>
 8009fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009faa:	3b01      	subs	r3, #1
 8009fac:	42ab      	cmp	r3, r5
 8009fae:	dc0a      	bgt.n	8009fc6 <_printf_float+0x27a>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	079b      	lsls	r3, r3, #30
 8009fb4:	d500      	bpl.n	8009fb8 <_printf_float+0x26c>
 8009fb6:	e114      	b.n	800a1e2 <_printf_float+0x496>
 8009fb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009fba:	68e0      	ldr	r0, [r4, #12]
 8009fbc:	4298      	cmp	r0, r3
 8009fbe:	db00      	blt.n	8009fc2 <_printf_float+0x276>
 8009fc0:	e724      	b.n	8009e0c <_printf_float+0xc0>
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	e722      	b.n	8009e0c <_printf_float+0xc0>
 8009fc6:	0022      	movs	r2, r4
 8009fc8:	2301      	movs	r3, #1
 8009fca:	0038      	movs	r0, r7
 8009fcc:	9908      	ldr	r1, [sp, #32]
 8009fce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009fd0:	321a      	adds	r2, #26
 8009fd2:	47b0      	blx	r6
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d100      	bne.n	8009fda <_printf_float+0x28e>
 8009fd8:	e716      	b.n	8009e08 <_printf_float+0xbc>
 8009fda:	3501      	adds	r5, #1
 8009fdc:	e7e4      	b.n	8009fa8 <_printf_float+0x25c>
 8009fde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	dc3b      	bgt.n	800a05c <_printf_float+0x310>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	0038      	movs	r0, r7
 8009fe8:	4a1b      	ldr	r2, [pc, #108]	; (800a058 <_printf_float+0x30c>)
 8009fea:	9908      	ldr	r1, [sp, #32]
 8009fec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009fee:	47b0      	blx	r6
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d100      	bne.n	8009ff6 <_printf_float+0x2aa>
 8009ff4:	e708      	b.n	8009e08 <_printf_float+0xbc>
 8009ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ff8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	d102      	bne.n	800a004 <_printf_float+0x2b8>
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	07db      	lsls	r3, r3, #31
 800a002:	d5d5      	bpl.n	8009fb0 <_printf_float+0x264>
 800a004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a006:	0038      	movs	r0, r7
 800a008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a00a:	9908      	ldr	r1, [sp, #32]
 800a00c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a00e:	47b0      	blx	r6
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d100      	bne.n	800a016 <_printf_float+0x2ca>
 800a014:	e6f8      	b.n	8009e08 <_printf_float+0xbc>
 800a016:	2300      	movs	r3, #0
 800a018:	930a      	str	r3, [sp, #40]	; 0x28
 800a01a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a01c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a01e:	425b      	negs	r3, r3
 800a020:	4293      	cmp	r3, r2
 800a022:	dc01      	bgt.n	800a028 <_printf_float+0x2dc>
 800a024:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a026:	e792      	b.n	8009f4e <_printf_float+0x202>
 800a028:	0022      	movs	r2, r4
 800a02a:	2301      	movs	r3, #1
 800a02c:	0038      	movs	r0, r7
 800a02e:	9908      	ldr	r1, [sp, #32]
 800a030:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a032:	321a      	adds	r2, #26
 800a034:	47b0      	blx	r6
 800a036:	1c43      	adds	r3, r0, #1
 800a038:	d100      	bne.n	800a03c <_printf_float+0x2f0>
 800a03a:	e6e5      	b.n	8009e08 <_printf_float+0xbc>
 800a03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a03e:	3301      	adds	r3, #1
 800a040:	e7ea      	b.n	800a018 <_printf_float+0x2cc>
 800a042:	46c0      	nop			; (mov r8, r8)
 800a044:	7fefffff 	.word	0x7fefffff
 800a048:	0800d9b8 	.word	0x0800d9b8
 800a04c:	0800d9bc 	.word	0x0800d9bc
 800a050:	0800d9c0 	.word	0x0800d9c0
 800a054:	0800d9c4 	.word	0x0800d9c4
 800a058:	0800d9c8 	.word	0x0800d9c8
 800a05c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a05e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a060:	920a      	str	r2, [sp, #40]	; 0x28
 800a062:	429a      	cmp	r2, r3
 800a064:	dd00      	ble.n	800a068 <_printf_float+0x31c>
 800a066:	930a      	str	r3, [sp, #40]	; 0x28
 800a068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dc3d      	bgt.n	800a0ea <_printf_float+0x39e>
 800a06e:	2300      	movs	r3, #0
 800a070:	930e      	str	r3, [sp, #56]	; 0x38
 800a072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a074:	43db      	mvns	r3, r3
 800a076:	17db      	asrs	r3, r3, #31
 800a078:	930f      	str	r3, [sp, #60]	; 0x3c
 800a07a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a07c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a07e:	930c      	str	r3, [sp, #48]	; 0x30
 800a080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a082:	4013      	ands	r3, r2
 800a084:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a08a:	4293      	cmp	r3, r2
 800a08c:	dc36      	bgt.n	800a0fc <_printf_float+0x3b0>
 800a08e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a090:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a092:	4293      	cmp	r3, r2
 800a094:	db40      	blt.n	800a118 <_printf_float+0x3cc>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	07db      	lsls	r3, r3, #31
 800a09a:	d43d      	bmi.n	800a118 <_printf_float+0x3cc>
 800a09c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a09e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	1a52      	subs	r2, r2, r1
 800a0a6:	920a      	str	r2, [sp, #40]	; 0x28
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	dd00      	ble.n	800a0ae <_printf_float+0x362>
 800a0ac:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dc3a      	bgt.n	800a12a <_printf_float+0x3de>
 800a0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b6:	2500      	movs	r5, #0
 800a0b8:	43db      	mvns	r3, r3
 800a0ba:	17db      	asrs	r3, r3, #31
 800a0bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a0c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0c4:	1a9b      	subs	r3, r3, r2
 800a0c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0c8:	400a      	ands	r2, r1
 800a0ca:	1a9b      	subs	r3, r3, r2
 800a0cc:	42ab      	cmp	r3, r5
 800a0ce:	dc00      	bgt.n	800a0d2 <_printf_float+0x386>
 800a0d0:	e76e      	b.n	8009fb0 <_printf_float+0x264>
 800a0d2:	0022      	movs	r2, r4
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	0038      	movs	r0, r7
 800a0d8:	9908      	ldr	r1, [sp, #32]
 800a0da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a0dc:	321a      	adds	r2, #26
 800a0de:	47b0      	blx	r6
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d100      	bne.n	800a0e6 <_printf_float+0x39a>
 800a0e4:	e690      	b.n	8009e08 <_printf_float+0xbc>
 800a0e6:	3501      	adds	r5, #1
 800a0e8:	e7e9      	b.n	800a0be <_printf_float+0x372>
 800a0ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ec:	002a      	movs	r2, r5
 800a0ee:	0038      	movs	r0, r7
 800a0f0:	9908      	ldr	r1, [sp, #32]
 800a0f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a0f4:	47b0      	blx	r6
 800a0f6:	1c43      	adds	r3, r0, #1
 800a0f8:	d1b9      	bne.n	800a06e <_printf_float+0x322>
 800a0fa:	e685      	b.n	8009e08 <_printf_float+0xbc>
 800a0fc:	0022      	movs	r2, r4
 800a0fe:	2301      	movs	r3, #1
 800a100:	0038      	movs	r0, r7
 800a102:	9908      	ldr	r1, [sp, #32]
 800a104:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a106:	321a      	adds	r2, #26
 800a108:	47b0      	blx	r6
 800a10a:	1c43      	adds	r3, r0, #1
 800a10c:	d100      	bne.n	800a110 <_printf_float+0x3c4>
 800a10e:	e67b      	b.n	8009e08 <_printf_float+0xbc>
 800a110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a112:	3301      	adds	r3, #1
 800a114:	930e      	str	r3, [sp, #56]	; 0x38
 800a116:	e7b0      	b.n	800a07a <_printf_float+0x32e>
 800a118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a11a:	0038      	movs	r0, r7
 800a11c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a11e:	9908      	ldr	r1, [sp, #32]
 800a120:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a122:	47b0      	blx	r6
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d1b9      	bne.n	800a09c <_printf_float+0x350>
 800a128:	e66e      	b.n	8009e08 <_printf_float+0xbc>
 800a12a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a12c:	0038      	movs	r0, r7
 800a12e:	18ea      	adds	r2, r5, r3
 800a130:	9908      	ldr	r1, [sp, #32]
 800a132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a134:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a136:	47a8      	blx	r5
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d1bb      	bne.n	800a0b4 <_printf_float+0x368>
 800a13c:	e664      	b.n	8009e08 <_printf_float+0xbc>
 800a13e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a140:	2b01      	cmp	r3, #1
 800a142:	dc02      	bgt.n	800a14a <_printf_float+0x3fe>
 800a144:	2301      	movs	r3, #1
 800a146:	421a      	tst	r2, r3
 800a148:	d038      	beq.n	800a1bc <_printf_float+0x470>
 800a14a:	2301      	movs	r3, #1
 800a14c:	002a      	movs	r2, r5
 800a14e:	0038      	movs	r0, r7
 800a150:	9908      	ldr	r1, [sp, #32]
 800a152:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a154:	47b0      	blx	r6
 800a156:	1c43      	adds	r3, r0, #1
 800a158:	d100      	bne.n	800a15c <_printf_float+0x410>
 800a15a:	e655      	b.n	8009e08 <_printf_float+0xbc>
 800a15c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a15e:	0038      	movs	r0, r7
 800a160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a162:	9908      	ldr	r1, [sp, #32]
 800a164:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a166:	47b0      	blx	r6
 800a168:	1c43      	adds	r3, r0, #1
 800a16a:	d100      	bne.n	800a16e <_printf_float+0x422>
 800a16c:	e64c      	b.n	8009e08 <_printf_float+0xbc>
 800a16e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a170:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a172:	2200      	movs	r2, #0
 800a174:	2300      	movs	r3, #0
 800a176:	f7f6 f969 	bl	800044c <__aeabi_dcmpeq>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d11c      	bne.n	800a1b8 <_printf_float+0x46c>
 800a17e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a180:	1c6a      	adds	r2, r5, #1
 800a182:	3b01      	subs	r3, #1
 800a184:	0038      	movs	r0, r7
 800a186:	9908      	ldr	r1, [sp, #32]
 800a188:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a18a:	47a8      	blx	r5
 800a18c:	1c43      	adds	r3, r0, #1
 800a18e:	d10f      	bne.n	800a1b0 <_printf_float+0x464>
 800a190:	e63a      	b.n	8009e08 <_printf_float+0xbc>
 800a192:	0022      	movs	r2, r4
 800a194:	2301      	movs	r3, #1
 800a196:	0038      	movs	r0, r7
 800a198:	9908      	ldr	r1, [sp, #32]
 800a19a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a19c:	321a      	adds	r2, #26
 800a19e:	47b0      	blx	r6
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d100      	bne.n	800a1a6 <_printf_float+0x45a>
 800a1a4:	e630      	b.n	8009e08 <_printf_float+0xbc>
 800a1a6:	3501      	adds	r5, #1
 800a1a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	42ab      	cmp	r3, r5
 800a1ae:	dcf0      	bgt.n	800a192 <_printf_float+0x446>
 800a1b0:	0022      	movs	r2, r4
 800a1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b4:	3250      	adds	r2, #80	; 0x50
 800a1b6:	e6cb      	b.n	8009f50 <_printf_float+0x204>
 800a1b8:	2500      	movs	r5, #0
 800a1ba:	e7f5      	b.n	800a1a8 <_printf_float+0x45c>
 800a1bc:	002a      	movs	r2, r5
 800a1be:	e7e1      	b.n	800a184 <_printf_float+0x438>
 800a1c0:	0022      	movs	r2, r4
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	0038      	movs	r0, r7
 800a1c6:	9908      	ldr	r1, [sp, #32]
 800a1c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1ca:	3219      	adds	r2, #25
 800a1cc:	47b0      	blx	r6
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	d100      	bne.n	800a1d4 <_printf_float+0x488>
 800a1d2:	e619      	b.n	8009e08 <_printf_float+0xbc>
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	68e3      	ldr	r3, [r4, #12]
 800a1d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1da:	1a9b      	subs	r3, r3, r2
 800a1dc:	42ab      	cmp	r3, r5
 800a1de:	dcef      	bgt.n	800a1c0 <_printf_float+0x474>
 800a1e0:	e6ea      	b.n	8009fb8 <_printf_float+0x26c>
 800a1e2:	2500      	movs	r5, #0
 800a1e4:	e7f7      	b.n	800a1d6 <_printf_float+0x48a>
 800a1e6:	46c0      	nop			; (mov r8, r8)

0800a1e8 <_printf_common>:
 800a1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ea:	0015      	movs	r5, r2
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	688a      	ldr	r2, [r1, #8]
 800a1f0:	690b      	ldr	r3, [r1, #16]
 800a1f2:	000c      	movs	r4, r1
 800a1f4:	9000      	str	r0, [sp, #0]
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	da00      	bge.n	800a1fc <_printf_common+0x14>
 800a1fa:	0013      	movs	r3, r2
 800a1fc:	0022      	movs	r2, r4
 800a1fe:	602b      	str	r3, [r5, #0]
 800a200:	3243      	adds	r2, #67	; 0x43
 800a202:	7812      	ldrb	r2, [r2, #0]
 800a204:	2a00      	cmp	r2, #0
 800a206:	d001      	beq.n	800a20c <_printf_common+0x24>
 800a208:	3301      	adds	r3, #1
 800a20a:	602b      	str	r3, [r5, #0]
 800a20c:	6823      	ldr	r3, [r4, #0]
 800a20e:	069b      	lsls	r3, r3, #26
 800a210:	d502      	bpl.n	800a218 <_printf_common+0x30>
 800a212:	682b      	ldr	r3, [r5, #0]
 800a214:	3302      	adds	r3, #2
 800a216:	602b      	str	r3, [r5, #0]
 800a218:	6822      	ldr	r2, [r4, #0]
 800a21a:	2306      	movs	r3, #6
 800a21c:	0017      	movs	r7, r2
 800a21e:	401f      	ands	r7, r3
 800a220:	421a      	tst	r2, r3
 800a222:	d027      	beq.n	800a274 <_printf_common+0x8c>
 800a224:	0023      	movs	r3, r4
 800a226:	3343      	adds	r3, #67	; 0x43
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	1e5a      	subs	r2, r3, #1
 800a22c:	4193      	sbcs	r3, r2
 800a22e:	6822      	ldr	r2, [r4, #0]
 800a230:	0692      	lsls	r2, r2, #26
 800a232:	d430      	bmi.n	800a296 <_printf_common+0xae>
 800a234:	0022      	movs	r2, r4
 800a236:	9901      	ldr	r1, [sp, #4]
 800a238:	9800      	ldr	r0, [sp, #0]
 800a23a:	9e08      	ldr	r6, [sp, #32]
 800a23c:	3243      	adds	r2, #67	; 0x43
 800a23e:	47b0      	blx	r6
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	d025      	beq.n	800a290 <_printf_common+0xa8>
 800a244:	2306      	movs	r3, #6
 800a246:	6820      	ldr	r0, [r4, #0]
 800a248:	682a      	ldr	r2, [r5, #0]
 800a24a:	68e1      	ldr	r1, [r4, #12]
 800a24c:	2500      	movs	r5, #0
 800a24e:	4003      	ands	r3, r0
 800a250:	2b04      	cmp	r3, #4
 800a252:	d103      	bne.n	800a25c <_printf_common+0x74>
 800a254:	1a8d      	subs	r5, r1, r2
 800a256:	43eb      	mvns	r3, r5
 800a258:	17db      	asrs	r3, r3, #31
 800a25a:	401d      	ands	r5, r3
 800a25c:	68a3      	ldr	r3, [r4, #8]
 800a25e:	6922      	ldr	r2, [r4, #16]
 800a260:	4293      	cmp	r3, r2
 800a262:	dd01      	ble.n	800a268 <_printf_common+0x80>
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	18ed      	adds	r5, r5, r3
 800a268:	2700      	movs	r7, #0
 800a26a:	42bd      	cmp	r5, r7
 800a26c:	d120      	bne.n	800a2b0 <_printf_common+0xc8>
 800a26e:	2000      	movs	r0, #0
 800a270:	e010      	b.n	800a294 <_printf_common+0xac>
 800a272:	3701      	adds	r7, #1
 800a274:	68e3      	ldr	r3, [r4, #12]
 800a276:	682a      	ldr	r2, [r5, #0]
 800a278:	1a9b      	subs	r3, r3, r2
 800a27a:	42bb      	cmp	r3, r7
 800a27c:	ddd2      	ble.n	800a224 <_printf_common+0x3c>
 800a27e:	0022      	movs	r2, r4
 800a280:	2301      	movs	r3, #1
 800a282:	9901      	ldr	r1, [sp, #4]
 800a284:	9800      	ldr	r0, [sp, #0]
 800a286:	9e08      	ldr	r6, [sp, #32]
 800a288:	3219      	adds	r2, #25
 800a28a:	47b0      	blx	r6
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d1f0      	bne.n	800a272 <_printf_common+0x8a>
 800a290:	2001      	movs	r0, #1
 800a292:	4240      	negs	r0, r0
 800a294:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a296:	2030      	movs	r0, #48	; 0x30
 800a298:	18e1      	adds	r1, r4, r3
 800a29a:	3143      	adds	r1, #67	; 0x43
 800a29c:	7008      	strb	r0, [r1, #0]
 800a29e:	0021      	movs	r1, r4
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	3145      	adds	r1, #69	; 0x45
 800a2a4:	7809      	ldrb	r1, [r1, #0]
 800a2a6:	18a2      	adds	r2, r4, r2
 800a2a8:	3243      	adds	r2, #67	; 0x43
 800a2aa:	3302      	adds	r3, #2
 800a2ac:	7011      	strb	r1, [r2, #0]
 800a2ae:	e7c1      	b.n	800a234 <_printf_common+0x4c>
 800a2b0:	0022      	movs	r2, r4
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	9901      	ldr	r1, [sp, #4]
 800a2b6:	9800      	ldr	r0, [sp, #0]
 800a2b8:	9e08      	ldr	r6, [sp, #32]
 800a2ba:	321a      	adds	r2, #26
 800a2bc:	47b0      	blx	r6
 800a2be:	1c43      	adds	r3, r0, #1
 800a2c0:	d0e6      	beq.n	800a290 <_printf_common+0xa8>
 800a2c2:	3701      	adds	r7, #1
 800a2c4:	e7d1      	b.n	800a26a <_printf_common+0x82>
	...

0800a2c8 <_printf_i>:
 800a2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ca:	b08b      	sub	sp, #44	; 0x2c
 800a2cc:	9206      	str	r2, [sp, #24]
 800a2ce:	000a      	movs	r2, r1
 800a2d0:	3243      	adds	r2, #67	; 0x43
 800a2d2:	9307      	str	r3, [sp, #28]
 800a2d4:	9005      	str	r0, [sp, #20]
 800a2d6:	9204      	str	r2, [sp, #16]
 800a2d8:	7e0a      	ldrb	r2, [r1, #24]
 800a2da:	000c      	movs	r4, r1
 800a2dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2de:	2a78      	cmp	r2, #120	; 0x78
 800a2e0:	d806      	bhi.n	800a2f0 <_printf_i+0x28>
 800a2e2:	2a62      	cmp	r2, #98	; 0x62
 800a2e4:	d808      	bhi.n	800a2f8 <_printf_i+0x30>
 800a2e6:	2a00      	cmp	r2, #0
 800a2e8:	d100      	bne.n	800a2ec <_printf_i+0x24>
 800a2ea:	e0c0      	b.n	800a46e <_printf_i+0x1a6>
 800a2ec:	2a58      	cmp	r2, #88	; 0x58
 800a2ee:	d052      	beq.n	800a396 <_printf_i+0xce>
 800a2f0:	0026      	movs	r6, r4
 800a2f2:	3642      	adds	r6, #66	; 0x42
 800a2f4:	7032      	strb	r2, [r6, #0]
 800a2f6:	e022      	b.n	800a33e <_printf_i+0x76>
 800a2f8:	0010      	movs	r0, r2
 800a2fa:	3863      	subs	r0, #99	; 0x63
 800a2fc:	2815      	cmp	r0, #21
 800a2fe:	d8f7      	bhi.n	800a2f0 <_printf_i+0x28>
 800a300:	f7f5 ff14 	bl	800012c <__gnu_thumb1_case_shi>
 800a304:	001f0016 	.word	0x001f0016
 800a308:	fff6fff6 	.word	0xfff6fff6
 800a30c:	fff6fff6 	.word	0xfff6fff6
 800a310:	fff6001f 	.word	0xfff6001f
 800a314:	fff6fff6 	.word	0xfff6fff6
 800a318:	00a8fff6 	.word	0x00a8fff6
 800a31c:	009a0036 	.word	0x009a0036
 800a320:	fff6fff6 	.word	0xfff6fff6
 800a324:	fff600b9 	.word	0xfff600b9
 800a328:	fff60036 	.word	0xfff60036
 800a32c:	009efff6 	.word	0x009efff6
 800a330:	0026      	movs	r6, r4
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	3642      	adds	r6, #66	; 0x42
 800a336:	1d11      	adds	r1, r2, #4
 800a338:	6019      	str	r1, [r3, #0]
 800a33a:	6813      	ldr	r3, [r2, #0]
 800a33c:	7033      	strb	r3, [r6, #0]
 800a33e:	2301      	movs	r3, #1
 800a340:	e0a7      	b.n	800a492 <_printf_i+0x1ca>
 800a342:	6808      	ldr	r0, [r1, #0]
 800a344:	6819      	ldr	r1, [r3, #0]
 800a346:	1d0a      	adds	r2, r1, #4
 800a348:	0605      	lsls	r5, r0, #24
 800a34a:	d50b      	bpl.n	800a364 <_printf_i+0x9c>
 800a34c:	680d      	ldr	r5, [r1, #0]
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	2d00      	cmp	r5, #0
 800a352:	da03      	bge.n	800a35c <_printf_i+0x94>
 800a354:	232d      	movs	r3, #45	; 0x2d
 800a356:	9a04      	ldr	r2, [sp, #16]
 800a358:	426d      	negs	r5, r5
 800a35a:	7013      	strb	r3, [r2, #0]
 800a35c:	4b61      	ldr	r3, [pc, #388]	; (800a4e4 <_printf_i+0x21c>)
 800a35e:	270a      	movs	r7, #10
 800a360:	9303      	str	r3, [sp, #12]
 800a362:	e032      	b.n	800a3ca <_printf_i+0x102>
 800a364:	680d      	ldr	r5, [r1, #0]
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	0641      	lsls	r1, r0, #25
 800a36a:	d5f1      	bpl.n	800a350 <_printf_i+0x88>
 800a36c:	b22d      	sxth	r5, r5
 800a36e:	e7ef      	b.n	800a350 <_printf_i+0x88>
 800a370:	680d      	ldr	r5, [r1, #0]
 800a372:	6819      	ldr	r1, [r3, #0]
 800a374:	1d08      	adds	r0, r1, #4
 800a376:	6018      	str	r0, [r3, #0]
 800a378:	062e      	lsls	r6, r5, #24
 800a37a:	d501      	bpl.n	800a380 <_printf_i+0xb8>
 800a37c:	680d      	ldr	r5, [r1, #0]
 800a37e:	e003      	b.n	800a388 <_printf_i+0xc0>
 800a380:	066d      	lsls	r5, r5, #25
 800a382:	d5fb      	bpl.n	800a37c <_printf_i+0xb4>
 800a384:	680d      	ldr	r5, [r1, #0]
 800a386:	b2ad      	uxth	r5, r5
 800a388:	4b56      	ldr	r3, [pc, #344]	; (800a4e4 <_printf_i+0x21c>)
 800a38a:	270a      	movs	r7, #10
 800a38c:	9303      	str	r3, [sp, #12]
 800a38e:	2a6f      	cmp	r2, #111	; 0x6f
 800a390:	d117      	bne.n	800a3c2 <_printf_i+0xfa>
 800a392:	2708      	movs	r7, #8
 800a394:	e015      	b.n	800a3c2 <_printf_i+0xfa>
 800a396:	3145      	adds	r1, #69	; 0x45
 800a398:	700a      	strb	r2, [r1, #0]
 800a39a:	4a52      	ldr	r2, [pc, #328]	; (800a4e4 <_printf_i+0x21c>)
 800a39c:	9203      	str	r2, [sp, #12]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	6821      	ldr	r1, [r4, #0]
 800a3a2:	ca20      	ldmia	r2!, {r5}
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	0608      	lsls	r0, r1, #24
 800a3a8:	d550      	bpl.n	800a44c <_printf_i+0x184>
 800a3aa:	07cb      	lsls	r3, r1, #31
 800a3ac:	d502      	bpl.n	800a3b4 <_printf_i+0xec>
 800a3ae:	2320      	movs	r3, #32
 800a3b0:	4319      	orrs	r1, r3
 800a3b2:	6021      	str	r1, [r4, #0]
 800a3b4:	2710      	movs	r7, #16
 800a3b6:	2d00      	cmp	r5, #0
 800a3b8:	d103      	bne.n	800a3c2 <_printf_i+0xfa>
 800a3ba:	2320      	movs	r3, #32
 800a3bc:	6822      	ldr	r2, [r4, #0]
 800a3be:	439a      	bics	r2, r3
 800a3c0:	6022      	str	r2, [r4, #0]
 800a3c2:	0023      	movs	r3, r4
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	3343      	adds	r3, #67	; 0x43
 800a3c8:	701a      	strb	r2, [r3, #0]
 800a3ca:	6863      	ldr	r3, [r4, #4]
 800a3cc:	60a3      	str	r3, [r4, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	db03      	blt.n	800a3da <_printf_i+0x112>
 800a3d2:	2204      	movs	r2, #4
 800a3d4:	6821      	ldr	r1, [r4, #0]
 800a3d6:	4391      	bics	r1, r2
 800a3d8:	6021      	str	r1, [r4, #0]
 800a3da:	2d00      	cmp	r5, #0
 800a3dc:	d102      	bne.n	800a3e4 <_printf_i+0x11c>
 800a3de:	9e04      	ldr	r6, [sp, #16]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00c      	beq.n	800a3fe <_printf_i+0x136>
 800a3e4:	9e04      	ldr	r6, [sp, #16]
 800a3e6:	0028      	movs	r0, r5
 800a3e8:	0039      	movs	r1, r7
 800a3ea:	f7f5 ff2f 	bl	800024c <__aeabi_uidivmod>
 800a3ee:	9b03      	ldr	r3, [sp, #12]
 800a3f0:	3e01      	subs	r6, #1
 800a3f2:	5c5b      	ldrb	r3, [r3, r1]
 800a3f4:	7033      	strb	r3, [r6, #0]
 800a3f6:	002b      	movs	r3, r5
 800a3f8:	0005      	movs	r5, r0
 800a3fa:	429f      	cmp	r7, r3
 800a3fc:	d9f3      	bls.n	800a3e6 <_printf_i+0x11e>
 800a3fe:	2f08      	cmp	r7, #8
 800a400:	d109      	bne.n	800a416 <_printf_i+0x14e>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	07db      	lsls	r3, r3, #31
 800a406:	d506      	bpl.n	800a416 <_printf_i+0x14e>
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	6922      	ldr	r2, [r4, #16]
 800a40c:	4293      	cmp	r3, r2
 800a40e:	dc02      	bgt.n	800a416 <_printf_i+0x14e>
 800a410:	2330      	movs	r3, #48	; 0x30
 800a412:	3e01      	subs	r6, #1
 800a414:	7033      	strb	r3, [r6, #0]
 800a416:	9b04      	ldr	r3, [sp, #16]
 800a418:	1b9b      	subs	r3, r3, r6
 800a41a:	6123      	str	r3, [r4, #16]
 800a41c:	9b07      	ldr	r3, [sp, #28]
 800a41e:	0021      	movs	r1, r4
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	9805      	ldr	r0, [sp, #20]
 800a424:	9b06      	ldr	r3, [sp, #24]
 800a426:	aa09      	add	r2, sp, #36	; 0x24
 800a428:	f7ff fede 	bl	800a1e8 <_printf_common>
 800a42c:	1c43      	adds	r3, r0, #1
 800a42e:	d135      	bne.n	800a49c <_printf_i+0x1d4>
 800a430:	2001      	movs	r0, #1
 800a432:	4240      	negs	r0, r0
 800a434:	b00b      	add	sp, #44	; 0x2c
 800a436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a438:	2220      	movs	r2, #32
 800a43a:	6809      	ldr	r1, [r1, #0]
 800a43c:	430a      	orrs	r2, r1
 800a43e:	6022      	str	r2, [r4, #0]
 800a440:	0022      	movs	r2, r4
 800a442:	2178      	movs	r1, #120	; 0x78
 800a444:	3245      	adds	r2, #69	; 0x45
 800a446:	7011      	strb	r1, [r2, #0]
 800a448:	4a27      	ldr	r2, [pc, #156]	; (800a4e8 <_printf_i+0x220>)
 800a44a:	e7a7      	b.n	800a39c <_printf_i+0xd4>
 800a44c:	0648      	lsls	r0, r1, #25
 800a44e:	d5ac      	bpl.n	800a3aa <_printf_i+0xe2>
 800a450:	b2ad      	uxth	r5, r5
 800a452:	e7aa      	b.n	800a3aa <_printf_i+0xe2>
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	680d      	ldr	r5, [r1, #0]
 800a458:	1d10      	adds	r0, r2, #4
 800a45a:	6949      	ldr	r1, [r1, #20]
 800a45c:	6018      	str	r0, [r3, #0]
 800a45e:	6813      	ldr	r3, [r2, #0]
 800a460:	062e      	lsls	r6, r5, #24
 800a462:	d501      	bpl.n	800a468 <_printf_i+0x1a0>
 800a464:	6019      	str	r1, [r3, #0]
 800a466:	e002      	b.n	800a46e <_printf_i+0x1a6>
 800a468:	066d      	lsls	r5, r5, #25
 800a46a:	d5fb      	bpl.n	800a464 <_printf_i+0x19c>
 800a46c:	8019      	strh	r1, [r3, #0]
 800a46e:	2300      	movs	r3, #0
 800a470:	9e04      	ldr	r6, [sp, #16]
 800a472:	6123      	str	r3, [r4, #16]
 800a474:	e7d2      	b.n	800a41c <_printf_i+0x154>
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	1d11      	adds	r1, r2, #4
 800a47a:	6019      	str	r1, [r3, #0]
 800a47c:	6816      	ldr	r6, [r2, #0]
 800a47e:	2100      	movs	r1, #0
 800a480:	0030      	movs	r0, r6
 800a482:	6862      	ldr	r2, [r4, #4]
 800a484:	f000 ff20 	bl	800b2c8 <memchr>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d001      	beq.n	800a490 <_printf_i+0x1c8>
 800a48c:	1b80      	subs	r0, r0, r6
 800a48e:	6060      	str	r0, [r4, #4]
 800a490:	6863      	ldr	r3, [r4, #4]
 800a492:	6123      	str	r3, [r4, #16]
 800a494:	2300      	movs	r3, #0
 800a496:	9a04      	ldr	r2, [sp, #16]
 800a498:	7013      	strb	r3, [r2, #0]
 800a49a:	e7bf      	b.n	800a41c <_printf_i+0x154>
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	0032      	movs	r2, r6
 800a4a0:	9906      	ldr	r1, [sp, #24]
 800a4a2:	9805      	ldr	r0, [sp, #20]
 800a4a4:	9d07      	ldr	r5, [sp, #28]
 800a4a6:	47a8      	blx	r5
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d0c1      	beq.n	800a430 <_printf_i+0x168>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	079b      	lsls	r3, r3, #30
 800a4b0:	d415      	bmi.n	800a4de <_printf_i+0x216>
 800a4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b4:	68e0      	ldr	r0, [r4, #12]
 800a4b6:	4298      	cmp	r0, r3
 800a4b8:	dabc      	bge.n	800a434 <_printf_i+0x16c>
 800a4ba:	0018      	movs	r0, r3
 800a4bc:	e7ba      	b.n	800a434 <_printf_i+0x16c>
 800a4be:	0022      	movs	r2, r4
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	9906      	ldr	r1, [sp, #24]
 800a4c4:	9805      	ldr	r0, [sp, #20]
 800a4c6:	9e07      	ldr	r6, [sp, #28]
 800a4c8:	3219      	adds	r2, #25
 800a4ca:	47b0      	blx	r6
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d0af      	beq.n	800a430 <_printf_i+0x168>
 800a4d0:	3501      	adds	r5, #1
 800a4d2:	68e3      	ldr	r3, [r4, #12]
 800a4d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d6:	1a9b      	subs	r3, r3, r2
 800a4d8:	42ab      	cmp	r3, r5
 800a4da:	dcf0      	bgt.n	800a4be <_printf_i+0x1f6>
 800a4dc:	e7e9      	b.n	800a4b2 <_printf_i+0x1ea>
 800a4de:	2500      	movs	r5, #0
 800a4e0:	e7f7      	b.n	800a4d2 <_printf_i+0x20a>
 800a4e2:	46c0      	nop			; (mov r8, r8)
 800a4e4:	0800d9ca 	.word	0x0800d9ca
 800a4e8:	0800d9db 	.word	0x0800d9db

0800a4ec <siprintf>:
 800a4ec:	b40e      	push	{r1, r2, r3}
 800a4ee:	b500      	push	{lr}
 800a4f0:	490b      	ldr	r1, [pc, #44]	; (800a520 <siprintf+0x34>)
 800a4f2:	b09c      	sub	sp, #112	; 0x70
 800a4f4:	ab1d      	add	r3, sp, #116	; 0x74
 800a4f6:	9002      	str	r0, [sp, #8]
 800a4f8:	9006      	str	r0, [sp, #24]
 800a4fa:	9107      	str	r1, [sp, #28]
 800a4fc:	9104      	str	r1, [sp, #16]
 800a4fe:	4809      	ldr	r0, [pc, #36]	; (800a524 <siprintf+0x38>)
 800a500:	4909      	ldr	r1, [pc, #36]	; (800a528 <siprintf+0x3c>)
 800a502:	cb04      	ldmia	r3!, {r2}
 800a504:	9105      	str	r1, [sp, #20]
 800a506:	6800      	ldr	r0, [r0, #0]
 800a508:	a902      	add	r1, sp, #8
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	f001 fb9e 	bl	800bc4c <_svfiprintf_r>
 800a510:	2300      	movs	r3, #0
 800a512:	9a02      	ldr	r2, [sp, #8]
 800a514:	7013      	strb	r3, [r2, #0]
 800a516:	b01c      	add	sp, #112	; 0x70
 800a518:	bc08      	pop	{r3}
 800a51a:	b003      	add	sp, #12
 800a51c:	4718      	bx	r3
 800a51e:	46c0      	nop			; (mov r8, r8)
 800a520:	7fffffff 	.word	0x7fffffff
 800a524:	2000003c 	.word	0x2000003c
 800a528:	ffff0208 	.word	0xffff0208

0800a52c <strstr>:
 800a52c:	780a      	ldrb	r2, [r1, #0]
 800a52e:	b530      	push	{r4, r5, lr}
 800a530:	2a00      	cmp	r2, #0
 800a532:	d10c      	bne.n	800a54e <strstr+0x22>
 800a534:	bd30      	pop	{r4, r5, pc}
 800a536:	429a      	cmp	r2, r3
 800a538:	d108      	bne.n	800a54c <strstr+0x20>
 800a53a:	2301      	movs	r3, #1
 800a53c:	5ccc      	ldrb	r4, [r1, r3]
 800a53e:	2c00      	cmp	r4, #0
 800a540:	d0f8      	beq.n	800a534 <strstr+0x8>
 800a542:	5cc5      	ldrb	r5, [r0, r3]
 800a544:	42a5      	cmp	r5, r4
 800a546:	d101      	bne.n	800a54c <strstr+0x20>
 800a548:	3301      	adds	r3, #1
 800a54a:	e7f7      	b.n	800a53c <strstr+0x10>
 800a54c:	3001      	adds	r0, #1
 800a54e:	7803      	ldrb	r3, [r0, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1f0      	bne.n	800a536 <strstr+0xa>
 800a554:	0018      	movs	r0, r3
 800a556:	e7ed      	b.n	800a534 <strstr+0x8>

0800a558 <quorem>:
 800a558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a55a:	0006      	movs	r6, r0
 800a55c:	690d      	ldr	r5, [r1, #16]
 800a55e:	6933      	ldr	r3, [r6, #16]
 800a560:	b087      	sub	sp, #28
 800a562:	2000      	movs	r0, #0
 800a564:	9102      	str	r1, [sp, #8]
 800a566:	42ab      	cmp	r3, r5
 800a568:	db6b      	blt.n	800a642 <quorem+0xea>
 800a56a:	000b      	movs	r3, r1
 800a56c:	3d01      	subs	r5, #1
 800a56e:	00ac      	lsls	r4, r5, #2
 800a570:	3314      	adds	r3, #20
 800a572:	9305      	str	r3, [sp, #20]
 800a574:	191b      	adds	r3, r3, r4
 800a576:	9303      	str	r3, [sp, #12]
 800a578:	0033      	movs	r3, r6
 800a57a:	3314      	adds	r3, #20
 800a57c:	9301      	str	r3, [sp, #4]
 800a57e:	191c      	adds	r4, r3, r4
 800a580:	9b03      	ldr	r3, [sp, #12]
 800a582:	6827      	ldr	r7, [r4, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	0038      	movs	r0, r7
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	3301      	adds	r3, #1
 800a58c:	0019      	movs	r1, r3
 800a58e:	9304      	str	r3, [sp, #16]
 800a590:	f7f5 fdd6 	bl	8000140 <__udivsi3>
 800a594:	9b04      	ldr	r3, [sp, #16]
 800a596:	9000      	str	r0, [sp, #0]
 800a598:	429f      	cmp	r7, r3
 800a59a:	d329      	bcc.n	800a5f0 <quorem+0x98>
 800a59c:	2300      	movs	r3, #0
 800a59e:	469c      	mov	ip, r3
 800a5a0:	9801      	ldr	r0, [sp, #4]
 800a5a2:	9f05      	ldr	r7, [sp, #20]
 800a5a4:	9304      	str	r3, [sp, #16]
 800a5a6:	cf08      	ldmia	r7!, {r3}
 800a5a8:	9a00      	ldr	r2, [sp, #0]
 800a5aa:	b299      	uxth	r1, r3
 800a5ac:	4351      	muls	r1, r2
 800a5ae:	0c1b      	lsrs	r3, r3, #16
 800a5b0:	4353      	muls	r3, r2
 800a5b2:	4461      	add	r1, ip
 800a5b4:	0c0a      	lsrs	r2, r1, #16
 800a5b6:	189b      	adds	r3, r3, r2
 800a5b8:	0c1a      	lsrs	r2, r3, #16
 800a5ba:	9305      	str	r3, [sp, #20]
 800a5bc:	6803      	ldr	r3, [r0, #0]
 800a5be:	4694      	mov	ip, r2
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	9b04      	ldr	r3, [sp, #16]
 800a5c4:	b289      	uxth	r1, r1
 800a5c6:	18d2      	adds	r2, r2, r3
 800a5c8:	6803      	ldr	r3, [r0, #0]
 800a5ca:	1a52      	subs	r2, r2, r1
 800a5cc:	0c19      	lsrs	r1, r3, #16
 800a5ce:	466b      	mov	r3, sp
 800a5d0:	8a9b      	ldrh	r3, [r3, #20]
 800a5d2:	1acb      	subs	r3, r1, r3
 800a5d4:	1411      	asrs	r1, r2, #16
 800a5d6:	185b      	adds	r3, r3, r1
 800a5d8:	1419      	asrs	r1, r3, #16
 800a5da:	b292      	uxth	r2, r2
 800a5dc:	041b      	lsls	r3, r3, #16
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	9b03      	ldr	r3, [sp, #12]
 800a5e2:	9104      	str	r1, [sp, #16]
 800a5e4:	c004      	stmia	r0!, {r2}
 800a5e6:	42bb      	cmp	r3, r7
 800a5e8:	d2dd      	bcs.n	800a5a6 <quorem+0x4e>
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d02e      	beq.n	800a64e <quorem+0xf6>
 800a5f0:	0030      	movs	r0, r6
 800a5f2:	9902      	ldr	r1, [sp, #8]
 800a5f4:	f001 f8fa 	bl	800b7ec <__mcmp>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	db21      	blt.n	800a640 <quorem+0xe8>
 800a5fc:	0030      	movs	r0, r6
 800a5fe:	2400      	movs	r4, #0
 800a600:	9b00      	ldr	r3, [sp, #0]
 800a602:	9902      	ldr	r1, [sp, #8]
 800a604:	3301      	adds	r3, #1
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	3014      	adds	r0, #20
 800a60a:	3114      	adds	r1, #20
 800a60c:	6802      	ldr	r2, [r0, #0]
 800a60e:	c908      	ldmia	r1!, {r3}
 800a610:	b292      	uxth	r2, r2
 800a612:	1914      	adds	r4, r2, r4
 800a614:	b29a      	uxth	r2, r3
 800a616:	1aa2      	subs	r2, r4, r2
 800a618:	6804      	ldr	r4, [r0, #0]
 800a61a:	0c1b      	lsrs	r3, r3, #16
 800a61c:	0c24      	lsrs	r4, r4, #16
 800a61e:	1ae3      	subs	r3, r4, r3
 800a620:	1414      	asrs	r4, r2, #16
 800a622:	191b      	adds	r3, r3, r4
 800a624:	141c      	asrs	r4, r3, #16
 800a626:	b292      	uxth	r2, r2
 800a628:	041b      	lsls	r3, r3, #16
 800a62a:	4313      	orrs	r3, r2
 800a62c:	c008      	stmia	r0!, {r3}
 800a62e:	9b03      	ldr	r3, [sp, #12]
 800a630:	428b      	cmp	r3, r1
 800a632:	d2eb      	bcs.n	800a60c <quorem+0xb4>
 800a634:	9a01      	ldr	r2, [sp, #4]
 800a636:	00ab      	lsls	r3, r5, #2
 800a638:	18d3      	adds	r3, r2, r3
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	d010      	beq.n	800a662 <quorem+0x10a>
 800a640:	9800      	ldr	r0, [sp, #0]
 800a642:	b007      	add	sp, #28
 800a644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d104      	bne.n	800a656 <quorem+0xfe>
 800a64c:	3d01      	subs	r5, #1
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	3c04      	subs	r4, #4
 800a652:	42a3      	cmp	r3, r4
 800a654:	d3f7      	bcc.n	800a646 <quorem+0xee>
 800a656:	6135      	str	r5, [r6, #16]
 800a658:	e7ca      	b.n	800a5f0 <quorem+0x98>
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	2a00      	cmp	r2, #0
 800a65e:	d104      	bne.n	800a66a <quorem+0x112>
 800a660:	3d01      	subs	r5, #1
 800a662:	9a01      	ldr	r2, [sp, #4]
 800a664:	3b04      	subs	r3, #4
 800a666:	429a      	cmp	r2, r3
 800a668:	d3f7      	bcc.n	800a65a <quorem+0x102>
 800a66a:	6135      	str	r5, [r6, #16]
 800a66c:	e7e8      	b.n	800a640 <quorem+0xe8>
	...

0800a670 <_dtoa_r>:
 800a670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a672:	b09d      	sub	sp, #116	; 0x74
 800a674:	9202      	str	r2, [sp, #8]
 800a676:	9303      	str	r3, [sp, #12]
 800a678:	9b02      	ldr	r3, [sp, #8]
 800a67a:	9c03      	ldr	r4, [sp, #12]
 800a67c:	930a      	str	r3, [sp, #40]	; 0x28
 800a67e:	940b      	str	r4, [sp, #44]	; 0x2c
 800a680:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a682:	0007      	movs	r7, r0
 800a684:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a686:	2c00      	cmp	r4, #0
 800a688:	d10e      	bne.n	800a6a8 <_dtoa_r+0x38>
 800a68a:	2010      	movs	r0, #16
 800a68c:	f000 fe12 	bl	800b2b4 <malloc>
 800a690:	1e02      	subs	r2, r0, #0
 800a692:	6278      	str	r0, [r7, #36]	; 0x24
 800a694:	d104      	bne.n	800a6a0 <_dtoa_r+0x30>
 800a696:	21ea      	movs	r1, #234	; 0xea
 800a698:	4bc0      	ldr	r3, [pc, #768]	; (800a99c <_dtoa_r+0x32c>)
 800a69a:	48c1      	ldr	r0, [pc, #772]	; (800a9a0 <_dtoa_r+0x330>)
 800a69c:	f001 fbe8 	bl	800be70 <__assert_func>
 800a6a0:	6044      	str	r4, [r0, #4]
 800a6a2:	6084      	str	r4, [r0, #8]
 800a6a4:	6004      	str	r4, [r0, #0]
 800a6a6:	60c4      	str	r4, [r0, #12]
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	6819      	ldr	r1, [r3, #0]
 800a6ac:	2900      	cmp	r1, #0
 800a6ae:	d00a      	beq.n	800a6c6 <_dtoa_r+0x56>
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	4093      	lsls	r3, r2
 800a6b6:	604a      	str	r2, [r1, #4]
 800a6b8:	608b      	str	r3, [r1, #8]
 800a6ba:	0038      	movs	r0, r7
 800a6bc:	f000 fe54 	bl	800b368 <_Bfree>
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	601a      	str	r2, [r3, #0]
 800a6c6:	9b03      	ldr	r3, [sp, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	da21      	bge.n	800a710 <_dtoa_r+0xa0>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	602b      	str	r3, [r5, #0]
 800a6d0:	9b03      	ldr	r3, [sp, #12]
 800a6d2:	005b      	lsls	r3, r3, #1
 800a6d4:	085b      	lsrs	r3, r3, #1
 800a6d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a6da:	4bb2      	ldr	r3, [pc, #712]	; (800a9a4 <_dtoa_r+0x334>)
 800a6dc:	002a      	movs	r2, r5
 800a6de:	9318      	str	r3, [sp, #96]	; 0x60
 800a6e0:	401a      	ands	r2, r3
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d117      	bne.n	800a716 <_dtoa_r+0xa6>
 800a6e6:	4bb0      	ldr	r3, [pc, #704]	; (800a9a8 <_dtoa_r+0x338>)
 800a6e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6ea:	0328      	lsls	r0, r5, #12
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	9b02      	ldr	r3, [sp, #8]
 800a6f0:	0b00      	lsrs	r0, r0, #12
 800a6f2:	4318      	orrs	r0, r3
 800a6f4:	d101      	bne.n	800a6fa <_dtoa_r+0x8a>
 800a6f6:	f000 fdc3 	bl	800b280 <_dtoa_r+0xc10>
 800a6fa:	48ac      	ldr	r0, [pc, #688]	; (800a9ac <_dtoa_r+0x33c>)
 800a6fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6fe:	9005      	str	r0, [sp, #20]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d002      	beq.n	800a70a <_dtoa_r+0x9a>
 800a704:	4baa      	ldr	r3, [pc, #680]	; (800a9b0 <_dtoa_r+0x340>)
 800a706:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	9805      	ldr	r0, [sp, #20]
 800a70c:	b01d      	add	sp, #116	; 0x74
 800a70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a710:	2300      	movs	r3, #0
 800a712:	602b      	str	r3, [r5, #0]
 800a714:	e7e0      	b.n	800a6d8 <_dtoa_r+0x68>
 800a716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a718:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a71a:	9312      	str	r3, [sp, #72]	; 0x48
 800a71c:	9413      	str	r4, [sp, #76]	; 0x4c
 800a71e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a720:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a722:	2200      	movs	r2, #0
 800a724:	2300      	movs	r3, #0
 800a726:	f7f5 fe91 	bl	800044c <__aeabi_dcmpeq>
 800a72a:	1e04      	subs	r4, r0, #0
 800a72c:	d00b      	beq.n	800a746 <_dtoa_r+0xd6>
 800a72e:	2301      	movs	r3, #1
 800a730:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a732:	6013      	str	r3, [r2, #0]
 800a734:	4b9f      	ldr	r3, [pc, #636]	; (800a9b4 <_dtoa_r+0x344>)
 800a736:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a738:	9305      	str	r3, [sp, #20]
 800a73a:	2a00      	cmp	r2, #0
 800a73c:	d0e5      	beq.n	800a70a <_dtoa_r+0x9a>
 800a73e:	4a9e      	ldr	r2, [pc, #632]	; (800a9b8 <_dtoa_r+0x348>)
 800a740:	9926      	ldr	r1, [sp, #152]	; 0x98
 800a742:	600a      	str	r2, [r1, #0]
 800a744:	e7e1      	b.n	800a70a <_dtoa_r+0x9a>
 800a746:	ab1a      	add	r3, sp, #104	; 0x68
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	ab1b      	add	r3, sp, #108	; 0x6c
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	0038      	movs	r0, r7
 800a750:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a752:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a754:	f001 f8fe 	bl	800b954 <__d2b>
 800a758:	006e      	lsls	r6, r5, #1
 800a75a:	9004      	str	r0, [sp, #16]
 800a75c:	0d76      	lsrs	r6, r6, #21
 800a75e:	d100      	bne.n	800a762 <_dtoa_r+0xf2>
 800a760:	e07c      	b.n	800a85c <_dtoa_r+0x1ec>
 800a762:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a764:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a766:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a768:	4a94      	ldr	r2, [pc, #592]	; (800a9bc <_dtoa_r+0x34c>)
 800a76a:	031b      	lsls	r3, r3, #12
 800a76c:	0b1b      	lsrs	r3, r3, #12
 800a76e:	431a      	orrs	r2, r3
 800a770:	0011      	movs	r1, r2
 800a772:	4b93      	ldr	r3, [pc, #588]	; (800a9c0 <_dtoa_r+0x350>)
 800a774:	9416      	str	r4, [sp, #88]	; 0x58
 800a776:	18f6      	adds	r6, r6, r3
 800a778:	2200      	movs	r2, #0
 800a77a:	4b92      	ldr	r3, [pc, #584]	; (800a9c4 <_dtoa_r+0x354>)
 800a77c:	f7f7 fbc8 	bl	8001f10 <__aeabi_dsub>
 800a780:	4a91      	ldr	r2, [pc, #580]	; (800a9c8 <_dtoa_r+0x358>)
 800a782:	4b92      	ldr	r3, [pc, #584]	; (800a9cc <_dtoa_r+0x35c>)
 800a784:	f7f7 f958 	bl	8001a38 <__aeabi_dmul>
 800a788:	4a91      	ldr	r2, [pc, #580]	; (800a9d0 <_dtoa_r+0x360>)
 800a78a:	4b92      	ldr	r3, [pc, #584]	; (800a9d4 <_dtoa_r+0x364>)
 800a78c:	f7f6 f9e4 	bl	8000b58 <__aeabi_dadd>
 800a790:	0004      	movs	r4, r0
 800a792:	0030      	movs	r0, r6
 800a794:	000d      	movs	r5, r1
 800a796:	f7f7 ffa1 	bl	80026dc <__aeabi_i2d>
 800a79a:	4a8f      	ldr	r2, [pc, #572]	; (800a9d8 <_dtoa_r+0x368>)
 800a79c:	4b8f      	ldr	r3, [pc, #572]	; (800a9dc <_dtoa_r+0x36c>)
 800a79e:	f7f7 f94b 	bl	8001a38 <__aeabi_dmul>
 800a7a2:	0002      	movs	r2, r0
 800a7a4:	000b      	movs	r3, r1
 800a7a6:	0020      	movs	r0, r4
 800a7a8:	0029      	movs	r1, r5
 800a7aa:	f7f6 f9d5 	bl	8000b58 <__aeabi_dadd>
 800a7ae:	0004      	movs	r4, r0
 800a7b0:	000d      	movs	r5, r1
 800a7b2:	f7f7 ff5d 	bl	8002670 <__aeabi_d2iz>
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	9002      	str	r0, [sp, #8]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	0020      	movs	r0, r4
 800a7be:	0029      	movs	r1, r5
 800a7c0:	f7f5 fe4a 	bl	8000458 <__aeabi_dcmplt>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d00b      	beq.n	800a7e0 <_dtoa_r+0x170>
 800a7c8:	9802      	ldr	r0, [sp, #8]
 800a7ca:	f7f7 ff87 	bl	80026dc <__aeabi_i2d>
 800a7ce:	002b      	movs	r3, r5
 800a7d0:	0022      	movs	r2, r4
 800a7d2:	f7f5 fe3b 	bl	800044c <__aeabi_dcmpeq>
 800a7d6:	4243      	negs	r3, r0
 800a7d8:	4158      	adcs	r0, r3
 800a7da:	9b02      	ldr	r3, [sp, #8]
 800a7dc:	1a1b      	subs	r3, r3, r0
 800a7de:	9302      	str	r3, [sp, #8]
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	9315      	str	r3, [sp, #84]	; 0x54
 800a7e4:	9b02      	ldr	r3, [sp, #8]
 800a7e6:	2b16      	cmp	r3, #22
 800a7e8:	d80f      	bhi.n	800a80a <_dtoa_r+0x19a>
 800a7ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a7ee:	00da      	lsls	r2, r3, #3
 800a7f0:	4b7b      	ldr	r3, [pc, #492]	; (800a9e0 <_dtoa_r+0x370>)
 800a7f2:	189b      	adds	r3, r3, r2
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	f7f5 fe2e 	bl	8000458 <__aeabi_dcmplt>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d049      	beq.n	800a894 <_dtoa_r+0x224>
 800a800:	9b02      	ldr	r3, [sp, #8]
 800a802:	3b01      	subs	r3, #1
 800a804:	9302      	str	r3, [sp, #8]
 800a806:	2300      	movs	r3, #0
 800a808:	9315      	str	r3, [sp, #84]	; 0x54
 800a80a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a80c:	1b9e      	subs	r6, r3, r6
 800a80e:	2300      	movs	r3, #0
 800a810:	9308      	str	r3, [sp, #32]
 800a812:	0033      	movs	r3, r6
 800a814:	3b01      	subs	r3, #1
 800a816:	930d      	str	r3, [sp, #52]	; 0x34
 800a818:	d504      	bpl.n	800a824 <_dtoa_r+0x1b4>
 800a81a:	2301      	movs	r3, #1
 800a81c:	1b9b      	subs	r3, r3, r6
 800a81e:	9308      	str	r3, [sp, #32]
 800a820:	2300      	movs	r3, #0
 800a822:	930d      	str	r3, [sp, #52]	; 0x34
 800a824:	9b02      	ldr	r3, [sp, #8]
 800a826:	2b00      	cmp	r3, #0
 800a828:	db36      	blt.n	800a898 <_dtoa_r+0x228>
 800a82a:	9a02      	ldr	r2, [sp, #8]
 800a82c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a82e:	4694      	mov	ip, r2
 800a830:	4463      	add	r3, ip
 800a832:	930d      	str	r3, [sp, #52]	; 0x34
 800a834:	2300      	movs	r3, #0
 800a836:	9214      	str	r2, [sp, #80]	; 0x50
 800a838:	930e      	str	r3, [sp, #56]	; 0x38
 800a83a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a83c:	2401      	movs	r4, #1
 800a83e:	2b09      	cmp	r3, #9
 800a840:	d862      	bhi.n	800a908 <_dtoa_r+0x298>
 800a842:	2b05      	cmp	r3, #5
 800a844:	dd02      	ble.n	800a84c <_dtoa_r+0x1dc>
 800a846:	2400      	movs	r4, #0
 800a848:	3b04      	subs	r3, #4
 800a84a:	9322      	str	r3, [sp, #136]	; 0x88
 800a84c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a84e:	1e98      	subs	r0, r3, #2
 800a850:	2803      	cmp	r0, #3
 800a852:	d862      	bhi.n	800a91a <_dtoa_r+0x2aa>
 800a854:	f7f5 fc60 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a858:	56343629 	.word	0x56343629
 800a85c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a85e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a860:	189e      	adds	r6, r3, r2
 800a862:	4b60      	ldr	r3, [pc, #384]	; (800a9e4 <_dtoa_r+0x374>)
 800a864:	18f2      	adds	r2, r6, r3
 800a866:	2a20      	cmp	r2, #32
 800a868:	dd0f      	ble.n	800a88a <_dtoa_r+0x21a>
 800a86a:	2340      	movs	r3, #64	; 0x40
 800a86c:	1a9b      	subs	r3, r3, r2
 800a86e:	409d      	lsls	r5, r3
 800a870:	4b5d      	ldr	r3, [pc, #372]	; (800a9e8 <_dtoa_r+0x378>)
 800a872:	9802      	ldr	r0, [sp, #8]
 800a874:	18f3      	adds	r3, r6, r3
 800a876:	40d8      	lsrs	r0, r3
 800a878:	4328      	orrs	r0, r5
 800a87a:	f7f7 ff5f 	bl	800273c <__aeabi_ui2d>
 800a87e:	2301      	movs	r3, #1
 800a880:	4c5a      	ldr	r4, [pc, #360]	; (800a9ec <_dtoa_r+0x37c>)
 800a882:	3e01      	subs	r6, #1
 800a884:	1909      	adds	r1, r1, r4
 800a886:	9316      	str	r3, [sp, #88]	; 0x58
 800a888:	e776      	b.n	800a778 <_dtoa_r+0x108>
 800a88a:	2320      	movs	r3, #32
 800a88c:	9802      	ldr	r0, [sp, #8]
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	4098      	lsls	r0, r3
 800a892:	e7f2      	b.n	800a87a <_dtoa_r+0x20a>
 800a894:	9015      	str	r0, [sp, #84]	; 0x54
 800a896:	e7b8      	b.n	800a80a <_dtoa_r+0x19a>
 800a898:	9b08      	ldr	r3, [sp, #32]
 800a89a:	9a02      	ldr	r2, [sp, #8]
 800a89c:	1a9b      	subs	r3, r3, r2
 800a89e:	9308      	str	r3, [sp, #32]
 800a8a0:	4253      	negs	r3, r2
 800a8a2:	930e      	str	r3, [sp, #56]	; 0x38
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	9314      	str	r3, [sp, #80]	; 0x50
 800a8a8:	e7c7      	b.n	800a83a <_dtoa_r+0x1ca>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dc36      	bgt.n	800a922 <_dtoa_r+0x2b2>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	001a      	movs	r2, r3
 800a8b8:	930c      	str	r3, [sp, #48]	; 0x30
 800a8ba:	9306      	str	r3, [sp, #24]
 800a8bc:	9223      	str	r2, [sp, #140]	; 0x8c
 800a8be:	e00d      	b.n	800a8dc <_dtoa_r+0x26c>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e7f3      	b.n	800a8ac <_dtoa_r+0x23c>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a8c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8ca:	4694      	mov	ip, r2
 800a8cc:	9b02      	ldr	r3, [sp, #8]
 800a8ce:	4463      	add	r3, ip
 800a8d0:	930c      	str	r3, [sp, #48]	; 0x30
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	9306      	str	r3, [sp, #24]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	dc00      	bgt.n	800a8dc <_dtoa_r+0x26c>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	2200      	movs	r2, #0
 800a8de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8e0:	6042      	str	r2, [r0, #4]
 800a8e2:	3204      	adds	r2, #4
 800a8e4:	0015      	movs	r5, r2
 800a8e6:	3514      	adds	r5, #20
 800a8e8:	6841      	ldr	r1, [r0, #4]
 800a8ea:	429d      	cmp	r5, r3
 800a8ec:	d91d      	bls.n	800a92a <_dtoa_r+0x2ba>
 800a8ee:	0038      	movs	r0, r7
 800a8f0:	f000 fcf6 	bl	800b2e0 <_Balloc>
 800a8f4:	9005      	str	r0, [sp, #20]
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d11b      	bne.n	800a932 <_dtoa_r+0x2c2>
 800a8fa:	21d5      	movs	r1, #213	; 0xd5
 800a8fc:	0002      	movs	r2, r0
 800a8fe:	4b3c      	ldr	r3, [pc, #240]	; (800a9f0 <_dtoa_r+0x380>)
 800a900:	0049      	lsls	r1, r1, #1
 800a902:	e6ca      	b.n	800a69a <_dtoa_r+0x2a>
 800a904:	2301      	movs	r3, #1
 800a906:	e7de      	b.n	800a8c6 <_dtoa_r+0x256>
 800a908:	2300      	movs	r3, #0
 800a90a:	940f      	str	r4, [sp, #60]	; 0x3c
 800a90c:	9322      	str	r3, [sp, #136]	; 0x88
 800a90e:	3b01      	subs	r3, #1
 800a910:	930c      	str	r3, [sp, #48]	; 0x30
 800a912:	9306      	str	r3, [sp, #24]
 800a914:	2200      	movs	r2, #0
 800a916:	3313      	adds	r3, #19
 800a918:	e7d0      	b.n	800a8bc <_dtoa_r+0x24c>
 800a91a:	2301      	movs	r3, #1
 800a91c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a91e:	3b02      	subs	r3, #2
 800a920:	e7f6      	b.n	800a910 <_dtoa_r+0x2a0>
 800a922:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a924:	930c      	str	r3, [sp, #48]	; 0x30
 800a926:	9306      	str	r3, [sp, #24]
 800a928:	e7d8      	b.n	800a8dc <_dtoa_r+0x26c>
 800a92a:	3101      	adds	r1, #1
 800a92c:	6041      	str	r1, [r0, #4]
 800a92e:	0052      	lsls	r2, r2, #1
 800a930:	e7d8      	b.n	800a8e4 <_dtoa_r+0x274>
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	9a05      	ldr	r2, [sp, #20]
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	9b06      	ldr	r3, [sp, #24]
 800a93a:	2b0e      	cmp	r3, #14
 800a93c:	d900      	bls.n	800a940 <_dtoa_r+0x2d0>
 800a93e:	e0eb      	b.n	800ab18 <_dtoa_r+0x4a8>
 800a940:	2c00      	cmp	r4, #0
 800a942:	d100      	bne.n	800a946 <_dtoa_r+0x2d6>
 800a944:	e0e8      	b.n	800ab18 <_dtoa_r+0x4a8>
 800a946:	9b02      	ldr	r3, [sp, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	dd68      	ble.n	800aa1e <_dtoa_r+0x3ae>
 800a94c:	001a      	movs	r2, r3
 800a94e:	210f      	movs	r1, #15
 800a950:	4b23      	ldr	r3, [pc, #140]	; (800a9e0 <_dtoa_r+0x370>)
 800a952:	400a      	ands	r2, r1
 800a954:	00d2      	lsls	r2, r2, #3
 800a956:	189b      	adds	r3, r3, r2
 800a958:	681d      	ldr	r5, [r3, #0]
 800a95a:	685e      	ldr	r6, [r3, #4]
 800a95c:	9b02      	ldr	r3, [sp, #8]
 800a95e:	111c      	asrs	r4, r3, #4
 800a960:	2302      	movs	r3, #2
 800a962:	9310      	str	r3, [sp, #64]	; 0x40
 800a964:	9b02      	ldr	r3, [sp, #8]
 800a966:	05db      	lsls	r3, r3, #23
 800a968:	d50b      	bpl.n	800a982 <_dtoa_r+0x312>
 800a96a:	4b22      	ldr	r3, [pc, #136]	; (800a9f4 <_dtoa_r+0x384>)
 800a96c:	400c      	ands	r4, r1
 800a96e:	6a1a      	ldr	r2, [r3, #32]
 800a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a972:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a974:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a976:	f7f6 fc59 	bl	800122c <__aeabi_ddiv>
 800a97a:	2303      	movs	r3, #3
 800a97c:	900a      	str	r0, [sp, #40]	; 0x28
 800a97e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a980:	9310      	str	r3, [sp, #64]	; 0x40
 800a982:	4b1c      	ldr	r3, [pc, #112]	; (800a9f4 <_dtoa_r+0x384>)
 800a984:	9307      	str	r3, [sp, #28]
 800a986:	2c00      	cmp	r4, #0
 800a988:	d136      	bne.n	800a9f8 <_dtoa_r+0x388>
 800a98a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a98c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a98e:	002a      	movs	r2, r5
 800a990:	0033      	movs	r3, r6
 800a992:	f7f6 fc4b 	bl	800122c <__aeabi_ddiv>
 800a996:	900a      	str	r0, [sp, #40]	; 0x28
 800a998:	910b      	str	r1, [sp, #44]	; 0x2c
 800a99a:	e05c      	b.n	800aa56 <_dtoa_r+0x3e6>
 800a99c:	0800d9f9 	.word	0x0800d9f9
 800a9a0:	0800da10 	.word	0x0800da10
 800a9a4:	7ff00000 	.word	0x7ff00000
 800a9a8:	0000270f 	.word	0x0000270f
 800a9ac:	0800d9f5 	.word	0x0800d9f5
 800a9b0:	0800d9f8 	.word	0x0800d9f8
 800a9b4:	0800d9c8 	.word	0x0800d9c8
 800a9b8:	0800d9c9 	.word	0x0800d9c9
 800a9bc:	3ff00000 	.word	0x3ff00000
 800a9c0:	fffffc01 	.word	0xfffffc01
 800a9c4:	3ff80000 	.word	0x3ff80000
 800a9c8:	636f4361 	.word	0x636f4361
 800a9cc:	3fd287a7 	.word	0x3fd287a7
 800a9d0:	8b60c8b3 	.word	0x8b60c8b3
 800a9d4:	3fc68a28 	.word	0x3fc68a28
 800a9d8:	509f79fb 	.word	0x509f79fb
 800a9dc:	3fd34413 	.word	0x3fd34413
 800a9e0:	0800db08 	.word	0x0800db08
 800a9e4:	00000432 	.word	0x00000432
 800a9e8:	00000412 	.word	0x00000412
 800a9ec:	fe100000 	.word	0xfe100000
 800a9f0:	0800da6f 	.word	0x0800da6f
 800a9f4:	0800dae0 	.word	0x0800dae0
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	421c      	tst	r4, r3
 800a9fc:	d00b      	beq.n	800aa16 <_dtoa_r+0x3a6>
 800a9fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa00:	0028      	movs	r0, r5
 800aa02:	3301      	adds	r3, #1
 800aa04:	9310      	str	r3, [sp, #64]	; 0x40
 800aa06:	9b07      	ldr	r3, [sp, #28]
 800aa08:	0031      	movs	r1, r6
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f7f7 f813 	bl	8001a38 <__aeabi_dmul>
 800aa12:	0005      	movs	r5, r0
 800aa14:	000e      	movs	r6, r1
 800aa16:	9b07      	ldr	r3, [sp, #28]
 800aa18:	1064      	asrs	r4, r4, #1
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	e7b2      	b.n	800a984 <_dtoa_r+0x314>
 800aa1e:	2302      	movs	r3, #2
 800aa20:	9310      	str	r3, [sp, #64]	; 0x40
 800aa22:	9b02      	ldr	r3, [sp, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d016      	beq.n	800aa56 <_dtoa_r+0x3e6>
 800aa28:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aa2c:	425c      	negs	r4, r3
 800aa2e:	230f      	movs	r3, #15
 800aa30:	4ab5      	ldr	r2, [pc, #724]	; (800ad08 <_dtoa_r+0x698>)
 800aa32:	4023      	ands	r3, r4
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	18d3      	adds	r3, r2, r3
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	f7f6 fffc 	bl	8001a38 <__aeabi_dmul>
 800aa40:	2601      	movs	r6, #1
 800aa42:	2300      	movs	r3, #0
 800aa44:	900a      	str	r0, [sp, #40]	; 0x28
 800aa46:	910b      	str	r1, [sp, #44]	; 0x2c
 800aa48:	4db0      	ldr	r5, [pc, #704]	; (800ad0c <_dtoa_r+0x69c>)
 800aa4a:	1124      	asrs	r4, r4, #4
 800aa4c:	2c00      	cmp	r4, #0
 800aa4e:	d000      	beq.n	800aa52 <_dtoa_r+0x3e2>
 800aa50:	e094      	b.n	800ab7c <_dtoa_r+0x50c>
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d19f      	bne.n	800a996 <_dtoa_r+0x326>
 800aa56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d100      	bne.n	800aa5e <_dtoa_r+0x3ee>
 800aa5c:	e09b      	b.n	800ab96 <_dtoa_r+0x526>
 800aa5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aa60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800aa62:	2200      	movs	r2, #0
 800aa64:	0020      	movs	r0, r4
 800aa66:	0029      	movs	r1, r5
 800aa68:	4ba9      	ldr	r3, [pc, #676]	; (800ad10 <_dtoa_r+0x6a0>)
 800aa6a:	f7f5 fcf5 	bl	8000458 <__aeabi_dcmplt>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d100      	bne.n	800aa74 <_dtoa_r+0x404>
 800aa72:	e090      	b.n	800ab96 <_dtoa_r+0x526>
 800aa74:	9b06      	ldr	r3, [sp, #24]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d100      	bne.n	800aa7c <_dtoa_r+0x40c>
 800aa7a:	e08c      	b.n	800ab96 <_dtoa_r+0x526>
 800aa7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	dd46      	ble.n	800ab10 <_dtoa_r+0x4a0>
 800aa82:	9b02      	ldr	r3, [sp, #8]
 800aa84:	2200      	movs	r2, #0
 800aa86:	0020      	movs	r0, r4
 800aa88:	0029      	movs	r1, r5
 800aa8a:	1e5e      	subs	r6, r3, #1
 800aa8c:	4ba1      	ldr	r3, [pc, #644]	; (800ad14 <_dtoa_r+0x6a4>)
 800aa8e:	f7f6 ffd3 	bl	8001a38 <__aeabi_dmul>
 800aa92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa94:	900a      	str	r0, [sp, #40]	; 0x28
 800aa96:	910b      	str	r1, [sp, #44]	; 0x2c
 800aa98:	3301      	adds	r3, #1
 800aa9a:	9310      	str	r3, [sp, #64]	; 0x40
 800aa9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa9e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aaa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aaa2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800aaa4:	9307      	str	r3, [sp, #28]
 800aaa6:	f7f7 fe19 	bl	80026dc <__aeabi_i2d>
 800aaaa:	0022      	movs	r2, r4
 800aaac:	002b      	movs	r3, r5
 800aaae:	f7f6 ffc3 	bl	8001a38 <__aeabi_dmul>
 800aab2:	2200      	movs	r2, #0
 800aab4:	4b98      	ldr	r3, [pc, #608]	; (800ad18 <_dtoa_r+0x6a8>)
 800aab6:	f7f6 f84f 	bl	8000b58 <__aeabi_dadd>
 800aaba:	9010      	str	r0, [sp, #64]	; 0x40
 800aabc:	9111      	str	r1, [sp, #68]	; 0x44
 800aabe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aac2:	920a      	str	r2, [sp, #40]	; 0x28
 800aac4:	930b      	str	r3, [sp, #44]	; 0x2c
 800aac6:	4a95      	ldr	r2, [pc, #596]	; (800ad1c <_dtoa_r+0x6ac>)
 800aac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaca:	4694      	mov	ip, r2
 800aacc:	4463      	add	r3, ip
 800aace:	9317      	str	r3, [sp, #92]	; 0x5c
 800aad0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aad2:	9b07      	ldr	r3, [sp, #28]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d161      	bne.n	800ab9c <_dtoa_r+0x52c>
 800aad8:	2200      	movs	r2, #0
 800aada:	0020      	movs	r0, r4
 800aadc:	0029      	movs	r1, r5
 800aade:	4b90      	ldr	r3, [pc, #576]	; (800ad20 <_dtoa_r+0x6b0>)
 800aae0:	f7f7 fa16 	bl	8001f10 <__aeabi_dsub>
 800aae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aae6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aae8:	0004      	movs	r4, r0
 800aaea:	000d      	movs	r5, r1
 800aaec:	f7f5 fcc8 	bl	8000480 <__aeabi_dcmpgt>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d000      	beq.n	800aaf6 <_dtoa_r+0x486>
 800aaf4:	e2b5      	b.n	800b062 <_dtoa_r+0x9f2>
 800aaf6:	488b      	ldr	r0, [pc, #556]	; (800ad24 <_dtoa_r+0x6b4>)
 800aaf8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aafa:	4684      	mov	ip, r0
 800aafc:	4461      	add	r1, ip
 800aafe:	000b      	movs	r3, r1
 800ab00:	0020      	movs	r0, r4
 800ab02:	0029      	movs	r1, r5
 800ab04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab06:	f7f5 fca7 	bl	8000458 <__aeabi_dcmplt>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d000      	beq.n	800ab10 <_dtoa_r+0x4a0>
 800ab0e:	e2a5      	b.n	800b05c <_dtoa_r+0x9ec>
 800ab10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab12:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ab14:	930a      	str	r3, [sp, #40]	; 0x28
 800ab16:	940b      	str	r4, [sp, #44]	; 0x2c
 800ab18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	da00      	bge.n	800ab20 <_dtoa_r+0x4b0>
 800ab1e:	e171      	b.n	800ae04 <_dtoa_r+0x794>
 800ab20:	9a02      	ldr	r2, [sp, #8]
 800ab22:	2a0e      	cmp	r2, #14
 800ab24:	dd00      	ble.n	800ab28 <_dtoa_r+0x4b8>
 800ab26:	e16d      	b.n	800ae04 <_dtoa_r+0x794>
 800ab28:	4b77      	ldr	r3, [pc, #476]	; (800ad08 <_dtoa_r+0x698>)
 800ab2a:	00d2      	lsls	r2, r2, #3
 800ab2c:	189b      	adds	r3, r3, r2
 800ab2e:	685c      	ldr	r4, [r3, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	9308      	str	r3, [sp, #32]
 800ab34:	9409      	str	r4, [sp, #36]	; 0x24
 800ab36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	db00      	blt.n	800ab3e <_dtoa_r+0x4ce>
 800ab3c:	e0f6      	b.n	800ad2c <_dtoa_r+0x6bc>
 800ab3e:	9b06      	ldr	r3, [sp, #24]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	dd00      	ble.n	800ab46 <_dtoa_r+0x4d6>
 800ab44:	e0f2      	b.n	800ad2c <_dtoa_r+0x6bc>
 800ab46:	d000      	beq.n	800ab4a <_dtoa_r+0x4da>
 800ab48:	e288      	b.n	800b05c <_dtoa_r+0x9ec>
 800ab4a:	9808      	ldr	r0, [sp, #32]
 800ab4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab4e:	2200      	movs	r2, #0
 800ab50:	4b73      	ldr	r3, [pc, #460]	; (800ad20 <_dtoa_r+0x6b0>)
 800ab52:	f7f6 ff71 	bl	8001a38 <__aeabi_dmul>
 800ab56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab5a:	f7f5 fc9b 	bl	8000494 <__aeabi_dcmpge>
 800ab5e:	9e06      	ldr	r6, [sp, #24]
 800ab60:	0035      	movs	r5, r6
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d000      	beq.n	800ab68 <_dtoa_r+0x4f8>
 800ab66:	e25f      	b.n	800b028 <_dtoa_r+0x9b8>
 800ab68:	9b05      	ldr	r3, [sp, #20]
 800ab6a:	9a05      	ldr	r2, [sp, #20]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	9307      	str	r3, [sp, #28]
 800ab70:	2331      	movs	r3, #49	; 0x31
 800ab72:	7013      	strb	r3, [r2, #0]
 800ab74:	9b02      	ldr	r3, [sp, #8]
 800ab76:	3301      	adds	r3, #1
 800ab78:	9302      	str	r3, [sp, #8]
 800ab7a:	e25a      	b.n	800b032 <_dtoa_r+0x9c2>
 800ab7c:	4234      	tst	r4, r6
 800ab7e:	d007      	beq.n	800ab90 <_dtoa_r+0x520>
 800ab80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab82:	3301      	adds	r3, #1
 800ab84:	9310      	str	r3, [sp, #64]	; 0x40
 800ab86:	682a      	ldr	r2, [r5, #0]
 800ab88:	686b      	ldr	r3, [r5, #4]
 800ab8a:	f7f6 ff55 	bl	8001a38 <__aeabi_dmul>
 800ab8e:	0033      	movs	r3, r6
 800ab90:	1064      	asrs	r4, r4, #1
 800ab92:	3508      	adds	r5, #8
 800ab94:	e75a      	b.n	800aa4c <_dtoa_r+0x3dc>
 800ab96:	9e02      	ldr	r6, [sp, #8]
 800ab98:	9b06      	ldr	r3, [sp, #24]
 800ab9a:	e780      	b.n	800aa9e <_dtoa_r+0x42e>
 800ab9c:	9b07      	ldr	r3, [sp, #28]
 800ab9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aba0:	1e5a      	subs	r2, r3, #1
 800aba2:	4b59      	ldr	r3, [pc, #356]	; (800ad08 <_dtoa_r+0x698>)
 800aba4:	00d2      	lsls	r2, r2, #3
 800aba6:	189b      	adds	r3, r3, r2
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	2900      	cmp	r1, #0
 800abae:	d051      	beq.n	800ac54 <_dtoa_r+0x5e4>
 800abb0:	2000      	movs	r0, #0
 800abb2:	495d      	ldr	r1, [pc, #372]	; (800ad28 <_dtoa_r+0x6b8>)
 800abb4:	f7f6 fb3a 	bl	800122c <__aeabi_ddiv>
 800abb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abbc:	f7f7 f9a8 	bl	8001f10 <__aeabi_dsub>
 800abc0:	9a05      	ldr	r2, [sp, #20]
 800abc2:	9b05      	ldr	r3, [sp, #20]
 800abc4:	4694      	mov	ip, r2
 800abc6:	9310      	str	r3, [sp, #64]	; 0x40
 800abc8:	9b07      	ldr	r3, [sp, #28]
 800abca:	900a      	str	r0, [sp, #40]	; 0x28
 800abcc:	910b      	str	r1, [sp, #44]	; 0x2c
 800abce:	4463      	add	r3, ip
 800abd0:	9319      	str	r3, [sp, #100]	; 0x64
 800abd2:	0029      	movs	r1, r5
 800abd4:	0020      	movs	r0, r4
 800abd6:	f7f7 fd4b 	bl	8002670 <__aeabi_d2iz>
 800abda:	9017      	str	r0, [sp, #92]	; 0x5c
 800abdc:	f7f7 fd7e 	bl	80026dc <__aeabi_i2d>
 800abe0:	0002      	movs	r2, r0
 800abe2:	000b      	movs	r3, r1
 800abe4:	0020      	movs	r0, r4
 800abe6:	0029      	movs	r1, r5
 800abe8:	f7f7 f992 	bl	8001f10 <__aeabi_dsub>
 800abec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abf0:	3301      	adds	r3, #1
 800abf2:	9307      	str	r3, [sp, #28]
 800abf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abf6:	0004      	movs	r4, r0
 800abf8:	3330      	adds	r3, #48	; 0x30
 800abfa:	7013      	strb	r3, [r2, #0]
 800abfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac00:	000d      	movs	r5, r1
 800ac02:	f7f5 fc29 	bl	8000458 <__aeabi_dcmplt>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d175      	bne.n	800acf6 <_dtoa_r+0x686>
 800ac0a:	0022      	movs	r2, r4
 800ac0c:	002b      	movs	r3, r5
 800ac0e:	2000      	movs	r0, #0
 800ac10:	493f      	ldr	r1, [pc, #252]	; (800ad10 <_dtoa_r+0x6a0>)
 800ac12:	f7f7 f97d 	bl	8001f10 <__aeabi_dsub>
 800ac16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac1a:	f7f5 fc1d 	bl	8000458 <__aeabi_dcmplt>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d000      	beq.n	800ac24 <_dtoa_r+0x5b4>
 800ac22:	e0d1      	b.n	800adc8 <_dtoa_r+0x758>
 800ac24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac26:	9a07      	ldr	r2, [sp, #28]
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d100      	bne.n	800ac2e <_dtoa_r+0x5be>
 800ac2c:	e770      	b.n	800ab10 <_dtoa_r+0x4a0>
 800ac2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac32:	2200      	movs	r2, #0
 800ac34:	4b37      	ldr	r3, [pc, #220]	; (800ad14 <_dtoa_r+0x6a4>)
 800ac36:	f7f6 feff 	bl	8001a38 <__aeabi_dmul>
 800ac3a:	4b36      	ldr	r3, [pc, #216]	; (800ad14 <_dtoa_r+0x6a4>)
 800ac3c:	900a      	str	r0, [sp, #40]	; 0x28
 800ac3e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ac40:	2200      	movs	r2, #0
 800ac42:	0020      	movs	r0, r4
 800ac44:	0029      	movs	r1, r5
 800ac46:	f7f6 fef7 	bl	8001a38 <__aeabi_dmul>
 800ac4a:	9b07      	ldr	r3, [sp, #28]
 800ac4c:	0004      	movs	r4, r0
 800ac4e:	000d      	movs	r5, r1
 800ac50:	9310      	str	r3, [sp, #64]	; 0x40
 800ac52:	e7be      	b.n	800abd2 <_dtoa_r+0x562>
 800ac54:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac58:	f7f6 feee 	bl	8001a38 <__aeabi_dmul>
 800ac5c:	9a05      	ldr	r2, [sp, #20]
 800ac5e:	9b05      	ldr	r3, [sp, #20]
 800ac60:	4694      	mov	ip, r2
 800ac62:	930a      	str	r3, [sp, #40]	; 0x28
 800ac64:	9b07      	ldr	r3, [sp, #28]
 800ac66:	9010      	str	r0, [sp, #64]	; 0x40
 800ac68:	9111      	str	r1, [sp, #68]	; 0x44
 800ac6a:	4463      	add	r3, ip
 800ac6c:	9319      	str	r3, [sp, #100]	; 0x64
 800ac6e:	0029      	movs	r1, r5
 800ac70:	0020      	movs	r0, r4
 800ac72:	f7f7 fcfd 	bl	8002670 <__aeabi_d2iz>
 800ac76:	9017      	str	r0, [sp, #92]	; 0x5c
 800ac78:	f7f7 fd30 	bl	80026dc <__aeabi_i2d>
 800ac7c:	0002      	movs	r2, r0
 800ac7e:	000b      	movs	r3, r1
 800ac80:	0020      	movs	r0, r4
 800ac82:	0029      	movs	r1, r5
 800ac84:	f7f7 f944 	bl	8001f10 <__aeabi_dsub>
 800ac88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac8c:	3330      	adds	r3, #48	; 0x30
 800ac8e:	7013      	strb	r3, [r2, #0]
 800ac90:	0013      	movs	r3, r2
 800ac92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac94:	3301      	adds	r3, #1
 800ac96:	0004      	movs	r4, r0
 800ac98:	000d      	movs	r5, r1
 800ac9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d12c      	bne.n	800acfa <_dtoa_r+0x68a>
 800aca0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aca2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aca4:	9a05      	ldr	r2, [sp, #20]
 800aca6:	9b07      	ldr	r3, [sp, #28]
 800aca8:	4694      	mov	ip, r2
 800acaa:	4463      	add	r3, ip
 800acac:	2200      	movs	r2, #0
 800acae:	9307      	str	r3, [sp, #28]
 800acb0:	4b1d      	ldr	r3, [pc, #116]	; (800ad28 <_dtoa_r+0x6b8>)
 800acb2:	f7f5 ff51 	bl	8000b58 <__aeabi_dadd>
 800acb6:	0002      	movs	r2, r0
 800acb8:	000b      	movs	r3, r1
 800acba:	0020      	movs	r0, r4
 800acbc:	0029      	movs	r1, r5
 800acbe:	f7f5 fbdf 	bl	8000480 <__aeabi_dcmpgt>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d000      	beq.n	800acc8 <_dtoa_r+0x658>
 800acc6:	e07f      	b.n	800adc8 <_dtoa_r+0x758>
 800acc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800acca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800accc:	2000      	movs	r0, #0
 800acce:	4916      	ldr	r1, [pc, #88]	; (800ad28 <_dtoa_r+0x6b8>)
 800acd0:	f7f7 f91e 	bl	8001f10 <__aeabi_dsub>
 800acd4:	0002      	movs	r2, r0
 800acd6:	000b      	movs	r3, r1
 800acd8:	0020      	movs	r0, r4
 800acda:	0029      	movs	r1, r5
 800acdc:	f7f5 fbbc 	bl	8000458 <__aeabi_dcmplt>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d100      	bne.n	800ace6 <_dtoa_r+0x676>
 800ace4:	e714      	b.n	800ab10 <_dtoa_r+0x4a0>
 800ace6:	9b07      	ldr	r3, [sp, #28]
 800ace8:	001a      	movs	r2, r3
 800acea:	3a01      	subs	r2, #1
 800acec:	9207      	str	r2, [sp, #28]
 800acee:	7812      	ldrb	r2, [r2, #0]
 800acf0:	2a30      	cmp	r2, #48	; 0x30
 800acf2:	d0f8      	beq.n	800ace6 <_dtoa_r+0x676>
 800acf4:	9307      	str	r3, [sp, #28]
 800acf6:	9602      	str	r6, [sp, #8]
 800acf8:	e054      	b.n	800ada4 <_dtoa_r+0x734>
 800acfa:	2200      	movs	r2, #0
 800acfc:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <_dtoa_r+0x6a4>)
 800acfe:	f7f6 fe9b 	bl	8001a38 <__aeabi_dmul>
 800ad02:	0004      	movs	r4, r0
 800ad04:	000d      	movs	r5, r1
 800ad06:	e7b2      	b.n	800ac6e <_dtoa_r+0x5fe>
 800ad08:	0800db08 	.word	0x0800db08
 800ad0c:	0800dae0 	.word	0x0800dae0
 800ad10:	3ff00000 	.word	0x3ff00000
 800ad14:	40240000 	.word	0x40240000
 800ad18:	401c0000 	.word	0x401c0000
 800ad1c:	fcc00000 	.word	0xfcc00000
 800ad20:	40140000 	.word	0x40140000
 800ad24:	7cc00000 	.word	0x7cc00000
 800ad28:	3fe00000 	.word	0x3fe00000
 800ad2c:	9b06      	ldr	r3, [sp, #24]
 800ad2e:	9e05      	ldr	r6, [sp, #20]
 800ad30:	3b01      	subs	r3, #1
 800ad32:	199b      	adds	r3, r3, r6
 800ad34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad36:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ad38:	930a      	str	r3, [sp, #40]	; 0x28
 800ad3a:	9a08      	ldr	r2, [sp, #32]
 800ad3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad3e:	0020      	movs	r0, r4
 800ad40:	0029      	movs	r1, r5
 800ad42:	f7f6 fa73 	bl	800122c <__aeabi_ddiv>
 800ad46:	f7f7 fc93 	bl	8002670 <__aeabi_d2iz>
 800ad4a:	9006      	str	r0, [sp, #24]
 800ad4c:	f7f7 fcc6 	bl	80026dc <__aeabi_i2d>
 800ad50:	9a08      	ldr	r2, [sp, #32]
 800ad52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad54:	f7f6 fe70 	bl	8001a38 <__aeabi_dmul>
 800ad58:	0002      	movs	r2, r0
 800ad5a:	000b      	movs	r3, r1
 800ad5c:	0020      	movs	r0, r4
 800ad5e:	0029      	movs	r1, r5
 800ad60:	f7f7 f8d6 	bl	8001f10 <__aeabi_dsub>
 800ad64:	0033      	movs	r3, r6
 800ad66:	9a06      	ldr	r2, [sp, #24]
 800ad68:	3601      	adds	r6, #1
 800ad6a:	3230      	adds	r2, #48	; 0x30
 800ad6c:	701a      	strb	r2, [r3, #0]
 800ad6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad70:	9607      	str	r6, [sp, #28]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d139      	bne.n	800adea <_dtoa_r+0x77a>
 800ad76:	0002      	movs	r2, r0
 800ad78:	000b      	movs	r3, r1
 800ad7a:	f7f5 feed 	bl	8000b58 <__aeabi_dadd>
 800ad7e:	9a08      	ldr	r2, [sp, #32]
 800ad80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad82:	0004      	movs	r4, r0
 800ad84:	000d      	movs	r5, r1
 800ad86:	f7f5 fb7b 	bl	8000480 <__aeabi_dcmpgt>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d11b      	bne.n	800adc6 <_dtoa_r+0x756>
 800ad8e:	9a08      	ldr	r2, [sp, #32]
 800ad90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad92:	0020      	movs	r0, r4
 800ad94:	0029      	movs	r1, r5
 800ad96:	f7f5 fb59 	bl	800044c <__aeabi_dcmpeq>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d002      	beq.n	800ada4 <_dtoa_r+0x734>
 800ad9e:	9b06      	ldr	r3, [sp, #24]
 800ada0:	07db      	lsls	r3, r3, #31
 800ada2:	d410      	bmi.n	800adc6 <_dtoa_r+0x756>
 800ada4:	0038      	movs	r0, r7
 800ada6:	9904      	ldr	r1, [sp, #16]
 800ada8:	f000 fade 	bl	800b368 <_Bfree>
 800adac:	2300      	movs	r3, #0
 800adae:	9a07      	ldr	r2, [sp, #28]
 800adb0:	9802      	ldr	r0, [sp, #8]
 800adb2:	7013      	strb	r3, [r2, #0]
 800adb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800adb6:	3001      	adds	r0, #1
 800adb8:	6018      	str	r0, [r3, #0]
 800adba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d100      	bne.n	800adc2 <_dtoa_r+0x752>
 800adc0:	e4a3      	b.n	800a70a <_dtoa_r+0x9a>
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	e4a1      	b.n	800a70a <_dtoa_r+0x9a>
 800adc6:	9e02      	ldr	r6, [sp, #8]
 800adc8:	9b07      	ldr	r3, [sp, #28]
 800adca:	9307      	str	r3, [sp, #28]
 800adcc:	3b01      	subs	r3, #1
 800adce:	781a      	ldrb	r2, [r3, #0]
 800add0:	2a39      	cmp	r2, #57	; 0x39
 800add2:	d106      	bne.n	800ade2 <_dtoa_r+0x772>
 800add4:	9a05      	ldr	r2, [sp, #20]
 800add6:	429a      	cmp	r2, r3
 800add8:	d1f7      	bne.n	800adca <_dtoa_r+0x75a>
 800adda:	2230      	movs	r2, #48	; 0x30
 800addc:	9905      	ldr	r1, [sp, #20]
 800adde:	3601      	adds	r6, #1
 800ade0:	700a      	strb	r2, [r1, #0]
 800ade2:	781a      	ldrb	r2, [r3, #0]
 800ade4:	3201      	adds	r2, #1
 800ade6:	701a      	strb	r2, [r3, #0]
 800ade8:	e785      	b.n	800acf6 <_dtoa_r+0x686>
 800adea:	2200      	movs	r2, #0
 800adec:	4bad      	ldr	r3, [pc, #692]	; (800b0a4 <_dtoa_r+0xa34>)
 800adee:	f7f6 fe23 	bl	8001a38 <__aeabi_dmul>
 800adf2:	2200      	movs	r2, #0
 800adf4:	2300      	movs	r3, #0
 800adf6:	0004      	movs	r4, r0
 800adf8:	000d      	movs	r5, r1
 800adfa:	f7f5 fb27 	bl	800044c <__aeabi_dcmpeq>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d09b      	beq.n	800ad3a <_dtoa_r+0x6ca>
 800ae02:	e7cf      	b.n	800ada4 <_dtoa_r+0x734>
 800ae04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae06:	2a00      	cmp	r2, #0
 800ae08:	d100      	bne.n	800ae0c <_dtoa_r+0x79c>
 800ae0a:	e082      	b.n	800af12 <_dtoa_r+0x8a2>
 800ae0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ae0e:	2a01      	cmp	r2, #1
 800ae10:	dc66      	bgt.n	800aee0 <_dtoa_r+0x870>
 800ae12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae14:	2a00      	cmp	r2, #0
 800ae16:	d05f      	beq.n	800aed8 <_dtoa_r+0x868>
 800ae18:	4aa3      	ldr	r2, [pc, #652]	; (800b0a8 <_dtoa_r+0xa38>)
 800ae1a:	189b      	adds	r3, r3, r2
 800ae1c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ae1e:	9c08      	ldr	r4, [sp, #32]
 800ae20:	9a08      	ldr	r2, [sp, #32]
 800ae22:	2101      	movs	r1, #1
 800ae24:	18d2      	adds	r2, r2, r3
 800ae26:	9208      	str	r2, [sp, #32]
 800ae28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae2a:	0038      	movs	r0, r7
 800ae2c:	18d3      	adds	r3, r2, r3
 800ae2e:	930d      	str	r3, [sp, #52]	; 0x34
 800ae30:	f000 fb4a 	bl	800b4c8 <__i2b>
 800ae34:	0005      	movs	r5, r0
 800ae36:	2c00      	cmp	r4, #0
 800ae38:	dd0e      	ble.n	800ae58 <_dtoa_r+0x7e8>
 800ae3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	dd0b      	ble.n	800ae58 <_dtoa_r+0x7e8>
 800ae40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae42:	0023      	movs	r3, r4
 800ae44:	4294      	cmp	r4, r2
 800ae46:	dd00      	ble.n	800ae4a <_dtoa_r+0x7da>
 800ae48:	0013      	movs	r3, r2
 800ae4a:	9a08      	ldr	r2, [sp, #32]
 800ae4c:	1ae4      	subs	r4, r4, r3
 800ae4e:	1ad2      	subs	r2, r2, r3
 800ae50:	9208      	str	r2, [sp, #32]
 800ae52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	930d      	str	r3, [sp, #52]	; 0x34
 800ae58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d01f      	beq.n	800ae9e <_dtoa_r+0x82e>
 800ae5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d05a      	beq.n	800af1a <_dtoa_r+0x8aa>
 800ae64:	2e00      	cmp	r6, #0
 800ae66:	dd11      	ble.n	800ae8c <_dtoa_r+0x81c>
 800ae68:	0029      	movs	r1, r5
 800ae6a:	0032      	movs	r2, r6
 800ae6c:	0038      	movs	r0, r7
 800ae6e:	f000 fbf1 	bl	800b654 <__pow5mult>
 800ae72:	9a04      	ldr	r2, [sp, #16]
 800ae74:	0001      	movs	r1, r0
 800ae76:	0005      	movs	r5, r0
 800ae78:	0038      	movs	r0, r7
 800ae7a:	f000 fb3b 	bl	800b4f4 <__multiply>
 800ae7e:	9904      	ldr	r1, [sp, #16]
 800ae80:	9007      	str	r0, [sp, #28]
 800ae82:	0038      	movs	r0, r7
 800ae84:	f000 fa70 	bl	800b368 <_Bfree>
 800ae88:	9b07      	ldr	r3, [sp, #28]
 800ae8a:	9304      	str	r3, [sp, #16]
 800ae8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae8e:	1b9a      	subs	r2, r3, r6
 800ae90:	42b3      	cmp	r3, r6
 800ae92:	d004      	beq.n	800ae9e <_dtoa_r+0x82e>
 800ae94:	0038      	movs	r0, r7
 800ae96:	9904      	ldr	r1, [sp, #16]
 800ae98:	f000 fbdc 	bl	800b654 <__pow5mult>
 800ae9c:	9004      	str	r0, [sp, #16]
 800ae9e:	2101      	movs	r1, #1
 800aea0:	0038      	movs	r0, r7
 800aea2:	f000 fb11 	bl	800b4c8 <__i2b>
 800aea6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aea8:	0006      	movs	r6, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	dd37      	ble.n	800af1e <_dtoa_r+0x8ae>
 800aeae:	001a      	movs	r2, r3
 800aeb0:	0001      	movs	r1, r0
 800aeb2:	0038      	movs	r0, r7
 800aeb4:	f000 fbce 	bl	800b654 <__pow5mult>
 800aeb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aeba:	0006      	movs	r6, r0
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	dd33      	ble.n	800af28 <_dtoa_r+0x8b8>
 800aec0:	2300      	movs	r3, #0
 800aec2:	9307      	str	r3, [sp, #28]
 800aec4:	6933      	ldr	r3, [r6, #16]
 800aec6:	3303      	adds	r3, #3
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	18f3      	adds	r3, r6, r3
 800aecc:	6858      	ldr	r0, [r3, #4]
 800aece:	f000 fab3 	bl	800b438 <__hi0bits>
 800aed2:	2320      	movs	r3, #32
 800aed4:	1a18      	subs	r0, r3, r0
 800aed6:	e03f      	b.n	800af58 <_dtoa_r+0x8e8>
 800aed8:	2336      	movs	r3, #54	; 0x36
 800aeda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aedc:	1a9b      	subs	r3, r3, r2
 800aede:	e79d      	b.n	800ae1c <_dtoa_r+0x7ac>
 800aee0:	9b06      	ldr	r3, [sp, #24]
 800aee2:	1e5e      	subs	r6, r3, #1
 800aee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aee6:	42b3      	cmp	r3, r6
 800aee8:	db08      	blt.n	800aefc <_dtoa_r+0x88c>
 800aeea:	1b9e      	subs	r6, r3, r6
 800aeec:	9b06      	ldr	r3, [sp, #24]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	da0c      	bge.n	800af0c <_dtoa_r+0x89c>
 800aef2:	9b08      	ldr	r3, [sp, #32]
 800aef4:	9a06      	ldr	r2, [sp, #24]
 800aef6:	1a9c      	subs	r4, r3, r2
 800aef8:	2300      	movs	r3, #0
 800aefa:	e791      	b.n	800ae20 <_dtoa_r+0x7b0>
 800aefc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aefe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af00:	1af3      	subs	r3, r6, r3
 800af02:	18d3      	adds	r3, r2, r3
 800af04:	960e      	str	r6, [sp, #56]	; 0x38
 800af06:	9314      	str	r3, [sp, #80]	; 0x50
 800af08:	2600      	movs	r6, #0
 800af0a:	e7ef      	b.n	800aeec <_dtoa_r+0x87c>
 800af0c:	9c08      	ldr	r4, [sp, #32]
 800af0e:	9b06      	ldr	r3, [sp, #24]
 800af10:	e786      	b.n	800ae20 <_dtoa_r+0x7b0>
 800af12:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800af14:	9c08      	ldr	r4, [sp, #32]
 800af16:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800af18:	e78d      	b.n	800ae36 <_dtoa_r+0x7c6>
 800af1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af1c:	e7ba      	b.n	800ae94 <_dtoa_r+0x824>
 800af1e:	2300      	movs	r3, #0
 800af20:	9307      	str	r3, [sp, #28]
 800af22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af24:	2b01      	cmp	r3, #1
 800af26:	dc13      	bgt.n	800af50 <_dtoa_r+0x8e0>
 800af28:	2300      	movs	r3, #0
 800af2a:	9307      	str	r3, [sp, #28]
 800af2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10e      	bne.n	800af50 <_dtoa_r+0x8e0>
 800af32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af34:	031b      	lsls	r3, r3, #12
 800af36:	d10b      	bne.n	800af50 <_dtoa_r+0x8e0>
 800af38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800af3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af3c:	4213      	tst	r3, r2
 800af3e:	d007      	beq.n	800af50 <_dtoa_r+0x8e0>
 800af40:	9b08      	ldr	r3, [sp, #32]
 800af42:	3301      	adds	r3, #1
 800af44:	9308      	str	r3, [sp, #32]
 800af46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af48:	3301      	adds	r3, #1
 800af4a:	930d      	str	r3, [sp, #52]	; 0x34
 800af4c:	2301      	movs	r3, #1
 800af4e:	9307      	str	r3, [sp, #28]
 800af50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af52:	2001      	movs	r0, #1
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1b5      	bne.n	800aec4 <_dtoa_r+0x854>
 800af58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af5a:	221f      	movs	r2, #31
 800af5c:	1818      	adds	r0, r3, r0
 800af5e:	0003      	movs	r3, r0
 800af60:	4013      	ands	r3, r2
 800af62:	4210      	tst	r0, r2
 800af64:	d046      	beq.n	800aff4 <_dtoa_r+0x984>
 800af66:	3201      	adds	r2, #1
 800af68:	1ad2      	subs	r2, r2, r3
 800af6a:	2a04      	cmp	r2, #4
 800af6c:	dd3f      	ble.n	800afee <_dtoa_r+0x97e>
 800af6e:	221c      	movs	r2, #28
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	9a08      	ldr	r2, [sp, #32]
 800af74:	18e4      	adds	r4, r4, r3
 800af76:	18d2      	adds	r2, r2, r3
 800af78:	9208      	str	r2, [sp, #32]
 800af7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af7c:	18d3      	adds	r3, r2, r3
 800af7e:	930d      	str	r3, [sp, #52]	; 0x34
 800af80:	9b08      	ldr	r3, [sp, #32]
 800af82:	2b00      	cmp	r3, #0
 800af84:	dd05      	ble.n	800af92 <_dtoa_r+0x922>
 800af86:	001a      	movs	r2, r3
 800af88:	0038      	movs	r0, r7
 800af8a:	9904      	ldr	r1, [sp, #16]
 800af8c:	f000 fbbe 	bl	800b70c <__lshift>
 800af90:	9004      	str	r0, [sp, #16]
 800af92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af94:	2b00      	cmp	r3, #0
 800af96:	dd05      	ble.n	800afa4 <_dtoa_r+0x934>
 800af98:	0031      	movs	r1, r6
 800af9a:	001a      	movs	r2, r3
 800af9c:	0038      	movs	r0, r7
 800af9e:	f000 fbb5 	bl	800b70c <__lshift>
 800afa2:	0006      	movs	r6, r0
 800afa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d026      	beq.n	800aff8 <_dtoa_r+0x988>
 800afaa:	0031      	movs	r1, r6
 800afac:	9804      	ldr	r0, [sp, #16]
 800afae:	f000 fc1d 	bl	800b7ec <__mcmp>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	da20      	bge.n	800aff8 <_dtoa_r+0x988>
 800afb6:	9b02      	ldr	r3, [sp, #8]
 800afb8:	220a      	movs	r2, #10
 800afba:	3b01      	subs	r3, #1
 800afbc:	9302      	str	r3, [sp, #8]
 800afbe:	0038      	movs	r0, r7
 800afc0:	2300      	movs	r3, #0
 800afc2:	9904      	ldr	r1, [sp, #16]
 800afc4:	f000 f9f4 	bl	800b3b0 <__multadd>
 800afc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afca:	9004      	str	r0, [sp, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d100      	bne.n	800afd2 <_dtoa_r+0x962>
 800afd0:	e160      	b.n	800b294 <_dtoa_r+0xc24>
 800afd2:	2300      	movs	r3, #0
 800afd4:	0029      	movs	r1, r5
 800afd6:	220a      	movs	r2, #10
 800afd8:	0038      	movs	r0, r7
 800afda:	f000 f9e9 	bl	800b3b0 <__multadd>
 800afde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afe0:	0005      	movs	r5, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dc47      	bgt.n	800b076 <_dtoa_r+0xa06>
 800afe6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afe8:	2b02      	cmp	r3, #2
 800afea:	dc0d      	bgt.n	800b008 <_dtoa_r+0x998>
 800afec:	e043      	b.n	800b076 <_dtoa_r+0xa06>
 800afee:	2a04      	cmp	r2, #4
 800aff0:	d0c6      	beq.n	800af80 <_dtoa_r+0x910>
 800aff2:	0013      	movs	r3, r2
 800aff4:	331c      	adds	r3, #28
 800aff6:	e7bc      	b.n	800af72 <_dtoa_r+0x902>
 800aff8:	9b06      	ldr	r3, [sp, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	dc35      	bgt.n	800b06a <_dtoa_r+0x9fa>
 800affe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b000:	2b02      	cmp	r3, #2
 800b002:	dd32      	ble.n	800b06a <_dtoa_r+0x9fa>
 800b004:	9b06      	ldr	r3, [sp, #24]
 800b006:	930c      	str	r3, [sp, #48]	; 0x30
 800b008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10c      	bne.n	800b028 <_dtoa_r+0x9b8>
 800b00e:	0031      	movs	r1, r6
 800b010:	2205      	movs	r2, #5
 800b012:	0038      	movs	r0, r7
 800b014:	f000 f9cc 	bl	800b3b0 <__multadd>
 800b018:	0006      	movs	r6, r0
 800b01a:	0001      	movs	r1, r0
 800b01c:	9804      	ldr	r0, [sp, #16]
 800b01e:	f000 fbe5 	bl	800b7ec <__mcmp>
 800b022:	2800      	cmp	r0, #0
 800b024:	dd00      	ble.n	800b028 <_dtoa_r+0x9b8>
 800b026:	e59f      	b.n	800ab68 <_dtoa_r+0x4f8>
 800b028:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b02a:	43db      	mvns	r3, r3
 800b02c:	9302      	str	r3, [sp, #8]
 800b02e:	9b05      	ldr	r3, [sp, #20]
 800b030:	9307      	str	r3, [sp, #28]
 800b032:	2400      	movs	r4, #0
 800b034:	0031      	movs	r1, r6
 800b036:	0038      	movs	r0, r7
 800b038:	f000 f996 	bl	800b368 <_Bfree>
 800b03c:	2d00      	cmp	r5, #0
 800b03e:	d100      	bne.n	800b042 <_dtoa_r+0x9d2>
 800b040:	e6b0      	b.n	800ada4 <_dtoa_r+0x734>
 800b042:	2c00      	cmp	r4, #0
 800b044:	d005      	beq.n	800b052 <_dtoa_r+0x9e2>
 800b046:	42ac      	cmp	r4, r5
 800b048:	d003      	beq.n	800b052 <_dtoa_r+0x9e2>
 800b04a:	0021      	movs	r1, r4
 800b04c:	0038      	movs	r0, r7
 800b04e:	f000 f98b 	bl	800b368 <_Bfree>
 800b052:	0029      	movs	r1, r5
 800b054:	0038      	movs	r0, r7
 800b056:	f000 f987 	bl	800b368 <_Bfree>
 800b05a:	e6a3      	b.n	800ada4 <_dtoa_r+0x734>
 800b05c:	2600      	movs	r6, #0
 800b05e:	0035      	movs	r5, r6
 800b060:	e7e2      	b.n	800b028 <_dtoa_r+0x9b8>
 800b062:	9602      	str	r6, [sp, #8]
 800b064:	9e07      	ldr	r6, [sp, #28]
 800b066:	0035      	movs	r5, r6
 800b068:	e57e      	b.n	800ab68 <_dtoa_r+0x4f8>
 800b06a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d100      	bne.n	800b072 <_dtoa_r+0xa02>
 800b070:	e0c8      	b.n	800b204 <_dtoa_r+0xb94>
 800b072:	9b06      	ldr	r3, [sp, #24]
 800b074:	930c      	str	r3, [sp, #48]	; 0x30
 800b076:	2c00      	cmp	r4, #0
 800b078:	dd05      	ble.n	800b086 <_dtoa_r+0xa16>
 800b07a:	0029      	movs	r1, r5
 800b07c:	0022      	movs	r2, r4
 800b07e:	0038      	movs	r0, r7
 800b080:	f000 fb44 	bl	800b70c <__lshift>
 800b084:	0005      	movs	r5, r0
 800b086:	9b07      	ldr	r3, [sp, #28]
 800b088:	0028      	movs	r0, r5
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d01f      	beq.n	800b0ce <_dtoa_r+0xa5e>
 800b08e:	0038      	movs	r0, r7
 800b090:	6869      	ldr	r1, [r5, #4]
 800b092:	f000 f925 	bl	800b2e0 <_Balloc>
 800b096:	1e04      	subs	r4, r0, #0
 800b098:	d10c      	bne.n	800b0b4 <_dtoa_r+0xa44>
 800b09a:	0002      	movs	r2, r0
 800b09c:	4b03      	ldr	r3, [pc, #12]	; (800b0ac <_dtoa_r+0xa3c>)
 800b09e:	4904      	ldr	r1, [pc, #16]	; (800b0b0 <_dtoa_r+0xa40>)
 800b0a0:	f7ff fafb 	bl	800a69a <_dtoa_r+0x2a>
 800b0a4:	40240000 	.word	0x40240000
 800b0a8:	00000433 	.word	0x00000433
 800b0ac:	0800da6f 	.word	0x0800da6f
 800b0b0:	000002ea 	.word	0x000002ea
 800b0b4:	0029      	movs	r1, r5
 800b0b6:	692b      	ldr	r3, [r5, #16]
 800b0b8:	310c      	adds	r1, #12
 800b0ba:	1c9a      	adds	r2, r3, #2
 800b0bc:	0092      	lsls	r2, r2, #2
 800b0be:	300c      	adds	r0, #12
 800b0c0:	f7fe fd88 	bl	8009bd4 <memcpy>
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	0021      	movs	r1, r4
 800b0c8:	0038      	movs	r0, r7
 800b0ca:	f000 fb1f 	bl	800b70c <__lshift>
 800b0ce:	002c      	movs	r4, r5
 800b0d0:	0005      	movs	r5, r0
 800b0d2:	9b05      	ldr	r3, [sp, #20]
 800b0d4:	9308      	str	r3, [sp, #32]
 800b0d6:	0031      	movs	r1, r6
 800b0d8:	9804      	ldr	r0, [sp, #16]
 800b0da:	f7ff fa3d 	bl	800a558 <quorem>
 800b0de:	0003      	movs	r3, r0
 800b0e0:	0021      	movs	r1, r4
 800b0e2:	3330      	adds	r3, #48	; 0x30
 800b0e4:	900e      	str	r0, [sp, #56]	; 0x38
 800b0e6:	9804      	ldr	r0, [sp, #16]
 800b0e8:	9306      	str	r3, [sp, #24]
 800b0ea:	f000 fb7f 	bl	800b7ec <__mcmp>
 800b0ee:	002a      	movs	r2, r5
 800b0f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800b0f2:	0031      	movs	r1, r6
 800b0f4:	0038      	movs	r0, r7
 800b0f6:	f000 fb95 	bl	800b824 <__mdiff>
 800b0fa:	68c3      	ldr	r3, [r0, #12]
 800b0fc:	9007      	str	r0, [sp, #28]
 800b0fe:	9310      	str	r3, [sp, #64]	; 0x40
 800b100:	2301      	movs	r3, #1
 800b102:	930d      	str	r3, [sp, #52]	; 0x34
 800b104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b106:	2b00      	cmp	r3, #0
 800b108:	d104      	bne.n	800b114 <_dtoa_r+0xaa4>
 800b10a:	0001      	movs	r1, r0
 800b10c:	9804      	ldr	r0, [sp, #16]
 800b10e:	f000 fb6d 	bl	800b7ec <__mcmp>
 800b112:	900d      	str	r0, [sp, #52]	; 0x34
 800b114:	0038      	movs	r0, r7
 800b116:	9907      	ldr	r1, [sp, #28]
 800b118:	f000 f926 	bl	800b368 <_Bfree>
 800b11c:	2301      	movs	r3, #1
 800b11e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b120:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b122:	4018      	ands	r0, r3
 800b124:	9b08      	ldr	r3, [sp, #32]
 800b126:	3301      	adds	r3, #1
 800b128:	9307      	str	r3, [sp, #28]
 800b12a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b12c:	4313      	orrs	r3, r2
 800b12e:	4303      	orrs	r3, r0
 800b130:	d10c      	bne.n	800b14c <_dtoa_r+0xadc>
 800b132:	9b06      	ldr	r3, [sp, #24]
 800b134:	2b39      	cmp	r3, #57	; 0x39
 800b136:	d025      	beq.n	800b184 <_dtoa_r+0xb14>
 800b138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dd02      	ble.n	800b144 <_dtoa_r+0xad4>
 800b13e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b140:	3331      	adds	r3, #49	; 0x31
 800b142:	9306      	str	r3, [sp, #24]
 800b144:	9b08      	ldr	r3, [sp, #32]
 800b146:	9a06      	ldr	r2, [sp, #24]
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	e773      	b.n	800b034 <_dtoa_r+0x9c4>
 800b14c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	db03      	blt.n	800b15a <_dtoa_r+0xaea>
 800b152:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b154:	4313      	orrs	r3, r2
 800b156:	4303      	orrs	r3, r0
 800b158:	d11f      	bne.n	800b19a <_dtoa_r+0xb2a>
 800b15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	ddf1      	ble.n	800b144 <_dtoa_r+0xad4>
 800b160:	9904      	ldr	r1, [sp, #16]
 800b162:	2201      	movs	r2, #1
 800b164:	0038      	movs	r0, r7
 800b166:	f000 fad1 	bl	800b70c <__lshift>
 800b16a:	0031      	movs	r1, r6
 800b16c:	9004      	str	r0, [sp, #16]
 800b16e:	f000 fb3d 	bl	800b7ec <__mcmp>
 800b172:	2800      	cmp	r0, #0
 800b174:	dc03      	bgt.n	800b17e <_dtoa_r+0xb0e>
 800b176:	d1e5      	bne.n	800b144 <_dtoa_r+0xad4>
 800b178:	9b06      	ldr	r3, [sp, #24]
 800b17a:	07db      	lsls	r3, r3, #31
 800b17c:	d5e2      	bpl.n	800b144 <_dtoa_r+0xad4>
 800b17e:	9b06      	ldr	r3, [sp, #24]
 800b180:	2b39      	cmp	r3, #57	; 0x39
 800b182:	d1dc      	bne.n	800b13e <_dtoa_r+0xace>
 800b184:	2339      	movs	r3, #57	; 0x39
 800b186:	9a08      	ldr	r2, [sp, #32]
 800b188:	7013      	strb	r3, [r2, #0]
 800b18a:	9b07      	ldr	r3, [sp, #28]
 800b18c:	9307      	str	r3, [sp, #28]
 800b18e:	3b01      	subs	r3, #1
 800b190:	781a      	ldrb	r2, [r3, #0]
 800b192:	2a39      	cmp	r2, #57	; 0x39
 800b194:	d06c      	beq.n	800b270 <_dtoa_r+0xc00>
 800b196:	3201      	adds	r2, #1
 800b198:	e7d6      	b.n	800b148 <_dtoa_r+0xad8>
 800b19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	dd07      	ble.n	800b1b0 <_dtoa_r+0xb40>
 800b1a0:	9b06      	ldr	r3, [sp, #24]
 800b1a2:	2b39      	cmp	r3, #57	; 0x39
 800b1a4:	d0ee      	beq.n	800b184 <_dtoa_r+0xb14>
 800b1a6:	9b06      	ldr	r3, [sp, #24]
 800b1a8:	9a08      	ldr	r2, [sp, #32]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	7013      	strb	r3, [r2, #0]
 800b1ae:	e741      	b.n	800b034 <_dtoa_r+0x9c4>
 800b1b0:	9b08      	ldr	r3, [sp, #32]
 800b1b2:	9a06      	ldr	r2, [sp, #24]
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	9a05      	ldr	r2, [sp, #20]
 800b1ba:	1a9b      	subs	r3, r3, r2
 800b1bc:	9a08      	ldr	r2, [sp, #32]
 800b1be:	189b      	adds	r3, r3, r2
 800b1c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d03e      	beq.n	800b244 <_dtoa_r+0xbd4>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	220a      	movs	r2, #10
 800b1ca:	9904      	ldr	r1, [sp, #16]
 800b1cc:	0038      	movs	r0, r7
 800b1ce:	f000 f8ef 	bl	800b3b0 <__multadd>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9004      	str	r0, [sp, #16]
 800b1d6:	220a      	movs	r2, #10
 800b1d8:	0021      	movs	r1, r4
 800b1da:	0038      	movs	r0, r7
 800b1dc:	42ac      	cmp	r4, r5
 800b1de:	d106      	bne.n	800b1ee <_dtoa_r+0xb7e>
 800b1e0:	f000 f8e6 	bl	800b3b0 <__multadd>
 800b1e4:	0004      	movs	r4, r0
 800b1e6:	0005      	movs	r5, r0
 800b1e8:	9b07      	ldr	r3, [sp, #28]
 800b1ea:	9308      	str	r3, [sp, #32]
 800b1ec:	e773      	b.n	800b0d6 <_dtoa_r+0xa66>
 800b1ee:	f000 f8df 	bl	800b3b0 <__multadd>
 800b1f2:	0029      	movs	r1, r5
 800b1f4:	0004      	movs	r4, r0
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	220a      	movs	r2, #10
 800b1fa:	0038      	movs	r0, r7
 800b1fc:	f000 f8d8 	bl	800b3b0 <__multadd>
 800b200:	0005      	movs	r5, r0
 800b202:	e7f1      	b.n	800b1e8 <_dtoa_r+0xb78>
 800b204:	9b06      	ldr	r3, [sp, #24]
 800b206:	930c      	str	r3, [sp, #48]	; 0x30
 800b208:	2400      	movs	r4, #0
 800b20a:	0031      	movs	r1, r6
 800b20c:	9804      	ldr	r0, [sp, #16]
 800b20e:	f7ff f9a3 	bl	800a558 <quorem>
 800b212:	9b05      	ldr	r3, [sp, #20]
 800b214:	3030      	adds	r0, #48	; 0x30
 800b216:	5518      	strb	r0, [r3, r4]
 800b218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b21a:	3401      	adds	r4, #1
 800b21c:	9006      	str	r0, [sp, #24]
 800b21e:	42a3      	cmp	r3, r4
 800b220:	dd07      	ble.n	800b232 <_dtoa_r+0xbc2>
 800b222:	2300      	movs	r3, #0
 800b224:	220a      	movs	r2, #10
 800b226:	0038      	movs	r0, r7
 800b228:	9904      	ldr	r1, [sp, #16]
 800b22a:	f000 f8c1 	bl	800b3b0 <__multadd>
 800b22e:	9004      	str	r0, [sp, #16]
 800b230:	e7eb      	b.n	800b20a <_dtoa_r+0xb9a>
 800b232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b234:	2001      	movs	r0, #1
 800b236:	2b00      	cmp	r3, #0
 800b238:	dd00      	ble.n	800b23c <_dtoa_r+0xbcc>
 800b23a:	0018      	movs	r0, r3
 800b23c:	2400      	movs	r4, #0
 800b23e:	9b05      	ldr	r3, [sp, #20]
 800b240:	181b      	adds	r3, r3, r0
 800b242:	9307      	str	r3, [sp, #28]
 800b244:	9904      	ldr	r1, [sp, #16]
 800b246:	2201      	movs	r2, #1
 800b248:	0038      	movs	r0, r7
 800b24a:	f000 fa5f 	bl	800b70c <__lshift>
 800b24e:	0031      	movs	r1, r6
 800b250:	9004      	str	r0, [sp, #16]
 800b252:	f000 facb 	bl	800b7ec <__mcmp>
 800b256:	2800      	cmp	r0, #0
 800b258:	dc97      	bgt.n	800b18a <_dtoa_r+0xb1a>
 800b25a:	d102      	bne.n	800b262 <_dtoa_r+0xbf2>
 800b25c:	9b06      	ldr	r3, [sp, #24]
 800b25e:	07db      	lsls	r3, r3, #31
 800b260:	d493      	bmi.n	800b18a <_dtoa_r+0xb1a>
 800b262:	9b07      	ldr	r3, [sp, #28]
 800b264:	9307      	str	r3, [sp, #28]
 800b266:	3b01      	subs	r3, #1
 800b268:	781a      	ldrb	r2, [r3, #0]
 800b26a:	2a30      	cmp	r2, #48	; 0x30
 800b26c:	d0fa      	beq.n	800b264 <_dtoa_r+0xbf4>
 800b26e:	e6e1      	b.n	800b034 <_dtoa_r+0x9c4>
 800b270:	9a05      	ldr	r2, [sp, #20]
 800b272:	429a      	cmp	r2, r3
 800b274:	d18a      	bne.n	800b18c <_dtoa_r+0xb1c>
 800b276:	9b02      	ldr	r3, [sp, #8]
 800b278:	3301      	adds	r3, #1
 800b27a:	9302      	str	r3, [sp, #8]
 800b27c:	2331      	movs	r3, #49	; 0x31
 800b27e:	e795      	b.n	800b1ac <_dtoa_r+0xb3c>
 800b280:	4b08      	ldr	r3, [pc, #32]	; (800b2a4 <_dtoa_r+0xc34>)
 800b282:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b284:	9305      	str	r3, [sp, #20]
 800b286:	4b08      	ldr	r3, [pc, #32]	; (800b2a8 <_dtoa_r+0xc38>)
 800b288:	2a00      	cmp	r2, #0
 800b28a:	d001      	beq.n	800b290 <_dtoa_r+0xc20>
 800b28c:	f7ff fa3b 	bl	800a706 <_dtoa_r+0x96>
 800b290:	f7ff fa3b 	bl	800a70a <_dtoa_r+0x9a>
 800b294:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b296:	2b00      	cmp	r3, #0
 800b298:	dcb6      	bgt.n	800b208 <_dtoa_r+0xb98>
 800b29a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	dd00      	ble.n	800b2a2 <_dtoa_r+0xc32>
 800b2a0:	e6b2      	b.n	800b008 <_dtoa_r+0x998>
 800b2a2:	e7b1      	b.n	800b208 <_dtoa_r+0xb98>
 800b2a4:	0800d9ec 	.word	0x0800d9ec
 800b2a8:	0800d9f4 	.word	0x0800d9f4

0800b2ac <_localeconv_r>:
 800b2ac:	4800      	ldr	r0, [pc, #0]	; (800b2b0 <_localeconv_r+0x4>)
 800b2ae:	4770      	bx	lr
 800b2b0:	20000190 	.word	0x20000190

0800b2b4 <malloc>:
 800b2b4:	b510      	push	{r4, lr}
 800b2b6:	4b03      	ldr	r3, [pc, #12]	; (800b2c4 <malloc+0x10>)
 800b2b8:	0001      	movs	r1, r0
 800b2ba:	6818      	ldr	r0, [r3, #0]
 800b2bc:	f000 fc06 	bl	800bacc <_malloc_r>
 800b2c0:	bd10      	pop	{r4, pc}
 800b2c2:	46c0      	nop			; (mov r8, r8)
 800b2c4:	2000003c 	.word	0x2000003c

0800b2c8 <memchr>:
 800b2c8:	b2c9      	uxtb	r1, r1
 800b2ca:	1882      	adds	r2, r0, r2
 800b2cc:	4290      	cmp	r0, r2
 800b2ce:	d101      	bne.n	800b2d4 <memchr+0xc>
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	4770      	bx	lr
 800b2d4:	7803      	ldrb	r3, [r0, #0]
 800b2d6:	428b      	cmp	r3, r1
 800b2d8:	d0fb      	beq.n	800b2d2 <memchr+0xa>
 800b2da:	3001      	adds	r0, #1
 800b2dc:	e7f6      	b.n	800b2cc <memchr+0x4>
	...

0800b2e0 <_Balloc>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b2e4:	0006      	movs	r6, r0
 800b2e6:	000c      	movs	r4, r1
 800b2e8:	2d00      	cmp	r5, #0
 800b2ea:	d10e      	bne.n	800b30a <_Balloc+0x2a>
 800b2ec:	2010      	movs	r0, #16
 800b2ee:	f7ff ffe1 	bl	800b2b4 <malloc>
 800b2f2:	1e02      	subs	r2, r0, #0
 800b2f4:	6270      	str	r0, [r6, #36]	; 0x24
 800b2f6:	d104      	bne.n	800b302 <_Balloc+0x22>
 800b2f8:	2166      	movs	r1, #102	; 0x66
 800b2fa:	4b19      	ldr	r3, [pc, #100]	; (800b360 <_Balloc+0x80>)
 800b2fc:	4819      	ldr	r0, [pc, #100]	; (800b364 <_Balloc+0x84>)
 800b2fe:	f000 fdb7 	bl	800be70 <__assert_func>
 800b302:	6045      	str	r5, [r0, #4]
 800b304:	6085      	str	r5, [r0, #8]
 800b306:	6005      	str	r5, [r0, #0]
 800b308:	60c5      	str	r5, [r0, #12]
 800b30a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800b30c:	68eb      	ldr	r3, [r5, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d013      	beq.n	800b33a <_Balloc+0x5a>
 800b312:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b314:	00a2      	lsls	r2, r4, #2
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	189b      	adds	r3, r3, r2
 800b31a:	6818      	ldr	r0, [r3, #0]
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d118      	bne.n	800b352 <_Balloc+0x72>
 800b320:	2101      	movs	r1, #1
 800b322:	000d      	movs	r5, r1
 800b324:	40a5      	lsls	r5, r4
 800b326:	1d6a      	adds	r2, r5, #5
 800b328:	0030      	movs	r0, r6
 800b32a:	0092      	lsls	r2, r2, #2
 800b32c:	f000 fb76 	bl	800ba1c <_calloc_r>
 800b330:	2800      	cmp	r0, #0
 800b332:	d00c      	beq.n	800b34e <_Balloc+0x6e>
 800b334:	6044      	str	r4, [r0, #4]
 800b336:	6085      	str	r5, [r0, #8]
 800b338:	e00d      	b.n	800b356 <_Balloc+0x76>
 800b33a:	2221      	movs	r2, #33	; 0x21
 800b33c:	2104      	movs	r1, #4
 800b33e:	0030      	movs	r0, r6
 800b340:	f000 fb6c 	bl	800ba1c <_calloc_r>
 800b344:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b346:	60e8      	str	r0, [r5, #12]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1e1      	bne.n	800b312 <_Balloc+0x32>
 800b34e:	2000      	movs	r0, #0
 800b350:	bd70      	pop	{r4, r5, r6, pc}
 800b352:	6802      	ldr	r2, [r0, #0]
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	2300      	movs	r3, #0
 800b358:	6103      	str	r3, [r0, #16]
 800b35a:	60c3      	str	r3, [r0, #12]
 800b35c:	e7f8      	b.n	800b350 <_Balloc+0x70>
 800b35e:	46c0      	nop			; (mov r8, r8)
 800b360:	0800d9f9 	.word	0x0800d9f9
 800b364:	0800da80 	.word	0x0800da80

0800b368 <_Bfree>:
 800b368:	b570      	push	{r4, r5, r6, lr}
 800b36a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b36c:	0005      	movs	r5, r0
 800b36e:	000c      	movs	r4, r1
 800b370:	2e00      	cmp	r6, #0
 800b372:	d10e      	bne.n	800b392 <_Bfree+0x2a>
 800b374:	2010      	movs	r0, #16
 800b376:	f7ff ff9d 	bl	800b2b4 <malloc>
 800b37a:	1e02      	subs	r2, r0, #0
 800b37c:	6268      	str	r0, [r5, #36]	; 0x24
 800b37e:	d104      	bne.n	800b38a <_Bfree+0x22>
 800b380:	218a      	movs	r1, #138	; 0x8a
 800b382:	4b09      	ldr	r3, [pc, #36]	; (800b3a8 <_Bfree+0x40>)
 800b384:	4809      	ldr	r0, [pc, #36]	; (800b3ac <_Bfree+0x44>)
 800b386:	f000 fd73 	bl	800be70 <__assert_func>
 800b38a:	6046      	str	r6, [r0, #4]
 800b38c:	6086      	str	r6, [r0, #8]
 800b38e:	6006      	str	r6, [r0, #0]
 800b390:	60c6      	str	r6, [r0, #12]
 800b392:	2c00      	cmp	r4, #0
 800b394:	d007      	beq.n	800b3a6 <_Bfree+0x3e>
 800b396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b398:	6862      	ldr	r2, [r4, #4]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	0092      	lsls	r2, r2, #2
 800b39e:	189b      	adds	r3, r3, r2
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	6022      	str	r2, [r4, #0]
 800b3a4:	601c      	str	r4, [r3, #0]
 800b3a6:	bd70      	pop	{r4, r5, r6, pc}
 800b3a8:	0800d9f9 	.word	0x0800d9f9
 800b3ac:	0800da80 	.word	0x0800da80

0800b3b0 <__multadd>:
 800b3b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3b2:	000e      	movs	r6, r1
 800b3b4:	9001      	str	r0, [sp, #4]
 800b3b6:	000c      	movs	r4, r1
 800b3b8:	001d      	movs	r5, r3
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	690f      	ldr	r7, [r1, #16]
 800b3be:	3614      	adds	r6, #20
 800b3c0:	6833      	ldr	r3, [r6, #0]
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	b299      	uxth	r1, r3
 800b3c6:	4351      	muls	r1, r2
 800b3c8:	0c1b      	lsrs	r3, r3, #16
 800b3ca:	4353      	muls	r3, r2
 800b3cc:	1949      	adds	r1, r1, r5
 800b3ce:	0c0d      	lsrs	r5, r1, #16
 800b3d0:	195b      	adds	r3, r3, r5
 800b3d2:	0c1d      	lsrs	r5, r3, #16
 800b3d4:	b289      	uxth	r1, r1
 800b3d6:	041b      	lsls	r3, r3, #16
 800b3d8:	185b      	adds	r3, r3, r1
 800b3da:	c608      	stmia	r6!, {r3}
 800b3dc:	4287      	cmp	r7, r0
 800b3de:	dcef      	bgt.n	800b3c0 <__multadd+0x10>
 800b3e0:	2d00      	cmp	r5, #0
 800b3e2:	d022      	beq.n	800b42a <__multadd+0x7a>
 800b3e4:	68a3      	ldr	r3, [r4, #8]
 800b3e6:	42bb      	cmp	r3, r7
 800b3e8:	dc19      	bgt.n	800b41e <__multadd+0x6e>
 800b3ea:	6863      	ldr	r3, [r4, #4]
 800b3ec:	9801      	ldr	r0, [sp, #4]
 800b3ee:	1c59      	adds	r1, r3, #1
 800b3f0:	f7ff ff76 	bl	800b2e0 <_Balloc>
 800b3f4:	1e06      	subs	r6, r0, #0
 800b3f6:	d105      	bne.n	800b404 <__multadd+0x54>
 800b3f8:	0002      	movs	r2, r0
 800b3fa:	21b5      	movs	r1, #181	; 0xb5
 800b3fc:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <__multadd+0x80>)
 800b3fe:	480d      	ldr	r0, [pc, #52]	; (800b434 <__multadd+0x84>)
 800b400:	f000 fd36 	bl	800be70 <__assert_func>
 800b404:	0021      	movs	r1, r4
 800b406:	6923      	ldr	r3, [r4, #16]
 800b408:	310c      	adds	r1, #12
 800b40a:	1c9a      	adds	r2, r3, #2
 800b40c:	0092      	lsls	r2, r2, #2
 800b40e:	300c      	adds	r0, #12
 800b410:	f7fe fbe0 	bl	8009bd4 <memcpy>
 800b414:	0021      	movs	r1, r4
 800b416:	9801      	ldr	r0, [sp, #4]
 800b418:	f7ff ffa6 	bl	800b368 <_Bfree>
 800b41c:	0034      	movs	r4, r6
 800b41e:	1d3b      	adds	r3, r7, #4
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	18e3      	adds	r3, r4, r3
 800b424:	605d      	str	r5, [r3, #4]
 800b426:	1c7b      	adds	r3, r7, #1
 800b428:	6123      	str	r3, [r4, #16]
 800b42a:	0020      	movs	r0, r4
 800b42c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b42e:	46c0      	nop			; (mov r8, r8)
 800b430:	0800da6f 	.word	0x0800da6f
 800b434:	0800da80 	.word	0x0800da80

0800b438 <__hi0bits>:
 800b438:	0003      	movs	r3, r0
 800b43a:	0c02      	lsrs	r2, r0, #16
 800b43c:	2000      	movs	r0, #0
 800b43e:	4282      	cmp	r2, r0
 800b440:	d101      	bne.n	800b446 <__hi0bits+0xe>
 800b442:	041b      	lsls	r3, r3, #16
 800b444:	3010      	adds	r0, #16
 800b446:	0e1a      	lsrs	r2, r3, #24
 800b448:	d101      	bne.n	800b44e <__hi0bits+0x16>
 800b44a:	3008      	adds	r0, #8
 800b44c:	021b      	lsls	r3, r3, #8
 800b44e:	0f1a      	lsrs	r2, r3, #28
 800b450:	d101      	bne.n	800b456 <__hi0bits+0x1e>
 800b452:	3004      	adds	r0, #4
 800b454:	011b      	lsls	r3, r3, #4
 800b456:	0f9a      	lsrs	r2, r3, #30
 800b458:	d101      	bne.n	800b45e <__hi0bits+0x26>
 800b45a:	3002      	adds	r0, #2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	2b00      	cmp	r3, #0
 800b460:	db03      	blt.n	800b46a <__hi0bits+0x32>
 800b462:	3001      	adds	r0, #1
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	d400      	bmi.n	800b46a <__hi0bits+0x32>
 800b468:	2020      	movs	r0, #32
 800b46a:	4770      	bx	lr

0800b46c <__lo0bits>:
 800b46c:	6803      	ldr	r3, [r0, #0]
 800b46e:	0002      	movs	r2, r0
 800b470:	2107      	movs	r1, #7
 800b472:	0018      	movs	r0, r3
 800b474:	4008      	ands	r0, r1
 800b476:	420b      	tst	r3, r1
 800b478:	d00d      	beq.n	800b496 <__lo0bits+0x2a>
 800b47a:	3906      	subs	r1, #6
 800b47c:	2000      	movs	r0, #0
 800b47e:	420b      	tst	r3, r1
 800b480:	d105      	bne.n	800b48e <__lo0bits+0x22>
 800b482:	3002      	adds	r0, #2
 800b484:	4203      	tst	r3, r0
 800b486:	d003      	beq.n	800b490 <__lo0bits+0x24>
 800b488:	40cb      	lsrs	r3, r1
 800b48a:	0008      	movs	r0, r1
 800b48c:	6013      	str	r3, [r2, #0]
 800b48e:	4770      	bx	lr
 800b490:	089b      	lsrs	r3, r3, #2
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	e7fb      	b.n	800b48e <__lo0bits+0x22>
 800b496:	b299      	uxth	r1, r3
 800b498:	2900      	cmp	r1, #0
 800b49a:	d101      	bne.n	800b4a0 <__lo0bits+0x34>
 800b49c:	2010      	movs	r0, #16
 800b49e:	0c1b      	lsrs	r3, r3, #16
 800b4a0:	b2d9      	uxtb	r1, r3
 800b4a2:	2900      	cmp	r1, #0
 800b4a4:	d101      	bne.n	800b4aa <__lo0bits+0x3e>
 800b4a6:	3008      	adds	r0, #8
 800b4a8:	0a1b      	lsrs	r3, r3, #8
 800b4aa:	0719      	lsls	r1, r3, #28
 800b4ac:	d101      	bne.n	800b4b2 <__lo0bits+0x46>
 800b4ae:	3004      	adds	r0, #4
 800b4b0:	091b      	lsrs	r3, r3, #4
 800b4b2:	0799      	lsls	r1, r3, #30
 800b4b4:	d101      	bne.n	800b4ba <__lo0bits+0x4e>
 800b4b6:	3002      	adds	r0, #2
 800b4b8:	089b      	lsrs	r3, r3, #2
 800b4ba:	07d9      	lsls	r1, r3, #31
 800b4bc:	d4e9      	bmi.n	800b492 <__lo0bits+0x26>
 800b4be:	3001      	adds	r0, #1
 800b4c0:	085b      	lsrs	r3, r3, #1
 800b4c2:	d1e6      	bne.n	800b492 <__lo0bits+0x26>
 800b4c4:	2020      	movs	r0, #32
 800b4c6:	e7e2      	b.n	800b48e <__lo0bits+0x22>

0800b4c8 <__i2b>:
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	000c      	movs	r4, r1
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	f7ff ff07 	bl	800b2e0 <_Balloc>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d106      	bne.n	800b4e4 <__i2b+0x1c>
 800b4d6:	21a0      	movs	r1, #160	; 0xa0
 800b4d8:	0002      	movs	r2, r0
 800b4da:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <__i2b+0x24>)
 800b4dc:	4804      	ldr	r0, [pc, #16]	; (800b4f0 <__i2b+0x28>)
 800b4de:	0049      	lsls	r1, r1, #1
 800b4e0:	f000 fcc6 	bl	800be70 <__assert_func>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	6144      	str	r4, [r0, #20]
 800b4e8:	6103      	str	r3, [r0, #16]
 800b4ea:	bd10      	pop	{r4, pc}
 800b4ec:	0800da6f 	.word	0x0800da6f
 800b4f0:	0800da80 	.word	0x0800da80

0800b4f4 <__multiply>:
 800b4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4f6:	690b      	ldr	r3, [r1, #16]
 800b4f8:	0014      	movs	r4, r2
 800b4fa:	6912      	ldr	r2, [r2, #16]
 800b4fc:	000d      	movs	r5, r1
 800b4fe:	b089      	sub	sp, #36	; 0x24
 800b500:	4293      	cmp	r3, r2
 800b502:	da01      	bge.n	800b508 <__multiply+0x14>
 800b504:	0025      	movs	r5, r4
 800b506:	000c      	movs	r4, r1
 800b508:	692f      	ldr	r7, [r5, #16]
 800b50a:	6926      	ldr	r6, [r4, #16]
 800b50c:	6869      	ldr	r1, [r5, #4]
 800b50e:	19bb      	adds	r3, r7, r6
 800b510:	9302      	str	r3, [sp, #8]
 800b512:	68ab      	ldr	r3, [r5, #8]
 800b514:	19ba      	adds	r2, r7, r6
 800b516:	4293      	cmp	r3, r2
 800b518:	da00      	bge.n	800b51c <__multiply+0x28>
 800b51a:	3101      	adds	r1, #1
 800b51c:	f7ff fee0 	bl	800b2e0 <_Balloc>
 800b520:	9001      	str	r0, [sp, #4]
 800b522:	2800      	cmp	r0, #0
 800b524:	d106      	bne.n	800b534 <__multiply+0x40>
 800b526:	215e      	movs	r1, #94	; 0x5e
 800b528:	0002      	movs	r2, r0
 800b52a:	4b48      	ldr	r3, [pc, #288]	; (800b64c <__multiply+0x158>)
 800b52c:	4848      	ldr	r0, [pc, #288]	; (800b650 <__multiply+0x15c>)
 800b52e:	31ff      	adds	r1, #255	; 0xff
 800b530:	f000 fc9e 	bl	800be70 <__assert_func>
 800b534:	9b01      	ldr	r3, [sp, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	3314      	adds	r3, #20
 800b53a:	469c      	mov	ip, r3
 800b53c:	19bb      	adds	r3, r7, r6
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4463      	add	r3, ip
 800b542:	9303      	str	r3, [sp, #12]
 800b544:	4663      	mov	r3, ip
 800b546:	9903      	ldr	r1, [sp, #12]
 800b548:	428b      	cmp	r3, r1
 800b54a:	d32c      	bcc.n	800b5a6 <__multiply+0xb2>
 800b54c:	002b      	movs	r3, r5
 800b54e:	0022      	movs	r2, r4
 800b550:	3314      	adds	r3, #20
 800b552:	00bf      	lsls	r7, r7, #2
 800b554:	3214      	adds	r2, #20
 800b556:	9306      	str	r3, [sp, #24]
 800b558:	00b6      	lsls	r6, r6, #2
 800b55a:	19db      	adds	r3, r3, r7
 800b55c:	9304      	str	r3, [sp, #16]
 800b55e:	1993      	adds	r3, r2, r6
 800b560:	9307      	str	r3, [sp, #28]
 800b562:	2304      	movs	r3, #4
 800b564:	9305      	str	r3, [sp, #20]
 800b566:	002b      	movs	r3, r5
 800b568:	9904      	ldr	r1, [sp, #16]
 800b56a:	3315      	adds	r3, #21
 800b56c:	9200      	str	r2, [sp, #0]
 800b56e:	4299      	cmp	r1, r3
 800b570:	d305      	bcc.n	800b57e <__multiply+0x8a>
 800b572:	1b4b      	subs	r3, r1, r5
 800b574:	3b15      	subs	r3, #21
 800b576:	089b      	lsrs	r3, r3, #2
 800b578:	3301      	adds	r3, #1
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	9305      	str	r3, [sp, #20]
 800b57e:	9b07      	ldr	r3, [sp, #28]
 800b580:	9a00      	ldr	r2, [sp, #0]
 800b582:	429a      	cmp	r2, r3
 800b584:	d311      	bcc.n	800b5aa <__multiply+0xb6>
 800b586:	9b02      	ldr	r3, [sp, #8]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	dd06      	ble.n	800b59a <__multiply+0xa6>
 800b58c:	9b03      	ldr	r3, [sp, #12]
 800b58e:	3b04      	subs	r3, #4
 800b590:	9303      	str	r3, [sp, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d054      	beq.n	800b644 <__multiply+0x150>
 800b59a:	9b01      	ldr	r3, [sp, #4]
 800b59c:	9a02      	ldr	r2, [sp, #8]
 800b59e:	0018      	movs	r0, r3
 800b5a0:	611a      	str	r2, [r3, #16]
 800b5a2:	b009      	add	sp, #36	; 0x24
 800b5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a6:	c304      	stmia	r3!, {r2}
 800b5a8:	e7cd      	b.n	800b546 <__multiply+0x52>
 800b5aa:	9b00      	ldr	r3, [sp, #0]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	b298      	uxth	r0, r3
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d01c      	beq.n	800b5ee <__multiply+0xfa>
 800b5b4:	4667      	mov	r7, ip
 800b5b6:	2400      	movs	r4, #0
 800b5b8:	9e06      	ldr	r6, [sp, #24]
 800b5ba:	ce02      	ldmia	r6!, {r1}
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	b28b      	uxth	r3, r1
 800b5c0:	4343      	muls	r3, r0
 800b5c2:	0c09      	lsrs	r1, r1, #16
 800b5c4:	4341      	muls	r1, r0
 800b5c6:	b292      	uxth	r2, r2
 800b5c8:	189b      	adds	r3, r3, r2
 800b5ca:	191b      	adds	r3, r3, r4
 800b5cc:	000c      	movs	r4, r1
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	0c11      	lsrs	r1, r2, #16
 800b5d2:	1861      	adds	r1, r4, r1
 800b5d4:	0c1c      	lsrs	r4, r3, #16
 800b5d6:	1909      	adds	r1, r1, r4
 800b5d8:	0c0c      	lsrs	r4, r1, #16
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	0409      	lsls	r1, r1, #16
 800b5de:	430b      	orrs	r3, r1
 800b5e0:	c708      	stmia	r7!, {r3}
 800b5e2:	9b04      	ldr	r3, [sp, #16]
 800b5e4:	42b3      	cmp	r3, r6
 800b5e6:	d8e8      	bhi.n	800b5ba <__multiply+0xc6>
 800b5e8:	4663      	mov	r3, ip
 800b5ea:	9a05      	ldr	r2, [sp, #20]
 800b5ec:	509c      	str	r4, [r3, r2]
 800b5ee:	9b00      	ldr	r3, [sp, #0]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	0c1e      	lsrs	r6, r3, #16
 800b5f4:	d020      	beq.n	800b638 <__multiply+0x144>
 800b5f6:	4663      	mov	r3, ip
 800b5f8:	002c      	movs	r4, r5
 800b5fa:	4660      	mov	r0, ip
 800b5fc:	2700      	movs	r7, #0
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	3414      	adds	r4, #20
 800b602:	6822      	ldr	r2, [r4, #0]
 800b604:	b29b      	uxth	r3, r3
 800b606:	b291      	uxth	r1, r2
 800b608:	4371      	muls	r1, r6
 800b60a:	6802      	ldr	r2, [r0, #0]
 800b60c:	0c12      	lsrs	r2, r2, #16
 800b60e:	1889      	adds	r1, r1, r2
 800b610:	19cf      	adds	r7, r1, r7
 800b612:	0439      	lsls	r1, r7, #16
 800b614:	430b      	orrs	r3, r1
 800b616:	6003      	str	r3, [r0, #0]
 800b618:	cc02      	ldmia	r4!, {r1}
 800b61a:	6843      	ldr	r3, [r0, #4]
 800b61c:	0c09      	lsrs	r1, r1, #16
 800b61e:	4371      	muls	r1, r6
 800b620:	b29b      	uxth	r3, r3
 800b622:	0c3f      	lsrs	r7, r7, #16
 800b624:	18cb      	adds	r3, r1, r3
 800b626:	9a04      	ldr	r2, [sp, #16]
 800b628:	19db      	adds	r3, r3, r7
 800b62a:	0c1f      	lsrs	r7, r3, #16
 800b62c:	3004      	adds	r0, #4
 800b62e:	42a2      	cmp	r2, r4
 800b630:	d8e7      	bhi.n	800b602 <__multiply+0x10e>
 800b632:	4662      	mov	r2, ip
 800b634:	9905      	ldr	r1, [sp, #20]
 800b636:	5053      	str	r3, [r2, r1]
 800b638:	9b00      	ldr	r3, [sp, #0]
 800b63a:	3304      	adds	r3, #4
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	2304      	movs	r3, #4
 800b640:	449c      	add	ip, r3
 800b642:	e79c      	b.n	800b57e <__multiply+0x8a>
 800b644:	9b02      	ldr	r3, [sp, #8]
 800b646:	3b01      	subs	r3, #1
 800b648:	9302      	str	r3, [sp, #8]
 800b64a:	e79c      	b.n	800b586 <__multiply+0x92>
 800b64c:	0800da6f 	.word	0x0800da6f
 800b650:	0800da80 	.word	0x0800da80

0800b654 <__pow5mult>:
 800b654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b656:	2303      	movs	r3, #3
 800b658:	0015      	movs	r5, r2
 800b65a:	0007      	movs	r7, r0
 800b65c:	000e      	movs	r6, r1
 800b65e:	401a      	ands	r2, r3
 800b660:	421d      	tst	r5, r3
 800b662:	d008      	beq.n	800b676 <__pow5mult+0x22>
 800b664:	4925      	ldr	r1, [pc, #148]	; (800b6fc <__pow5mult+0xa8>)
 800b666:	3a01      	subs	r2, #1
 800b668:	0092      	lsls	r2, r2, #2
 800b66a:	5852      	ldr	r2, [r2, r1]
 800b66c:	2300      	movs	r3, #0
 800b66e:	0031      	movs	r1, r6
 800b670:	f7ff fe9e 	bl	800b3b0 <__multadd>
 800b674:	0006      	movs	r6, r0
 800b676:	10ad      	asrs	r5, r5, #2
 800b678:	d03d      	beq.n	800b6f6 <__pow5mult+0xa2>
 800b67a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b67c:	2c00      	cmp	r4, #0
 800b67e:	d10f      	bne.n	800b6a0 <__pow5mult+0x4c>
 800b680:	2010      	movs	r0, #16
 800b682:	f7ff fe17 	bl	800b2b4 <malloc>
 800b686:	1e02      	subs	r2, r0, #0
 800b688:	6278      	str	r0, [r7, #36]	; 0x24
 800b68a:	d105      	bne.n	800b698 <__pow5mult+0x44>
 800b68c:	21d7      	movs	r1, #215	; 0xd7
 800b68e:	4b1c      	ldr	r3, [pc, #112]	; (800b700 <__pow5mult+0xac>)
 800b690:	481c      	ldr	r0, [pc, #112]	; (800b704 <__pow5mult+0xb0>)
 800b692:	0049      	lsls	r1, r1, #1
 800b694:	f000 fbec 	bl	800be70 <__assert_func>
 800b698:	6044      	str	r4, [r0, #4]
 800b69a:	6084      	str	r4, [r0, #8]
 800b69c:	6004      	str	r4, [r0, #0]
 800b69e:	60c4      	str	r4, [r0, #12]
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	689c      	ldr	r4, [r3, #8]
 800b6a4:	9301      	str	r3, [sp, #4]
 800b6a6:	2c00      	cmp	r4, #0
 800b6a8:	d108      	bne.n	800b6bc <__pow5mult+0x68>
 800b6aa:	0038      	movs	r0, r7
 800b6ac:	4916      	ldr	r1, [pc, #88]	; (800b708 <__pow5mult+0xb4>)
 800b6ae:	f7ff ff0b 	bl	800b4c8 <__i2b>
 800b6b2:	9b01      	ldr	r3, [sp, #4]
 800b6b4:	0004      	movs	r4, r0
 800b6b6:	6098      	str	r0, [r3, #8]
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	6003      	str	r3, [r0, #0]
 800b6bc:	2301      	movs	r3, #1
 800b6be:	421d      	tst	r5, r3
 800b6c0:	d00a      	beq.n	800b6d8 <__pow5mult+0x84>
 800b6c2:	0031      	movs	r1, r6
 800b6c4:	0022      	movs	r2, r4
 800b6c6:	0038      	movs	r0, r7
 800b6c8:	f7ff ff14 	bl	800b4f4 <__multiply>
 800b6cc:	0031      	movs	r1, r6
 800b6ce:	9001      	str	r0, [sp, #4]
 800b6d0:	0038      	movs	r0, r7
 800b6d2:	f7ff fe49 	bl	800b368 <_Bfree>
 800b6d6:	9e01      	ldr	r6, [sp, #4]
 800b6d8:	106d      	asrs	r5, r5, #1
 800b6da:	d00c      	beq.n	800b6f6 <__pow5mult+0xa2>
 800b6dc:	6820      	ldr	r0, [r4, #0]
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d107      	bne.n	800b6f2 <__pow5mult+0x9e>
 800b6e2:	0022      	movs	r2, r4
 800b6e4:	0021      	movs	r1, r4
 800b6e6:	0038      	movs	r0, r7
 800b6e8:	f7ff ff04 	bl	800b4f4 <__multiply>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	6020      	str	r0, [r4, #0]
 800b6f0:	6003      	str	r3, [r0, #0]
 800b6f2:	0004      	movs	r4, r0
 800b6f4:	e7e2      	b.n	800b6bc <__pow5mult+0x68>
 800b6f6:	0030      	movs	r0, r6
 800b6f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b6fa:	46c0      	nop			; (mov r8, r8)
 800b6fc:	0800dbd0 	.word	0x0800dbd0
 800b700:	0800d9f9 	.word	0x0800d9f9
 800b704:	0800da80 	.word	0x0800da80
 800b708:	00000271 	.word	0x00000271

0800b70c <__lshift>:
 800b70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b70e:	000c      	movs	r4, r1
 800b710:	0017      	movs	r7, r2
 800b712:	6923      	ldr	r3, [r4, #16]
 800b714:	1155      	asrs	r5, r2, #5
 800b716:	b087      	sub	sp, #28
 800b718:	18eb      	adds	r3, r5, r3
 800b71a:	9302      	str	r3, [sp, #8]
 800b71c:	3301      	adds	r3, #1
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	6849      	ldr	r1, [r1, #4]
 800b722:	68a3      	ldr	r3, [r4, #8]
 800b724:	9004      	str	r0, [sp, #16]
 800b726:	9a01      	ldr	r2, [sp, #4]
 800b728:	4293      	cmp	r3, r2
 800b72a:	db11      	blt.n	800b750 <__lshift+0x44>
 800b72c:	9804      	ldr	r0, [sp, #16]
 800b72e:	f7ff fdd7 	bl	800b2e0 <_Balloc>
 800b732:	0002      	movs	r2, r0
 800b734:	2300      	movs	r3, #0
 800b736:	3214      	adds	r2, #20
 800b738:	0006      	movs	r6, r0
 800b73a:	0011      	movs	r1, r2
 800b73c:	9203      	str	r2, [sp, #12]
 800b73e:	4298      	cmp	r0, r3
 800b740:	d10d      	bne.n	800b75e <__lshift+0x52>
 800b742:	21da      	movs	r1, #218	; 0xda
 800b744:	0002      	movs	r2, r0
 800b746:	4b27      	ldr	r3, [pc, #156]	; (800b7e4 <__lshift+0xd8>)
 800b748:	4827      	ldr	r0, [pc, #156]	; (800b7e8 <__lshift+0xdc>)
 800b74a:	31ff      	adds	r1, #255	; 0xff
 800b74c:	f000 fb90 	bl	800be70 <__assert_func>
 800b750:	3101      	adds	r1, #1
 800b752:	005b      	lsls	r3, r3, #1
 800b754:	e7e7      	b.n	800b726 <__lshift+0x1a>
 800b756:	2200      	movs	r2, #0
 800b758:	0098      	lsls	r0, r3, #2
 800b75a:	500a      	str	r2, [r1, r0]
 800b75c:	3301      	adds	r3, #1
 800b75e:	42ab      	cmp	r3, r5
 800b760:	dbf9      	blt.n	800b756 <__lshift+0x4a>
 800b762:	43eb      	mvns	r3, r5
 800b764:	17db      	asrs	r3, r3, #31
 800b766:	401d      	ands	r5, r3
 800b768:	9b03      	ldr	r3, [sp, #12]
 800b76a:	00ad      	lsls	r5, r5, #2
 800b76c:	211f      	movs	r1, #31
 800b76e:	0038      	movs	r0, r7
 800b770:	195d      	adds	r5, r3, r5
 800b772:	0023      	movs	r3, r4
 800b774:	6922      	ldr	r2, [r4, #16]
 800b776:	3314      	adds	r3, #20
 800b778:	0092      	lsls	r2, r2, #2
 800b77a:	4008      	ands	r0, r1
 800b77c:	4684      	mov	ip, r0
 800b77e:	189a      	adds	r2, r3, r2
 800b780:	420f      	tst	r7, r1
 800b782:	d02a      	beq.n	800b7da <__lshift+0xce>
 800b784:	3101      	adds	r1, #1
 800b786:	1a09      	subs	r1, r1, r0
 800b788:	9105      	str	r1, [sp, #20]
 800b78a:	2100      	movs	r1, #0
 800b78c:	9503      	str	r5, [sp, #12]
 800b78e:	4667      	mov	r7, ip
 800b790:	6818      	ldr	r0, [r3, #0]
 800b792:	40b8      	lsls	r0, r7
 800b794:	4301      	orrs	r1, r0
 800b796:	9803      	ldr	r0, [sp, #12]
 800b798:	c002      	stmia	r0!, {r1}
 800b79a:	cb02      	ldmia	r3!, {r1}
 800b79c:	9003      	str	r0, [sp, #12]
 800b79e:	9805      	ldr	r0, [sp, #20]
 800b7a0:	40c1      	lsrs	r1, r0
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d8f3      	bhi.n	800b78e <__lshift+0x82>
 800b7a6:	0020      	movs	r0, r4
 800b7a8:	3015      	adds	r0, #21
 800b7aa:	2304      	movs	r3, #4
 800b7ac:	4282      	cmp	r2, r0
 800b7ae:	d304      	bcc.n	800b7ba <__lshift+0xae>
 800b7b0:	1b13      	subs	r3, r2, r4
 800b7b2:	3b15      	subs	r3, #21
 800b7b4:	089b      	lsrs	r3, r3, #2
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	50e9      	str	r1, [r5, r3]
 800b7bc:	2900      	cmp	r1, #0
 800b7be:	d002      	beq.n	800b7c6 <__lshift+0xba>
 800b7c0:	9b02      	ldr	r3, [sp, #8]
 800b7c2:	3302      	adds	r3, #2
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	9b01      	ldr	r3, [sp, #4]
 800b7c8:	9804      	ldr	r0, [sp, #16]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	0021      	movs	r1, r4
 800b7ce:	6133      	str	r3, [r6, #16]
 800b7d0:	f7ff fdca 	bl	800b368 <_Bfree>
 800b7d4:	0030      	movs	r0, r6
 800b7d6:	b007      	add	sp, #28
 800b7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7da:	cb02      	ldmia	r3!, {r1}
 800b7dc:	c502      	stmia	r5!, {r1}
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d8fb      	bhi.n	800b7da <__lshift+0xce>
 800b7e2:	e7f0      	b.n	800b7c6 <__lshift+0xba>
 800b7e4:	0800da6f 	.word	0x0800da6f
 800b7e8:	0800da80 	.word	0x0800da80

0800b7ec <__mcmp>:
 800b7ec:	6902      	ldr	r2, [r0, #16]
 800b7ee:	690b      	ldr	r3, [r1, #16]
 800b7f0:	b530      	push	{r4, r5, lr}
 800b7f2:	0004      	movs	r4, r0
 800b7f4:	1ad0      	subs	r0, r2, r3
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d10d      	bne.n	800b816 <__mcmp+0x2a>
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	3414      	adds	r4, #20
 800b7fe:	3114      	adds	r1, #20
 800b800:	18e2      	adds	r2, r4, r3
 800b802:	18c9      	adds	r1, r1, r3
 800b804:	3a04      	subs	r2, #4
 800b806:	3904      	subs	r1, #4
 800b808:	6815      	ldr	r5, [r2, #0]
 800b80a:	680b      	ldr	r3, [r1, #0]
 800b80c:	429d      	cmp	r5, r3
 800b80e:	d003      	beq.n	800b818 <__mcmp+0x2c>
 800b810:	2001      	movs	r0, #1
 800b812:	429d      	cmp	r5, r3
 800b814:	d303      	bcc.n	800b81e <__mcmp+0x32>
 800b816:	bd30      	pop	{r4, r5, pc}
 800b818:	4294      	cmp	r4, r2
 800b81a:	d3f3      	bcc.n	800b804 <__mcmp+0x18>
 800b81c:	e7fb      	b.n	800b816 <__mcmp+0x2a>
 800b81e:	4240      	negs	r0, r0
 800b820:	e7f9      	b.n	800b816 <__mcmp+0x2a>
	...

0800b824 <__mdiff>:
 800b824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b826:	000e      	movs	r6, r1
 800b828:	0007      	movs	r7, r0
 800b82a:	0011      	movs	r1, r2
 800b82c:	0030      	movs	r0, r6
 800b82e:	b087      	sub	sp, #28
 800b830:	0014      	movs	r4, r2
 800b832:	f7ff ffdb 	bl	800b7ec <__mcmp>
 800b836:	1e05      	subs	r5, r0, #0
 800b838:	d110      	bne.n	800b85c <__mdiff+0x38>
 800b83a:	0001      	movs	r1, r0
 800b83c:	0038      	movs	r0, r7
 800b83e:	f7ff fd4f 	bl	800b2e0 <_Balloc>
 800b842:	1e02      	subs	r2, r0, #0
 800b844:	d104      	bne.n	800b850 <__mdiff+0x2c>
 800b846:	4b40      	ldr	r3, [pc, #256]	; (800b948 <__mdiff+0x124>)
 800b848:	4940      	ldr	r1, [pc, #256]	; (800b94c <__mdiff+0x128>)
 800b84a:	4841      	ldr	r0, [pc, #260]	; (800b950 <__mdiff+0x12c>)
 800b84c:	f000 fb10 	bl	800be70 <__assert_func>
 800b850:	2301      	movs	r3, #1
 800b852:	6145      	str	r5, [r0, #20]
 800b854:	6103      	str	r3, [r0, #16]
 800b856:	0010      	movs	r0, r2
 800b858:	b007      	add	sp, #28
 800b85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b85c:	2301      	movs	r3, #1
 800b85e:	9301      	str	r3, [sp, #4]
 800b860:	2800      	cmp	r0, #0
 800b862:	db04      	blt.n	800b86e <__mdiff+0x4a>
 800b864:	0023      	movs	r3, r4
 800b866:	0034      	movs	r4, r6
 800b868:	001e      	movs	r6, r3
 800b86a:	2300      	movs	r3, #0
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	0038      	movs	r0, r7
 800b870:	6861      	ldr	r1, [r4, #4]
 800b872:	f7ff fd35 	bl	800b2e0 <_Balloc>
 800b876:	1e02      	subs	r2, r0, #0
 800b878:	d103      	bne.n	800b882 <__mdiff+0x5e>
 800b87a:	2190      	movs	r1, #144	; 0x90
 800b87c:	4b32      	ldr	r3, [pc, #200]	; (800b948 <__mdiff+0x124>)
 800b87e:	0089      	lsls	r1, r1, #2
 800b880:	e7e3      	b.n	800b84a <__mdiff+0x26>
 800b882:	9b01      	ldr	r3, [sp, #4]
 800b884:	2700      	movs	r7, #0
 800b886:	60c3      	str	r3, [r0, #12]
 800b888:	6920      	ldr	r0, [r4, #16]
 800b88a:	3414      	adds	r4, #20
 800b88c:	9401      	str	r4, [sp, #4]
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	0084      	lsls	r4, r0, #2
 800b892:	191b      	adds	r3, r3, r4
 800b894:	0034      	movs	r4, r6
 800b896:	9302      	str	r3, [sp, #8]
 800b898:	6933      	ldr	r3, [r6, #16]
 800b89a:	3414      	adds	r4, #20
 800b89c:	0099      	lsls	r1, r3, #2
 800b89e:	1863      	adds	r3, r4, r1
 800b8a0:	9303      	str	r3, [sp, #12]
 800b8a2:	0013      	movs	r3, r2
 800b8a4:	3314      	adds	r3, #20
 800b8a6:	469c      	mov	ip, r3
 800b8a8:	9305      	str	r3, [sp, #20]
 800b8aa:	9b01      	ldr	r3, [sp, #4]
 800b8ac:	9304      	str	r3, [sp, #16]
 800b8ae:	9b04      	ldr	r3, [sp, #16]
 800b8b0:	cc02      	ldmia	r4!, {r1}
 800b8b2:	cb20      	ldmia	r3!, {r5}
 800b8b4:	9304      	str	r3, [sp, #16]
 800b8b6:	b2ab      	uxth	r3, r5
 800b8b8:	19df      	adds	r7, r3, r7
 800b8ba:	b28b      	uxth	r3, r1
 800b8bc:	1afb      	subs	r3, r7, r3
 800b8be:	0c2d      	lsrs	r5, r5, #16
 800b8c0:	0c09      	lsrs	r1, r1, #16
 800b8c2:	1a69      	subs	r1, r5, r1
 800b8c4:	141d      	asrs	r5, r3, #16
 800b8c6:	1949      	adds	r1, r1, r5
 800b8c8:	140f      	asrs	r7, r1, #16
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	0409      	lsls	r1, r1, #16
 800b8ce:	430b      	orrs	r3, r1
 800b8d0:	4661      	mov	r1, ip
 800b8d2:	c108      	stmia	r1!, {r3}
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	468c      	mov	ip, r1
 800b8d8:	42a3      	cmp	r3, r4
 800b8da:	d8e8      	bhi.n	800b8ae <__mdiff+0x8a>
 800b8dc:	0031      	movs	r1, r6
 800b8de:	9c03      	ldr	r4, [sp, #12]
 800b8e0:	3115      	adds	r1, #21
 800b8e2:	2304      	movs	r3, #4
 800b8e4:	428c      	cmp	r4, r1
 800b8e6:	d304      	bcc.n	800b8f2 <__mdiff+0xce>
 800b8e8:	1ba3      	subs	r3, r4, r6
 800b8ea:	3b15      	subs	r3, #21
 800b8ec:	089b      	lsrs	r3, r3, #2
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	9901      	ldr	r1, [sp, #4]
 800b8f4:	18cc      	adds	r4, r1, r3
 800b8f6:	9905      	ldr	r1, [sp, #20]
 800b8f8:	0026      	movs	r6, r4
 800b8fa:	18cb      	adds	r3, r1, r3
 800b8fc:	469c      	mov	ip, r3
 800b8fe:	9902      	ldr	r1, [sp, #8]
 800b900:	428e      	cmp	r6, r1
 800b902:	d310      	bcc.n	800b926 <__mdiff+0x102>
 800b904:	9e02      	ldr	r6, [sp, #8]
 800b906:	1ee5      	subs	r5, r4, #3
 800b908:	2100      	movs	r1, #0
 800b90a:	42ae      	cmp	r6, r5
 800b90c:	d304      	bcc.n	800b918 <__mdiff+0xf4>
 800b90e:	0031      	movs	r1, r6
 800b910:	3103      	adds	r1, #3
 800b912:	1b09      	subs	r1, r1, r4
 800b914:	0889      	lsrs	r1, r1, #2
 800b916:	0089      	lsls	r1, r1, #2
 800b918:	185b      	adds	r3, r3, r1
 800b91a:	3b04      	subs	r3, #4
 800b91c:	6819      	ldr	r1, [r3, #0]
 800b91e:	2900      	cmp	r1, #0
 800b920:	d00f      	beq.n	800b942 <__mdiff+0x11e>
 800b922:	6110      	str	r0, [r2, #16]
 800b924:	e797      	b.n	800b856 <__mdiff+0x32>
 800b926:	ce02      	ldmia	r6!, {r1}
 800b928:	b28d      	uxth	r5, r1
 800b92a:	19ed      	adds	r5, r5, r7
 800b92c:	0c0f      	lsrs	r7, r1, #16
 800b92e:	1429      	asrs	r1, r5, #16
 800b930:	1879      	adds	r1, r7, r1
 800b932:	140f      	asrs	r7, r1, #16
 800b934:	b2ad      	uxth	r5, r5
 800b936:	0409      	lsls	r1, r1, #16
 800b938:	430d      	orrs	r5, r1
 800b93a:	4661      	mov	r1, ip
 800b93c:	c120      	stmia	r1!, {r5}
 800b93e:	468c      	mov	ip, r1
 800b940:	e7dd      	b.n	800b8fe <__mdiff+0xda>
 800b942:	3801      	subs	r0, #1
 800b944:	e7e9      	b.n	800b91a <__mdiff+0xf6>
 800b946:	46c0      	nop			; (mov r8, r8)
 800b948:	0800da6f 	.word	0x0800da6f
 800b94c:	00000232 	.word	0x00000232
 800b950:	0800da80 	.word	0x0800da80

0800b954 <__d2b>:
 800b954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b956:	2101      	movs	r1, #1
 800b958:	0014      	movs	r4, r2
 800b95a:	001e      	movs	r6, r3
 800b95c:	9f08      	ldr	r7, [sp, #32]
 800b95e:	f7ff fcbf 	bl	800b2e0 <_Balloc>
 800b962:	1e05      	subs	r5, r0, #0
 800b964:	d105      	bne.n	800b972 <__d2b+0x1e>
 800b966:	0002      	movs	r2, r0
 800b968:	4b26      	ldr	r3, [pc, #152]	; (800ba04 <__d2b+0xb0>)
 800b96a:	4927      	ldr	r1, [pc, #156]	; (800ba08 <__d2b+0xb4>)
 800b96c:	4827      	ldr	r0, [pc, #156]	; (800ba0c <__d2b+0xb8>)
 800b96e:	f000 fa7f 	bl	800be70 <__assert_func>
 800b972:	0333      	lsls	r3, r6, #12
 800b974:	0076      	lsls	r6, r6, #1
 800b976:	0b1b      	lsrs	r3, r3, #12
 800b978:	0d76      	lsrs	r6, r6, #21
 800b97a:	d124      	bne.n	800b9c6 <__d2b+0x72>
 800b97c:	9301      	str	r3, [sp, #4]
 800b97e:	2c00      	cmp	r4, #0
 800b980:	d027      	beq.n	800b9d2 <__d2b+0x7e>
 800b982:	4668      	mov	r0, sp
 800b984:	9400      	str	r4, [sp, #0]
 800b986:	f7ff fd71 	bl	800b46c <__lo0bits>
 800b98a:	9c00      	ldr	r4, [sp, #0]
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d01e      	beq.n	800b9ce <__d2b+0x7a>
 800b990:	9b01      	ldr	r3, [sp, #4]
 800b992:	2120      	movs	r1, #32
 800b994:	001a      	movs	r2, r3
 800b996:	1a09      	subs	r1, r1, r0
 800b998:	408a      	lsls	r2, r1
 800b99a:	40c3      	lsrs	r3, r0
 800b99c:	4322      	orrs	r2, r4
 800b99e:	616a      	str	r2, [r5, #20]
 800b9a0:	9301      	str	r3, [sp, #4]
 800b9a2:	9c01      	ldr	r4, [sp, #4]
 800b9a4:	61ac      	str	r4, [r5, #24]
 800b9a6:	1e63      	subs	r3, r4, #1
 800b9a8:	419c      	sbcs	r4, r3
 800b9aa:	3401      	adds	r4, #1
 800b9ac:	612c      	str	r4, [r5, #16]
 800b9ae:	2e00      	cmp	r6, #0
 800b9b0:	d018      	beq.n	800b9e4 <__d2b+0x90>
 800b9b2:	4b17      	ldr	r3, [pc, #92]	; (800ba10 <__d2b+0xbc>)
 800b9b4:	18f6      	adds	r6, r6, r3
 800b9b6:	2335      	movs	r3, #53	; 0x35
 800b9b8:	1836      	adds	r6, r6, r0
 800b9ba:	1a18      	subs	r0, r3, r0
 800b9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9be:	603e      	str	r6, [r7, #0]
 800b9c0:	6018      	str	r0, [r3, #0]
 800b9c2:	0028      	movs	r0, r5
 800b9c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9c6:	2280      	movs	r2, #128	; 0x80
 800b9c8:	0352      	lsls	r2, r2, #13
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	e7d6      	b.n	800b97c <__d2b+0x28>
 800b9ce:	616c      	str	r4, [r5, #20]
 800b9d0:	e7e7      	b.n	800b9a2 <__d2b+0x4e>
 800b9d2:	a801      	add	r0, sp, #4
 800b9d4:	f7ff fd4a 	bl	800b46c <__lo0bits>
 800b9d8:	2401      	movs	r4, #1
 800b9da:	9b01      	ldr	r3, [sp, #4]
 800b9dc:	612c      	str	r4, [r5, #16]
 800b9de:	616b      	str	r3, [r5, #20]
 800b9e0:	3020      	adds	r0, #32
 800b9e2:	e7e4      	b.n	800b9ae <__d2b+0x5a>
 800b9e4:	4b0b      	ldr	r3, [pc, #44]	; (800ba14 <__d2b+0xc0>)
 800b9e6:	18c0      	adds	r0, r0, r3
 800b9e8:	4b0b      	ldr	r3, [pc, #44]	; (800ba18 <__d2b+0xc4>)
 800b9ea:	6038      	str	r0, [r7, #0]
 800b9ec:	18e3      	adds	r3, r4, r3
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	18eb      	adds	r3, r5, r3
 800b9f2:	6958      	ldr	r0, [r3, #20]
 800b9f4:	f7ff fd20 	bl	800b438 <__hi0bits>
 800b9f8:	0164      	lsls	r4, r4, #5
 800b9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9fc:	1a24      	subs	r4, r4, r0
 800b9fe:	601c      	str	r4, [r3, #0]
 800ba00:	e7df      	b.n	800b9c2 <__d2b+0x6e>
 800ba02:	46c0      	nop			; (mov r8, r8)
 800ba04:	0800da6f 	.word	0x0800da6f
 800ba08:	0000030a 	.word	0x0000030a
 800ba0c:	0800da80 	.word	0x0800da80
 800ba10:	fffffbcd 	.word	0xfffffbcd
 800ba14:	fffffbce 	.word	0xfffffbce
 800ba18:	3fffffff 	.word	0x3fffffff

0800ba1c <_calloc_r>:
 800ba1c:	434a      	muls	r2, r1
 800ba1e:	b570      	push	{r4, r5, r6, lr}
 800ba20:	0011      	movs	r1, r2
 800ba22:	0015      	movs	r5, r2
 800ba24:	f000 f852 	bl	800bacc <_malloc_r>
 800ba28:	1e04      	subs	r4, r0, #0
 800ba2a:	d003      	beq.n	800ba34 <_calloc_r+0x18>
 800ba2c:	002a      	movs	r2, r5
 800ba2e:	2100      	movs	r1, #0
 800ba30:	f7fe f8d9 	bl	8009be6 <memset>
 800ba34:	0020      	movs	r0, r4
 800ba36:	bd70      	pop	{r4, r5, r6, pc}

0800ba38 <_free_r>:
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	0005      	movs	r5, r0
 800ba3c:	2900      	cmp	r1, #0
 800ba3e:	d010      	beq.n	800ba62 <_free_r+0x2a>
 800ba40:	1f0c      	subs	r4, r1, #4
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	da00      	bge.n	800ba4a <_free_r+0x12>
 800ba48:	18e4      	adds	r4, r4, r3
 800ba4a:	0028      	movs	r0, r5
 800ba4c:	f000 fa64 	bl	800bf18 <__malloc_lock>
 800ba50:	4a1d      	ldr	r2, [pc, #116]	; (800bac8 <_free_r+0x90>)
 800ba52:	6813      	ldr	r3, [r2, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d105      	bne.n	800ba64 <_free_r+0x2c>
 800ba58:	6063      	str	r3, [r4, #4]
 800ba5a:	6014      	str	r4, [r2, #0]
 800ba5c:	0028      	movs	r0, r5
 800ba5e:	f000 fa63 	bl	800bf28 <__malloc_unlock>
 800ba62:	bd70      	pop	{r4, r5, r6, pc}
 800ba64:	42a3      	cmp	r3, r4
 800ba66:	d908      	bls.n	800ba7a <_free_r+0x42>
 800ba68:	6821      	ldr	r1, [r4, #0]
 800ba6a:	1860      	adds	r0, r4, r1
 800ba6c:	4283      	cmp	r3, r0
 800ba6e:	d1f3      	bne.n	800ba58 <_free_r+0x20>
 800ba70:	6818      	ldr	r0, [r3, #0]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	1841      	adds	r1, r0, r1
 800ba76:	6021      	str	r1, [r4, #0]
 800ba78:	e7ee      	b.n	800ba58 <_free_r+0x20>
 800ba7a:	001a      	movs	r2, r3
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d001      	beq.n	800ba86 <_free_r+0x4e>
 800ba82:	42a3      	cmp	r3, r4
 800ba84:	d9f9      	bls.n	800ba7a <_free_r+0x42>
 800ba86:	6811      	ldr	r1, [r2, #0]
 800ba88:	1850      	adds	r0, r2, r1
 800ba8a:	42a0      	cmp	r0, r4
 800ba8c:	d10b      	bne.n	800baa6 <_free_r+0x6e>
 800ba8e:	6820      	ldr	r0, [r4, #0]
 800ba90:	1809      	adds	r1, r1, r0
 800ba92:	1850      	adds	r0, r2, r1
 800ba94:	6011      	str	r1, [r2, #0]
 800ba96:	4283      	cmp	r3, r0
 800ba98:	d1e0      	bne.n	800ba5c <_free_r+0x24>
 800ba9a:	6818      	ldr	r0, [r3, #0]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	1841      	adds	r1, r0, r1
 800baa0:	6011      	str	r1, [r2, #0]
 800baa2:	6053      	str	r3, [r2, #4]
 800baa4:	e7da      	b.n	800ba5c <_free_r+0x24>
 800baa6:	42a0      	cmp	r0, r4
 800baa8:	d902      	bls.n	800bab0 <_free_r+0x78>
 800baaa:	230c      	movs	r3, #12
 800baac:	602b      	str	r3, [r5, #0]
 800baae:	e7d5      	b.n	800ba5c <_free_r+0x24>
 800bab0:	6821      	ldr	r1, [r4, #0]
 800bab2:	1860      	adds	r0, r4, r1
 800bab4:	4283      	cmp	r3, r0
 800bab6:	d103      	bne.n	800bac0 <_free_r+0x88>
 800bab8:	6818      	ldr	r0, [r3, #0]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	1841      	adds	r1, r0, r1
 800babe:	6021      	str	r1, [r4, #0]
 800bac0:	6063      	str	r3, [r4, #4]
 800bac2:	6054      	str	r4, [r2, #4]
 800bac4:	e7ca      	b.n	800ba5c <_free_r+0x24>
 800bac6:	46c0      	nop			; (mov r8, r8)
 800bac8:	2000022c 	.word	0x2000022c

0800bacc <_malloc_r>:
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bace:	2303      	movs	r3, #3
 800bad0:	1ccd      	adds	r5, r1, #3
 800bad2:	439d      	bics	r5, r3
 800bad4:	3508      	adds	r5, #8
 800bad6:	0006      	movs	r6, r0
 800bad8:	2d0c      	cmp	r5, #12
 800bada:	d21f      	bcs.n	800bb1c <_malloc_r+0x50>
 800badc:	250c      	movs	r5, #12
 800bade:	42a9      	cmp	r1, r5
 800bae0:	d81e      	bhi.n	800bb20 <_malloc_r+0x54>
 800bae2:	0030      	movs	r0, r6
 800bae4:	f000 fa18 	bl	800bf18 <__malloc_lock>
 800bae8:	4925      	ldr	r1, [pc, #148]	; (800bb80 <_malloc_r+0xb4>)
 800baea:	680a      	ldr	r2, [r1, #0]
 800baec:	0014      	movs	r4, r2
 800baee:	2c00      	cmp	r4, #0
 800baf0:	d11a      	bne.n	800bb28 <_malloc_r+0x5c>
 800baf2:	4f24      	ldr	r7, [pc, #144]	; (800bb84 <_malloc_r+0xb8>)
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d104      	bne.n	800bb04 <_malloc_r+0x38>
 800bafa:	0021      	movs	r1, r4
 800bafc:	0030      	movs	r0, r6
 800bafe:	f000 f9a5 	bl	800be4c <_sbrk_r>
 800bb02:	6038      	str	r0, [r7, #0]
 800bb04:	0029      	movs	r1, r5
 800bb06:	0030      	movs	r0, r6
 800bb08:	f000 f9a0 	bl	800be4c <_sbrk_r>
 800bb0c:	1c43      	adds	r3, r0, #1
 800bb0e:	d12b      	bne.n	800bb68 <_malloc_r+0x9c>
 800bb10:	230c      	movs	r3, #12
 800bb12:	0030      	movs	r0, r6
 800bb14:	6033      	str	r3, [r6, #0]
 800bb16:	f000 fa07 	bl	800bf28 <__malloc_unlock>
 800bb1a:	e003      	b.n	800bb24 <_malloc_r+0x58>
 800bb1c:	2d00      	cmp	r5, #0
 800bb1e:	dade      	bge.n	800bade <_malloc_r+0x12>
 800bb20:	230c      	movs	r3, #12
 800bb22:	6033      	str	r3, [r6, #0]
 800bb24:	2000      	movs	r0, #0
 800bb26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	1b5b      	subs	r3, r3, r5
 800bb2c:	d419      	bmi.n	800bb62 <_malloc_r+0x96>
 800bb2e:	2b0b      	cmp	r3, #11
 800bb30:	d903      	bls.n	800bb3a <_malloc_r+0x6e>
 800bb32:	6023      	str	r3, [r4, #0]
 800bb34:	18e4      	adds	r4, r4, r3
 800bb36:	6025      	str	r5, [r4, #0]
 800bb38:	e003      	b.n	800bb42 <_malloc_r+0x76>
 800bb3a:	6863      	ldr	r3, [r4, #4]
 800bb3c:	42a2      	cmp	r2, r4
 800bb3e:	d10e      	bne.n	800bb5e <_malloc_r+0x92>
 800bb40:	600b      	str	r3, [r1, #0]
 800bb42:	0030      	movs	r0, r6
 800bb44:	f000 f9f0 	bl	800bf28 <__malloc_unlock>
 800bb48:	0020      	movs	r0, r4
 800bb4a:	2207      	movs	r2, #7
 800bb4c:	300b      	adds	r0, #11
 800bb4e:	1d23      	adds	r3, r4, #4
 800bb50:	4390      	bics	r0, r2
 800bb52:	1ac2      	subs	r2, r0, r3
 800bb54:	4298      	cmp	r0, r3
 800bb56:	d0e6      	beq.n	800bb26 <_malloc_r+0x5a>
 800bb58:	1a1b      	subs	r3, r3, r0
 800bb5a:	50a3      	str	r3, [r4, r2]
 800bb5c:	e7e3      	b.n	800bb26 <_malloc_r+0x5a>
 800bb5e:	6053      	str	r3, [r2, #4]
 800bb60:	e7ef      	b.n	800bb42 <_malloc_r+0x76>
 800bb62:	0022      	movs	r2, r4
 800bb64:	6864      	ldr	r4, [r4, #4]
 800bb66:	e7c2      	b.n	800baee <_malloc_r+0x22>
 800bb68:	2303      	movs	r3, #3
 800bb6a:	1cc4      	adds	r4, r0, #3
 800bb6c:	439c      	bics	r4, r3
 800bb6e:	42a0      	cmp	r0, r4
 800bb70:	d0e1      	beq.n	800bb36 <_malloc_r+0x6a>
 800bb72:	1a21      	subs	r1, r4, r0
 800bb74:	0030      	movs	r0, r6
 800bb76:	f000 f969 	bl	800be4c <_sbrk_r>
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	d1db      	bne.n	800bb36 <_malloc_r+0x6a>
 800bb7e:	e7c7      	b.n	800bb10 <_malloc_r+0x44>
 800bb80:	2000022c 	.word	0x2000022c
 800bb84:	20000230 	.word	0x20000230

0800bb88 <__ssputs_r>:
 800bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb8a:	688e      	ldr	r6, [r1, #8]
 800bb8c:	b085      	sub	sp, #20
 800bb8e:	0007      	movs	r7, r0
 800bb90:	000c      	movs	r4, r1
 800bb92:	9203      	str	r2, [sp, #12]
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	429e      	cmp	r6, r3
 800bb98:	d83c      	bhi.n	800bc14 <__ssputs_r+0x8c>
 800bb9a:	2390      	movs	r3, #144	; 0x90
 800bb9c:	898a      	ldrh	r2, [r1, #12]
 800bb9e:	00db      	lsls	r3, r3, #3
 800bba0:	421a      	tst	r2, r3
 800bba2:	d034      	beq.n	800bc0e <__ssputs_r+0x86>
 800bba4:	2503      	movs	r5, #3
 800bba6:	6909      	ldr	r1, [r1, #16]
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	1a5b      	subs	r3, r3, r1
 800bbac:	9302      	str	r3, [sp, #8]
 800bbae:	6963      	ldr	r3, [r4, #20]
 800bbb0:	9802      	ldr	r0, [sp, #8]
 800bbb2:	435d      	muls	r5, r3
 800bbb4:	0feb      	lsrs	r3, r5, #31
 800bbb6:	195d      	adds	r5, r3, r5
 800bbb8:	9b01      	ldr	r3, [sp, #4]
 800bbba:	106d      	asrs	r5, r5, #1
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	181b      	adds	r3, r3, r0
 800bbc0:	42ab      	cmp	r3, r5
 800bbc2:	d900      	bls.n	800bbc6 <__ssputs_r+0x3e>
 800bbc4:	001d      	movs	r5, r3
 800bbc6:	0553      	lsls	r3, r2, #21
 800bbc8:	d532      	bpl.n	800bc30 <__ssputs_r+0xa8>
 800bbca:	0029      	movs	r1, r5
 800bbcc:	0038      	movs	r0, r7
 800bbce:	f7ff ff7d 	bl	800bacc <_malloc_r>
 800bbd2:	1e06      	subs	r6, r0, #0
 800bbd4:	d109      	bne.n	800bbea <__ssputs_r+0x62>
 800bbd6:	230c      	movs	r3, #12
 800bbd8:	603b      	str	r3, [r7, #0]
 800bbda:	2340      	movs	r3, #64	; 0x40
 800bbdc:	2001      	movs	r0, #1
 800bbde:	89a2      	ldrh	r2, [r4, #12]
 800bbe0:	4240      	negs	r0, r0
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	81a3      	strh	r3, [r4, #12]
 800bbe6:	b005      	add	sp, #20
 800bbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbea:	9a02      	ldr	r2, [sp, #8]
 800bbec:	6921      	ldr	r1, [r4, #16]
 800bbee:	f7fd fff1 	bl	8009bd4 <memcpy>
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	4a14      	ldr	r2, [pc, #80]	; (800bc48 <__ssputs_r+0xc0>)
 800bbf6:	401a      	ands	r2, r3
 800bbf8:	2380      	movs	r3, #128	; 0x80
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	81a3      	strh	r3, [r4, #12]
 800bbfe:	9b02      	ldr	r3, [sp, #8]
 800bc00:	6126      	str	r6, [r4, #16]
 800bc02:	18f6      	adds	r6, r6, r3
 800bc04:	6026      	str	r6, [r4, #0]
 800bc06:	6165      	str	r5, [r4, #20]
 800bc08:	9e01      	ldr	r6, [sp, #4]
 800bc0a:	1aed      	subs	r5, r5, r3
 800bc0c:	60a5      	str	r5, [r4, #8]
 800bc0e:	9b01      	ldr	r3, [sp, #4]
 800bc10:	429e      	cmp	r6, r3
 800bc12:	d900      	bls.n	800bc16 <__ssputs_r+0x8e>
 800bc14:	9e01      	ldr	r6, [sp, #4]
 800bc16:	0032      	movs	r2, r6
 800bc18:	9903      	ldr	r1, [sp, #12]
 800bc1a:	6820      	ldr	r0, [r4, #0]
 800bc1c:	f000 f968 	bl	800bef0 <memmove>
 800bc20:	68a3      	ldr	r3, [r4, #8]
 800bc22:	2000      	movs	r0, #0
 800bc24:	1b9b      	subs	r3, r3, r6
 800bc26:	60a3      	str	r3, [r4, #8]
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	199e      	adds	r6, r3, r6
 800bc2c:	6026      	str	r6, [r4, #0]
 800bc2e:	e7da      	b.n	800bbe6 <__ssputs_r+0x5e>
 800bc30:	002a      	movs	r2, r5
 800bc32:	0038      	movs	r0, r7
 800bc34:	f000 f980 	bl	800bf38 <_realloc_r>
 800bc38:	1e06      	subs	r6, r0, #0
 800bc3a:	d1e0      	bne.n	800bbfe <__ssputs_r+0x76>
 800bc3c:	0038      	movs	r0, r7
 800bc3e:	6921      	ldr	r1, [r4, #16]
 800bc40:	f7ff fefa 	bl	800ba38 <_free_r>
 800bc44:	e7c7      	b.n	800bbd6 <__ssputs_r+0x4e>
 800bc46:	46c0      	nop			; (mov r8, r8)
 800bc48:	fffffb7f 	.word	0xfffffb7f

0800bc4c <_svfiprintf_r>:
 800bc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc4e:	b0a1      	sub	sp, #132	; 0x84
 800bc50:	9003      	str	r0, [sp, #12]
 800bc52:	001d      	movs	r5, r3
 800bc54:	898b      	ldrh	r3, [r1, #12]
 800bc56:	000f      	movs	r7, r1
 800bc58:	0016      	movs	r6, r2
 800bc5a:	061b      	lsls	r3, r3, #24
 800bc5c:	d511      	bpl.n	800bc82 <_svfiprintf_r+0x36>
 800bc5e:	690b      	ldr	r3, [r1, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10e      	bne.n	800bc82 <_svfiprintf_r+0x36>
 800bc64:	2140      	movs	r1, #64	; 0x40
 800bc66:	f7ff ff31 	bl	800bacc <_malloc_r>
 800bc6a:	6038      	str	r0, [r7, #0]
 800bc6c:	6138      	str	r0, [r7, #16]
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d105      	bne.n	800bc7e <_svfiprintf_r+0x32>
 800bc72:	230c      	movs	r3, #12
 800bc74:	9a03      	ldr	r2, [sp, #12]
 800bc76:	3801      	subs	r0, #1
 800bc78:	6013      	str	r3, [r2, #0]
 800bc7a:	b021      	add	sp, #132	; 0x84
 800bc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc7e:	2340      	movs	r3, #64	; 0x40
 800bc80:	617b      	str	r3, [r7, #20]
 800bc82:	2300      	movs	r3, #0
 800bc84:	ac08      	add	r4, sp, #32
 800bc86:	6163      	str	r3, [r4, #20]
 800bc88:	3320      	adds	r3, #32
 800bc8a:	7663      	strb	r3, [r4, #25]
 800bc8c:	3310      	adds	r3, #16
 800bc8e:	76a3      	strb	r3, [r4, #26]
 800bc90:	9507      	str	r5, [sp, #28]
 800bc92:	0035      	movs	r5, r6
 800bc94:	782b      	ldrb	r3, [r5, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <_svfiprintf_r+0x52>
 800bc9a:	2b25      	cmp	r3, #37	; 0x25
 800bc9c:	d147      	bne.n	800bd2e <_svfiprintf_r+0xe2>
 800bc9e:	1bab      	subs	r3, r5, r6
 800bca0:	9305      	str	r3, [sp, #20]
 800bca2:	42b5      	cmp	r5, r6
 800bca4:	d00c      	beq.n	800bcc0 <_svfiprintf_r+0x74>
 800bca6:	0032      	movs	r2, r6
 800bca8:	0039      	movs	r1, r7
 800bcaa:	9803      	ldr	r0, [sp, #12]
 800bcac:	f7ff ff6c 	bl	800bb88 <__ssputs_r>
 800bcb0:	1c43      	adds	r3, r0, #1
 800bcb2:	d100      	bne.n	800bcb6 <_svfiprintf_r+0x6a>
 800bcb4:	e0ae      	b.n	800be14 <_svfiprintf_r+0x1c8>
 800bcb6:	6962      	ldr	r2, [r4, #20]
 800bcb8:	9b05      	ldr	r3, [sp, #20]
 800bcba:	4694      	mov	ip, r2
 800bcbc:	4463      	add	r3, ip
 800bcbe:	6163      	str	r3, [r4, #20]
 800bcc0:	782b      	ldrb	r3, [r5, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d100      	bne.n	800bcc8 <_svfiprintf_r+0x7c>
 800bcc6:	e0a5      	b.n	800be14 <_svfiprintf_r+0x1c8>
 800bcc8:	2201      	movs	r2, #1
 800bcca:	2300      	movs	r3, #0
 800bccc:	4252      	negs	r2, r2
 800bcce:	6062      	str	r2, [r4, #4]
 800bcd0:	a904      	add	r1, sp, #16
 800bcd2:	3254      	adds	r2, #84	; 0x54
 800bcd4:	1852      	adds	r2, r2, r1
 800bcd6:	1c6e      	adds	r6, r5, #1
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	60e3      	str	r3, [r4, #12]
 800bcdc:	60a3      	str	r3, [r4, #8]
 800bcde:	7013      	strb	r3, [r2, #0]
 800bce0:	65a3      	str	r3, [r4, #88]	; 0x58
 800bce2:	2205      	movs	r2, #5
 800bce4:	7831      	ldrb	r1, [r6, #0]
 800bce6:	4854      	ldr	r0, [pc, #336]	; (800be38 <_svfiprintf_r+0x1ec>)
 800bce8:	f7ff faee 	bl	800b2c8 <memchr>
 800bcec:	1c75      	adds	r5, r6, #1
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d11f      	bne.n	800bd32 <_svfiprintf_r+0xe6>
 800bcf2:	6822      	ldr	r2, [r4, #0]
 800bcf4:	06d3      	lsls	r3, r2, #27
 800bcf6:	d504      	bpl.n	800bd02 <_svfiprintf_r+0xb6>
 800bcf8:	2353      	movs	r3, #83	; 0x53
 800bcfa:	a904      	add	r1, sp, #16
 800bcfc:	185b      	adds	r3, r3, r1
 800bcfe:	2120      	movs	r1, #32
 800bd00:	7019      	strb	r1, [r3, #0]
 800bd02:	0713      	lsls	r3, r2, #28
 800bd04:	d504      	bpl.n	800bd10 <_svfiprintf_r+0xc4>
 800bd06:	2353      	movs	r3, #83	; 0x53
 800bd08:	a904      	add	r1, sp, #16
 800bd0a:	185b      	adds	r3, r3, r1
 800bd0c:	212b      	movs	r1, #43	; 0x2b
 800bd0e:	7019      	strb	r1, [r3, #0]
 800bd10:	7833      	ldrb	r3, [r6, #0]
 800bd12:	2b2a      	cmp	r3, #42	; 0x2a
 800bd14:	d016      	beq.n	800bd44 <_svfiprintf_r+0xf8>
 800bd16:	0035      	movs	r5, r6
 800bd18:	2100      	movs	r1, #0
 800bd1a:	200a      	movs	r0, #10
 800bd1c:	68e3      	ldr	r3, [r4, #12]
 800bd1e:	782a      	ldrb	r2, [r5, #0]
 800bd20:	1c6e      	adds	r6, r5, #1
 800bd22:	3a30      	subs	r2, #48	; 0x30
 800bd24:	2a09      	cmp	r2, #9
 800bd26:	d94e      	bls.n	800bdc6 <_svfiprintf_r+0x17a>
 800bd28:	2900      	cmp	r1, #0
 800bd2a:	d111      	bne.n	800bd50 <_svfiprintf_r+0x104>
 800bd2c:	e017      	b.n	800bd5e <_svfiprintf_r+0x112>
 800bd2e:	3501      	adds	r5, #1
 800bd30:	e7b0      	b.n	800bc94 <_svfiprintf_r+0x48>
 800bd32:	4b41      	ldr	r3, [pc, #260]	; (800be38 <_svfiprintf_r+0x1ec>)
 800bd34:	6822      	ldr	r2, [r4, #0]
 800bd36:	1ac0      	subs	r0, r0, r3
 800bd38:	2301      	movs	r3, #1
 800bd3a:	4083      	lsls	r3, r0
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	002e      	movs	r6, r5
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	e7ce      	b.n	800bce2 <_svfiprintf_r+0x96>
 800bd44:	9b07      	ldr	r3, [sp, #28]
 800bd46:	1d19      	adds	r1, r3, #4
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	9107      	str	r1, [sp, #28]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	db01      	blt.n	800bd54 <_svfiprintf_r+0x108>
 800bd50:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd52:	e004      	b.n	800bd5e <_svfiprintf_r+0x112>
 800bd54:	425b      	negs	r3, r3
 800bd56:	60e3      	str	r3, [r4, #12]
 800bd58:	2302      	movs	r3, #2
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	782b      	ldrb	r3, [r5, #0]
 800bd60:	2b2e      	cmp	r3, #46	; 0x2e
 800bd62:	d10a      	bne.n	800bd7a <_svfiprintf_r+0x12e>
 800bd64:	786b      	ldrb	r3, [r5, #1]
 800bd66:	2b2a      	cmp	r3, #42	; 0x2a
 800bd68:	d135      	bne.n	800bdd6 <_svfiprintf_r+0x18a>
 800bd6a:	9b07      	ldr	r3, [sp, #28]
 800bd6c:	3502      	adds	r5, #2
 800bd6e:	1d1a      	adds	r2, r3, #4
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	9207      	str	r2, [sp, #28]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	db2b      	blt.n	800bdd0 <_svfiprintf_r+0x184>
 800bd78:	9309      	str	r3, [sp, #36]	; 0x24
 800bd7a:	4e30      	ldr	r6, [pc, #192]	; (800be3c <_svfiprintf_r+0x1f0>)
 800bd7c:	2203      	movs	r2, #3
 800bd7e:	0030      	movs	r0, r6
 800bd80:	7829      	ldrb	r1, [r5, #0]
 800bd82:	f7ff faa1 	bl	800b2c8 <memchr>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d006      	beq.n	800bd98 <_svfiprintf_r+0x14c>
 800bd8a:	2340      	movs	r3, #64	; 0x40
 800bd8c:	1b80      	subs	r0, r0, r6
 800bd8e:	4083      	lsls	r3, r0
 800bd90:	6822      	ldr	r2, [r4, #0]
 800bd92:	3501      	adds	r5, #1
 800bd94:	4313      	orrs	r3, r2
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	7829      	ldrb	r1, [r5, #0]
 800bd9a:	2206      	movs	r2, #6
 800bd9c:	4828      	ldr	r0, [pc, #160]	; (800be40 <_svfiprintf_r+0x1f4>)
 800bd9e:	1c6e      	adds	r6, r5, #1
 800bda0:	7621      	strb	r1, [r4, #24]
 800bda2:	f7ff fa91 	bl	800b2c8 <memchr>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d03c      	beq.n	800be24 <_svfiprintf_r+0x1d8>
 800bdaa:	4b26      	ldr	r3, [pc, #152]	; (800be44 <_svfiprintf_r+0x1f8>)
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d125      	bne.n	800bdfc <_svfiprintf_r+0x1b0>
 800bdb0:	2207      	movs	r2, #7
 800bdb2:	9b07      	ldr	r3, [sp, #28]
 800bdb4:	3307      	adds	r3, #7
 800bdb6:	4393      	bics	r3, r2
 800bdb8:	3308      	adds	r3, #8
 800bdba:	9307      	str	r3, [sp, #28]
 800bdbc:	6963      	ldr	r3, [r4, #20]
 800bdbe:	9a04      	ldr	r2, [sp, #16]
 800bdc0:	189b      	adds	r3, r3, r2
 800bdc2:	6163      	str	r3, [r4, #20]
 800bdc4:	e765      	b.n	800bc92 <_svfiprintf_r+0x46>
 800bdc6:	4343      	muls	r3, r0
 800bdc8:	0035      	movs	r5, r6
 800bdca:	2101      	movs	r1, #1
 800bdcc:	189b      	adds	r3, r3, r2
 800bdce:	e7a6      	b.n	800bd1e <_svfiprintf_r+0xd2>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	425b      	negs	r3, r3
 800bdd4:	e7d0      	b.n	800bd78 <_svfiprintf_r+0x12c>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	200a      	movs	r0, #10
 800bdda:	001a      	movs	r2, r3
 800bddc:	3501      	adds	r5, #1
 800bdde:	6063      	str	r3, [r4, #4]
 800bde0:	7829      	ldrb	r1, [r5, #0]
 800bde2:	1c6e      	adds	r6, r5, #1
 800bde4:	3930      	subs	r1, #48	; 0x30
 800bde6:	2909      	cmp	r1, #9
 800bde8:	d903      	bls.n	800bdf2 <_svfiprintf_r+0x1a6>
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d0c5      	beq.n	800bd7a <_svfiprintf_r+0x12e>
 800bdee:	9209      	str	r2, [sp, #36]	; 0x24
 800bdf0:	e7c3      	b.n	800bd7a <_svfiprintf_r+0x12e>
 800bdf2:	4342      	muls	r2, r0
 800bdf4:	0035      	movs	r5, r6
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	1852      	adds	r2, r2, r1
 800bdfa:	e7f1      	b.n	800bde0 <_svfiprintf_r+0x194>
 800bdfc:	ab07      	add	r3, sp, #28
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	003a      	movs	r2, r7
 800be02:	0021      	movs	r1, r4
 800be04:	4b10      	ldr	r3, [pc, #64]	; (800be48 <_svfiprintf_r+0x1fc>)
 800be06:	9803      	ldr	r0, [sp, #12]
 800be08:	f7fd ffa0 	bl	8009d4c <_printf_float>
 800be0c:	9004      	str	r0, [sp, #16]
 800be0e:	9b04      	ldr	r3, [sp, #16]
 800be10:	3301      	adds	r3, #1
 800be12:	d1d3      	bne.n	800bdbc <_svfiprintf_r+0x170>
 800be14:	89bb      	ldrh	r3, [r7, #12]
 800be16:	980d      	ldr	r0, [sp, #52]	; 0x34
 800be18:	065b      	lsls	r3, r3, #25
 800be1a:	d400      	bmi.n	800be1e <_svfiprintf_r+0x1d2>
 800be1c:	e72d      	b.n	800bc7a <_svfiprintf_r+0x2e>
 800be1e:	2001      	movs	r0, #1
 800be20:	4240      	negs	r0, r0
 800be22:	e72a      	b.n	800bc7a <_svfiprintf_r+0x2e>
 800be24:	ab07      	add	r3, sp, #28
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	003a      	movs	r2, r7
 800be2a:	0021      	movs	r1, r4
 800be2c:	4b06      	ldr	r3, [pc, #24]	; (800be48 <_svfiprintf_r+0x1fc>)
 800be2e:	9803      	ldr	r0, [sp, #12]
 800be30:	f7fe fa4a 	bl	800a2c8 <_printf_i>
 800be34:	e7ea      	b.n	800be0c <_svfiprintf_r+0x1c0>
 800be36:	46c0      	nop			; (mov r8, r8)
 800be38:	0800dbdc 	.word	0x0800dbdc
 800be3c:	0800dbe2 	.word	0x0800dbe2
 800be40:	0800dbe6 	.word	0x0800dbe6
 800be44:	08009d4d 	.word	0x08009d4d
 800be48:	0800bb89 	.word	0x0800bb89

0800be4c <_sbrk_r>:
 800be4c:	2300      	movs	r3, #0
 800be4e:	b570      	push	{r4, r5, r6, lr}
 800be50:	4d06      	ldr	r5, [pc, #24]	; (800be6c <_sbrk_r+0x20>)
 800be52:	0004      	movs	r4, r0
 800be54:	0008      	movs	r0, r1
 800be56:	602b      	str	r3, [r5, #0]
 800be58:	f7fd fdfe 	bl	8009a58 <_sbrk>
 800be5c:	1c43      	adds	r3, r0, #1
 800be5e:	d103      	bne.n	800be68 <_sbrk_r+0x1c>
 800be60:	682b      	ldr	r3, [r5, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d000      	beq.n	800be68 <_sbrk_r+0x1c>
 800be66:	6023      	str	r3, [r4, #0]
 800be68:	bd70      	pop	{r4, r5, r6, pc}
 800be6a:	46c0      	nop			; (mov r8, r8)
 800be6c:	20000fcc 	.word	0x20000fcc

0800be70 <__assert_func>:
 800be70:	b530      	push	{r4, r5, lr}
 800be72:	0014      	movs	r4, r2
 800be74:	001a      	movs	r2, r3
 800be76:	4b09      	ldr	r3, [pc, #36]	; (800be9c <__assert_func+0x2c>)
 800be78:	0005      	movs	r5, r0
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	b085      	sub	sp, #20
 800be7e:	68d8      	ldr	r0, [r3, #12]
 800be80:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <__assert_func+0x30>)
 800be82:	2c00      	cmp	r4, #0
 800be84:	d101      	bne.n	800be8a <__assert_func+0x1a>
 800be86:	4b07      	ldr	r3, [pc, #28]	; (800bea4 <__assert_func+0x34>)
 800be88:	001c      	movs	r4, r3
 800be8a:	9301      	str	r3, [sp, #4]
 800be8c:	9100      	str	r1, [sp, #0]
 800be8e:	002b      	movs	r3, r5
 800be90:	4905      	ldr	r1, [pc, #20]	; (800bea8 <__assert_func+0x38>)
 800be92:	9402      	str	r4, [sp, #8]
 800be94:	f000 f80a 	bl	800beac <fiprintf>
 800be98:	f000 fab2 	bl	800c400 <abort>
 800be9c:	2000003c 	.word	0x2000003c
 800bea0:	0800dbed 	.word	0x0800dbed
 800bea4:	0800dc28 	.word	0x0800dc28
 800bea8:	0800dbfa 	.word	0x0800dbfa

0800beac <fiprintf>:
 800beac:	b40e      	push	{r1, r2, r3}
 800beae:	b503      	push	{r0, r1, lr}
 800beb0:	0001      	movs	r1, r0
 800beb2:	ab03      	add	r3, sp, #12
 800beb4:	4804      	ldr	r0, [pc, #16]	; (800bec8 <fiprintf+0x1c>)
 800beb6:	cb04      	ldmia	r3!, {r2}
 800beb8:	6800      	ldr	r0, [r0, #0]
 800beba:	9301      	str	r3, [sp, #4]
 800bebc:	f000 f88a 	bl	800bfd4 <_vfiprintf_r>
 800bec0:	b002      	add	sp, #8
 800bec2:	bc08      	pop	{r3}
 800bec4:	b003      	add	sp, #12
 800bec6:	4718      	bx	r3
 800bec8:	2000003c 	.word	0x2000003c

0800becc <__ascii_mbtowc>:
 800becc:	b082      	sub	sp, #8
 800bece:	2900      	cmp	r1, #0
 800bed0:	d100      	bne.n	800bed4 <__ascii_mbtowc+0x8>
 800bed2:	a901      	add	r1, sp, #4
 800bed4:	1e10      	subs	r0, r2, #0
 800bed6:	d006      	beq.n	800bee6 <__ascii_mbtowc+0x1a>
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d006      	beq.n	800beea <__ascii_mbtowc+0x1e>
 800bedc:	7813      	ldrb	r3, [r2, #0]
 800bede:	600b      	str	r3, [r1, #0]
 800bee0:	7810      	ldrb	r0, [r2, #0]
 800bee2:	1e43      	subs	r3, r0, #1
 800bee4:	4198      	sbcs	r0, r3
 800bee6:	b002      	add	sp, #8
 800bee8:	4770      	bx	lr
 800beea:	2002      	movs	r0, #2
 800beec:	4240      	negs	r0, r0
 800beee:	e7fa      	b.n	800bee6 <__ascii_mbtowc+0x1a>

0800bef0 <memmove>:
 800bef0:	b510      	push	{r4, lr}
 800bef2:	4288      	cmp	r0, r1
 800bef4:	d902      	bls.n	800befc <memmove+0xc>
 800bef6:	188b      	adds	r3, r1, r2
 800bef8:	4298      	cmp	r0, r3
 800befa:	d303      	bcc.n	800bf04 <memmove+0x14>
 800befc:	2300      	movs	r3, #0
 800befe:	e007      	b.n	800bf10 <memmove+0x20>
 800bf00:	5c8b      	ldrb	r3, [r1, r2]
 800bf02:	5483      	strb	r3, [r0, r2]
 800bf04:	3a01      	subs	r2, #1
 800bf06:	d2fb      	bcs.n	800bf00 <memmove+0x10>
 800bf08:	bd10      	pop	{r4, pc}
 800bf0a:	5ccc      	ldrb	r4, [r1, r3]
 800bf0c:	54c4      	strb	r4, [r0, r3]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d1fa      	bne.n	800bf0a <memmove+0x1a>
 800bf14:	e7f8      	b.n	800bf08 <memmove+0x18>
	...

0800bf18 <__malloc_lock>:
 800bf18:	b510      	push	{r4, lr}
 800bf1a:	4802      	ldr	r0, [pc, #8]	; (800bf24 <__malloc_lock+0xc>)
 800bf1c:	f000 fc47 	bl	800c7ae <__retarget_lock_acquire_recursive>
 800bf20:	bd10      	pop	{r4, pc}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	20000fd4 	.word	0x20000fd4

0800bf28 <__malloc_unlock>:
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	4802      	ldr	r0, [pc, #8]	; (800bf34 <__malloc_unlock+0xc>)
 800bf2c:	f000 fc40 	bl	800c7b0 <__retarget_lock_release_recursive>
 800bf30:	bd10      	pop	{r4, pc}
 800bf32:	46c0      	nop			; (mov r8, r8)
 800bf34:	20000fd4 	.word	0x20000fd4

0800bf38 <_realloc_r>:
 800bf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3a:	0007      	movs	r7, r0
 800bf3c:	000d      	movs	r5, r1
 800bf3e:	0016      	movs	r6, r2
 800bf40:	2900      	cmp	r1, #0
 800bf42:	d105      	bne.n	800bf50 <_realloc_r+0x18>
 800bf44:	0011      	movs	r1, r2
 800bf46:	f7ff fdc1 	bl	800bacc <_malloc_r>
 800bf4a:	0004      	movs	r4, r0
 800bf4c:	0020      	movs	r0, r4
 800bf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf50:	2a00      	cmp	r2, #0
 800bf52:	d103      	bne.n	800bf5c <_realloc_r+0x24>
 800bf54:	f7ff fd70 	bl	800ba38 <_free_r>
 800bf58:	0034      	movs	r4, r6
 800bf5a:	e7f7      	b.n	800bf4c <_realloc_r+0x14>
 800bf5c:	f000 fc96 	bl	800c88c <_malloc_usable_size_r>
 800bf60:	002c      	movs	r4, r5
 800bf62:	42b0      	cmp	r0, r6
 800bf64:	d2f2      	bcs.n	800bf4c <_realloc_r+0x14>
 800bf66:	0031      	movs	r1, r6
 800bf68:	0038      	movs	r0, r7
 800bf6a:	f7ff fdaf 	bl	800bacc <_malloc_r>
 800bf6e:	1e04      	subs	r4, r0, #0
 800bf70:	d0ec      	beq.n	800bf4c <_realloc_r+0x14>
 800bf72:	0029      	movs	r1, r5
 800bf74:	0032      	movs	r2, r6
 800bf76:	f7fd fe2d 	bl	8009bd4 <memcpy>
 800bf7a:	0029      	movs	r1, r5
 800bf7c:	0038      	movs	r0, r7
 800bf7e:	f7ff fd5b 	bl	800ba38 <_free_r>
 800bf82:	e7e3      	b.n	800bf4c <_realloc_r+0x14>

0800bf84 <__sfputc_r>:
 800bf84:	6893      	ldr	r3, [r2, #8]
 800bf86:	b510      	push	{r4, lr}
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	6093      	str	r3, [r2, #8]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	da04      	bge.n	800bf9a <__sfputc_r+0x16>
 800bf90:	6994      	ldr	r4, [r2, #24]
 800bf92:	42a3      	cmp	r3, r4
 800bf94:	db07      	blt.n	800bfa6 <__sfputc_r+0x22>
 800bf96:	290a      	cmp	r1, #10
 800bf98:	d005      	beq.n	800bfa6 <__sfputc_r+0x22>
 800bf9a:	6813      	ldr	r3, [r2, #0]
 800bf9c:	1c58      	adds	r0, r3, #1
 800bf9e:	6010      	str	r0, [r2, #0]
 800bfa0:	7019      	strb	r1, [r3, #0]
 800bfa2:	0008      	movs	r0, r1
 800bfa4:	bd10      	pop	{r4, pc}
 800bfa6:	f000 f94f 	bl	800c248 <__swbuf_r>
 800bfaa:	0001      	movs	r1, r0
 800bfac:	e7f9      	b.n	800bfa2 <__sfputc_r+0x1e>

0800bfae <__sfputs_r>:
 800bfae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb0:	0006      	movs	r6, r0
 800bfb2:	000f      	movs	r7, r1
 800bfb4:	0014      	movs	r4, r2
 800bfb6:	18d5      	adds	r5, r2, r3
 800bfb8:	42ac      	cmp	r4, r5
 800bfba:	d101      	bne.n	800bfc0 <__sfputs_r+0x12>
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	e007      	b.n	800bfd0 <__sfputs_r+0x22>
 800bfc0:	7821      	ldrb	r1, [r4, #0]
 800bfc2:	003a      	movs	r2, r7
 800bfc4:	0030      	movs	r0, r6
 800bfc6:	f7ff ffdd 	bl	800bf84 <__sfputc_r>
 800bfca:	3401      	adds	r4, #1
 800bfcc:	1c43      	adds	r3, r0, #1
 800bfce:	d1f3      	bne.n	800bfb8 <__sfputs_r+0xa>
 800bfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bfd4 <_vfiprintf_r>:
 800bfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd6:	b0a1      	sub	sp, #132	; 0x84
 800bfd8:	0006      	movs	r6, r0
 800bfda:	000c      	movs	r4, r1
 800bfdc:	001f      	movs	r7, r3
 800bfde:	9203      	str	r2, [sp, #12]
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d004      	beq.n	800bfee <_vfiprintf_r+0x1a>
 800bfe4:	6983      	ldr	r3, [r0, #24]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <_vfiprintf_r+0x1a>
 800bfea:	f000 fb3f 	bl	800c66c <__sinit>
 800bfee:	4b8e      	ldr	r3, [pc, #568]	; (800c228 <_vfiprintf_r+0x254>)
 800bff0:	429c      	cmp	r4, r3
 800bff2:	d11c      	bne.n	800c02e <_vfiprintf_r+0x5a>
 800bff4:	6874      	ldr	r4, [r6, #4]
 800bff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bff8:	07db      	lsls	r3, r3, #31
 800bffa:	d405      	bmi.n	800c008 <_vfiprintf_r+0x34>
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	059b      	lsls	r3, r3, #22
 800c000:	d402      	bmi.n	800c008 <_vfiprintf_r+0x34>
 800c002:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c004:	f000 fbd3 	bl	800c7ae <__retarget_lock_acquire_recursive>
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	071b      	lsls	r3, r3, #28
 800c00c:	d502      	bpl.n	800c014 <_vfiprintf_r+0x40>
 800c00e:	6923      	ldr	r3, [r4, #16]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d11d      	bne.n	800c050 <_vfiprintf_r+0x7c>
 800c014:	0021      	movs	r1, r4
 800c016:	0030      	movs	r0, r6
 800c018:	f000 f97a 	bl	800c310 <__swsetup_r>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d017      	beq.n	800c050 <_vfiprintf_r+0x7c>
 800c020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c022:	07db      	lsls	r3, r3, #31
 800c024:	d50d      	bpl.n	800c042 <_vfiprintf_r+0x6e>
 800c026:	2001      	movs	r0, #1
 800c028:	4240      	negs	r0, r0
 800c02a:	b021      	add	sp, #132	; 0x84
 800c02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c02e:	4b7f      	ldr	r3, [pc, #508]	; (800c22c <_vfiprintf_r+0x258>)
 800c030:	429c      	cmp	r4, r3
 800c032:	d101      	bne.n	800c038 <_vfiprintf_r+0x64>
 800c034:	68b4      	ldr	r4, [r6, #8]
 800c036:	e7de      	b.n	800bff6 <_vfiprintf_r+0x22>
 800c038:	4b7d      	ldr	r3, [pc, #500]	; (800c230 <_vfiprintf_r+0x25c>)
 800c03a:	429c      	cmp	r4, r3
 800c03c:	d1db      	bne.n	800bff6 <_vfiprintf_r+0x22>
 800c03e:	68f4      	ldr	r4, [r6, #12]
 800c040:	e7d9      	b.n	800bff6 <_vfiprintf_r+0x22>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	059b      	lsls	r3, r3, #22
 800c046:	d4ee      	bmi.n	800c026 <_vfiprintf_r+0x52>
 800c048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c04a:	f000 fbb1 	bl	800c7b0 <__retarget_lock_release_recursive>
 800c04e:	e7ea      	b.n	800c026 <_vfiprintf_r+0x52>
 800c050:	2300      	movs	r3, #0
 800c052:	ad08      	add	r5, sp, #32
 800c054:	616b      	str	r3, [r5, #20]
 800c056:	3320      	adds	r3, #32
 800c058:	766b      	strb	r3, [r5, #25]
 800c05a:	3310      	adds	r3, #16
 800c05c:	76ab      	strb	r3, [r5, #26]
 800c05e:	9707      	str	r7, [sp, #28]
 800c060:	9f03      	ldr	r7, [sp, #12]
 800c062:	783b      	ldrb	r3, [r7, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <_vfiprintf_r+0x98>
 800c068:	2b25      	cmp	r3, #37	; 0x25
 800c06a:	d14e      	bne.n	800c10a <_vfiprintf_r+0x136>
 800c06c:	9b03      	ldr	r3, [sp, #12]
 800c06e:	1afb      	subs	r3, r7, r3
 800c070:	9305      	str	r3, [sp, #20]
 800c072:	9b03      	ldr	r3, [sp, #12]
 800c074:	429f      	cmp	r7, r3
 800c076:	d00d      	beq.n	800c094 <_vfiprintf_r+0xc0>
 800c078:	9b05      	ldr	r3, [sp, #20]
 800c07a:	0021      	movs	r1, r4
 800c07c:	0030      	movs	r0, r6
 800c07e:	9a03      	ldr	r2, [sp, #12]
 800c080:	f7ff ff95 	bl	800bfae <__sfputs_r>
 800c084:	1c43      	adds	r3, r0, #1
 800c086:	d100      	bne.n	800c08a <_vfiprintf_r+0xb6>
 800c088:	e0b5      	b.n	800c1f6 <_vfiprintf_r+0x222>
 800c08a:	696a      	ldr	r2, [r5, #20]
 800c08c:	9b05      	ldr	r3, [sp, #20]
 800c08e:	4694      	mov	ip, r2
 800c090:	4463      	add	r3, ip
 800c092:	616b      	str	r3, [r5, #20]
 800c094:	783b      	ldrb	r3, [r7, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d100      	bne.n	800c09c <_vfiprintf_r+0xc8>
 800c09a:	e0ac      	b.n	800c1f6 <_vfiprintf_r+0x222>
 800c09c:	2201      	movs	r2, #1
 800c09e:	1c7b      	adds	r3, r7, #1
 800c0a0:	9303      	str	r3, [sp, #12]
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	4252      	negs	r2, r2
 800c0a6:	606a      	str	r2, [r5, #4]
 800c0a8:	a904      	add	r1, sp, #16
 800c0aa:	3254      	adds	r2, #84	; 0x54
 800c0ac:	1852      	adds	r2, r2, r1
 800c0ae:	602b      	str	r3, [r5, #0]
 800c0b0:	60eb      	str	r3, [r5, #12]
 800c0b2:	60ab      	str	r3, [r5, #8]
 800c0b4:	7013      	strb	r3, [r2, #0]
 800c0b6:	65ab      	str	r3, [r5, #88]	; 0x58
 800c0b8:	9b03      	ldr	r3, [sp, #12]
 800c0ba:	2205      	movs	r2, #5
 800c0bc:	7819      	ldrb	r1, [r3, #0]
 800c0be:	485d      	ldr	r0, [pc, #372]	; (800c234 <_vfiprintf_r+0x260>)
 800c0c0:	f7ff f902 	bl	800b2c8 <memchr>
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	1c5f      	adds	r7, r3, #1
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d120      	bne.n	800c10e <_vfiprintf_r+0x13a>
 800c0cc:	682a      	ldr	r2, [r5, #0]
 800c0ce:	06d3      	lsls	r3, r2, #27
 800c0d0:	d504      	bpl.n	800c0dc <_vfiprintf_r+0x108>
 800c0d2:	2353      	movs	r3, #83	; 0x53
 800c0d4:	a904      	add	r1, sp, #16
 800c0d6:	185b      	adds	r3, r3, r1
 800c0d8:	2120      	movs	r1, #32
 800c0da:	7019      	strb	r1, [r3, #0]
 800c0dc:	0713      	lsls	r3, r2, #28
 800c0de:	d504      	bpl.n	800c0ea <_vfiprintf_r+0x116>
 800c0e0:	2353      	movs	r3, #83	; 0x53
 800c0e2:	a904      	add	r1, sp, #16
 800c0e4:	185b      	adds	r3, r3, r1
 800c0e6:	212b      	movs	r1, #43	; 0x2b
 800c0e8:	7019      	strb	r1, [r3, #0]
 800c0ea:	9b03      	ldr	r3, [sp, #12]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f0:	d016      	beq.n	800c120 <_vfiprintf_r+0x14c>
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	68eb      	ldr	r3, [r5, #12]
 800c0f6:	9f03      	ldr	r7, [sp, #12]
 800c0f8:	783a      	ldrb	r2, [r7, #0]
 800c0fa:	1c78      	adds	r0, r7, #1
 800c0fc:	3a30      	subs	r2, #48	; 0x30
 800c0fe:	4684      	mov	ip, r0
 800c100:	2a09      	cmp	r2, #9
 800c102:	d94f      	bls.n	800c1a4 <_vfiprintf_r+0x1d0>
 800c104:	2900      	cmp	r1, #0
 800c106:	d111      	bne.n	800c12c <_vfiprintf_r+0x158>
 800c108:	e017      	b.n	800c13a <_vfiprintf_r+0x166>
 800c10a:	3701      	adds	r7, #1
 800c10c:	e7a9      	b.n	800c062 <_vfiprintf_r+0x8e>
 800c10e:	4b49      	ldr	r3, [pc, #292]	; (800c234 <_vfiprintf_r+0x260>)
 800c110:	682a      	ldr	r2, [r5, #0]
 800c112:	1ac0      	subs	r0, r0, r3
 800c114:	2301      	movs	r3, #1
 800c116:	4083      	lsls	r3, r0
 800c118:	4313      	orrs	r3, r2
 800c11a:	602b      	str	r3, [r5, #0]
 800c11c:	9703      	str	r7, [sp, #12]
 800c11e:	e7cb      	b.n	800c0b8 <_vfiprintf_r+0xe4>
 800c120:	9b07      	ldr	r3, [sp, #28]
 800c122:	1d19      	adds	r1, r3, #4
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	9107      	str	r1, [sp, #28]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	db01      	blt.n	800c130 <_vfiprintf_r+0x15c>
 800c12c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c12e:	e004      	b.n	800c13a <_vfiprintf_r+0x166>
 800c130:	425b      	negs	r3, r3
 800c132:	60eb      	str	r3, [r5, #12]
 800c134:	2302      	movs	r3, #2
 800c136:	4313      	orrs	r3, r2
 800c138:	602b      	str	r3, [r5, #0]
 800c13a:	783b      	ldrb	r3, [r7, #0]
 800c13c:	2b2e      	cmp	r3, #46	; 0x2e
 800c13e:	d10a      	bne.n	800c156 <_vfiprintf_r+0x182>
 800c140:	787b      	ldrb	r3, [r7, #1]
 800c142:	2b2a      	cmp	r3, #42	; 0x2a
 800c144:	d137      	bne.n	800c1b6 <_vfiprintf_r+0x1e2>
 800c146:	9b07      	ldr	r3, [sp, #28]
 800c148:	3702      	adds	r7, #2
 800c14a:	1d1a      	adds	r2, r3, #4
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	9207      	str	r2, [sp, #28]
 800c150:	2b00      	cmp	r3, #0
 800c152:	db2d      	blt.n	800c1b0 <_vfiprintf_r+0x1dc>
 800c154:	9309      	str	r3, [sp, #36]	; 0x24
 800c156:	2203      	movs	r2, #3
 800c158:	7839      	ldrb	r1, [r7, #0]
 800c15a:	4837      	ldr	r0, [pc, #220]	; (800c238 <_vfiprintf_r+0x264>)
 800c15c:	f7ff f8b4 	bl	800b2c8 <memchr>
 800c160:	2800      	cmp	r0, #0
 800c162:	d007      	beq.n	800c174 <_vfiprintf_r+0x1a0>
 800c164:	4b34      	ldr	r3, [pc, #208]	; (800c238 <_vfiprintf_r+0x264>)
 800c166:	682a      	ldr	r2, [r5, #0]
 800c168:	1ac0      	subs	r0, r0, r3
 800c16a:	2340      	movs	r3, #64	; 0x40
 800c16c:	4083      	lsls	r3, r0
 800c16e:	4313      	orrs	r3, r2
 800c170:	3701      	adds	r7, #1
 800c172:	602b      	str	r3, [r5, #0]
 800c174:	7839      	ldrb	r1, [r7, #0]
 800c176:	1c7b      	adds	r3, r7, #1
 800c178:	2206      	movs	r2, #6
 800c17a:	4830      	ldr	r0, [pc, #192]	; (800c23c <_vfiprintf_r+0x268>)
 800c17c:	9303      	str	r3, [sp, #12]
 800c17e:	7629      	strb	r1, [r5, #24]
 800c180:	f7ff f8a2 	bl	800b2c8 <memchr>
 800c184:	2800      	cmp	r0, #0
 800c186:	d045      	beq.n	800c214 <_vfiprintf_r+0x240>
 800c188:	4b2d      	ldr	r3, [pc, #180]	; (800c240 <_vfiprintf_r+0x26c>)
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d127      	bne.n	800c1de <_vfiprintf_r+0x20a>
 800c18e:	2207      	movs	r2, #7
 800c190:	9b07      	ldr	r3, [sp, #28]
 800c192:	3307      	adds	r3, #7
 800c194:	4393      	bics	r3, r2
 800c196:	3308      	adds	r3, #8
 800c198:	9307      	str	r3, [sp, #28]
 800c19a:	696b      	ldr	r3, [r5, #20]
 800c19c:	9a04      	ldr	r2, [sp, #16]
 800c19e:	189b      	adds	r3, r3, r2
 800c1a0:	616b      	str	r3, [r5, #20]
 800c1a2:	e75d      	b.n	800c060 <_vfiprintf_r+0x8c>
 800c1a4:	210a      	movs	r1, #10
 800c1a6:	434b      	muls	r3, r1
 800c1a8:	4667      	mov	r7, ip
 800c1aa:	189b      	adds	r3, r3, r2
 800c1ac:	3909      	subs	r1, #9
 800c1ae:	e7a3      	b.n	800c0f8 <_vfiprintf_r+0x124>
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	425b      	negs	r3, r3
 800c1b4:	e7ce      	b.n	800c154 <_vfiprintf_r+0x180>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	001a      	movs	r2, r3
 800c1ba:	3701      	adds	r7, #1
 800c1bc:	606b      	str	r3, [r5, #4]
 800c1be:	7839      	ldrb	r1, [r7, #0]
 800c1c0:	1c78      	adds	r0, r7, #1
 800c1c2:	3930      	subs	r1, #48	; 0x30
 800c1c4:	4684      	mov	ip, r0
 800c1c6:	2909      	cmp	r1, #9
 800c1c8:	d903      	bls.n	800c1d2 <_vfiprintf_r+0x1fe>
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d0c3      	beq.n	800c156 <_vfiprintf_r+0x182>
 800c1ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c1d0:	e7c1      	b.n	800c156 <_vfiprintf_r+0x182>
 800c1d2:	230a      	movs	r3, #10
 800c1d4:	435a      	muls	r2, r3
 800c1d6:	4667      	mov	r7, ip
 800c1d8:	1852      	adds	r2, r2, r1
 800c1da:	3b09      	subs	r3, #9
 800c1dc:	e7ef      	b.n	800c1be <_vfiprintf_r+0x1ea>
 800c1de:	ab07      	add	r3, sp, #28
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	0022      	movs	r2, r4
 800c1e4:	0029      	movs	r1, r5
 800c1e6:	0030      	movs	r0, r6
 800c1e8:	4b16      	ldr	r3, [pc, #88]	; (800c244 <_vfiprintf_r+0x270>)
 800c1ea:	f7fd fdaf 	bl	8009d4c <_printf_float>
 800c1ee:	9004      	str	r0, [sp, #16]
 800c1f0:	9b04      	ldr	r3, [sp, #16]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	d1d1      	bne.n	800c19a <_vfiprintf_r+0x1c6>
 800c1f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1f8:	07db      	lsls	r3, r3, #31
 800c1fa:	d405      	bmi.n	800c208 <_vfiprintf_r+0x234>
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	059b      	lsls	r3, r3, #22
 800c200:	d402      	bmi.n	800c208 <_vfiprintf_r+0x234>
 800c202:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c204:	f000 fad4 	bl	800c7b0 <__retarget_lock_release_recursive>
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	065b      	lsls	r3, r3, #25
 800c20c:	d500      	bpl.n	800c210 <_vfiprintf_r+0x23c>
 800c20e:	e70a      	b.n	800c026 <_vfiprintf_r+0x52>
 800c210:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c212:	e70a      	b.n	800c02a <_vfiprintf_r+0x56>
 800c214:	ab07      	add	r3, sp, #28
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	0022      	movs	r2, r4
 800c21a:	0029      	movs	r1, r5
 800c21c:	0030      	movs	r0, r6
 800c21e:	4b09      	ldr	r3, [pc, #36]	; (800c244 <_vfiprintf_r+0x270>)
 800c220:	f7fe f852 	bl	800a2c8 <_printf_i>
 800c224:	e7e3      	b.n	800c1ee <_vfiprintf_r+0x21a>
 800c226:	46c0      	nop			; (mov r8, r8)
 800c228:	0800dd54 	.word	0x0800dd54
 800c22c:	0800dd74 	.word	0x0800dd74
 800c230:	0800dd34 	.word	0x0800dd34
 800c234:	0800dbdc 	.word	0x0800dbdc
 800c238:	0800dbe2 	.word	0x0800dbe2
 800c23c:	0800dbe6 	.word	0x0800dbe6
 800c240:	08009d4d 	.word	0x08009d4d
 800c244:	0800bfaf 	.word	0x0800bfaf

0800c248 <__swbuf_r>:
 800c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24a:	0005      	movs	r5, r0
 800c24c:	000e      	movs	r6, r1
 800c24e:	0014      	movs	r4, r2
 800c250:	2800      	cmp	r0, #0
 800c252:	d004      	beq.n	800c25e <__swbuf_r+0x16>
 800c254:	6983      	ldr	r3, [r0, #24]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d101      	bne.n	800c25e <__swbuf_r+0x16>
 800c25a:	f000 fa07 	bl	800c66c <__sinit>
 800c25e:	4b22      	ldr	r3, [pc, #136]	; (800c2e8 <__swbuf_r+0xa0>)
 800c260:	429c      	cmp	r4, r3
 800c262:	d12e      	bne.n	800c2c2 <__swbuf_r+0x7a>
 800c264:	686c      	ldr	r4, [r5, #4]
 800c266:	69a3      	ldr	r3, [r4, #24]
 800c268:	60a3      	str	r3, [r4, #8]
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	071b      	lsls	r3, r3, #28
 800c26e:	d532      	bpl.n	800c2d6 <__swbuf_r+0x8e>
 800c270:	6923      	ldr	r3, [r4, #16]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d02f      	beq.n	800c2d6 <__swbuf_r+0x8e>
 800c276:	6823      	ldr	r3, [r4, #0]
 800c278:	6922      	ldr	r2, [r4, #16]
 800c27a:	b2f7      	uxtb	r7, r6
 800c27c:	1a98      	subs	r0, r3, r2
 800c27e:	6963      	ldr	r3, [r4, #20]
 800c280:	b2f6      	uxtb	r6, r6
 800c282:	4283      	cmp	r3, r0
 800c284:	dc05      	bgt.n	800c292 <__swbuf_r+0x4a>
 800c286:	0021      	movs	r1, r4
 800c288:	0028      	movs	r0, r5
 800c28a:	f000 f94d 	bl	800c528 <_fflush_r>
 800c28e:	2800      	cmp	r0, #0
 800c290:	d127      	bne.n	800c2e2 <__swbuf_r+0x9a>
 800c292:	68a3      	ldr	r3, [r4, #8]
 800c294:	3001      	adds	r0, #1
 800c296:	3b01      	subs	r3, #1
 800c298:	60a3      	str	r3, [r4, #8]
 800c29a:	6823      	ldr	r3, [r4, #0]
 800c29c:	1c5a      	adds	r2, r3, #1
 800c29e:	6022      	str	r2, [r4, #0]
 800c2a0:	701f      	strb	r7, [r3, #0]
 800c2a2:	6963      	ldr	r3, [r4, #20]
 800c2a4:	4283      	cmp	r3, r0
 800c2a6:	d004      	beq.n	800c2b2 <__swbuf_r+0x6a>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	07db      	lsls	r3, r3, #31
 800c2ac:	d507      	bpl.n	800c2be <__swbuf_r+0x76>
 800c2ae:	2e0a      	cmp	r6, #10
 800c2b0:	d105      	bne.n	800c2be <__swbuf_r+0x76>
 800c2b2:	0021      	movs	r1, r4
 800c2b4:	0028      	movs	r0, r5
 800c2b6:	f000 f937 	bl	800c528 <_fflush_r>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d111      	bne.n	800c2e2 <__swbuf_r+0x9a>
 800c2be:	0030      	movs	r0, r6
 800c2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2c2:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <__swbuf_r+0xa4>)
 800c2c4:	429c      	cmp	r4, r3
 800c2c6:	d101      	bne.n	800c2cc <__swbuf_r+0x84>
 800c2c8:	68ac      	ldr	r4, [r5, #8]
 800c2ca:	e7cc      	b.n	800c266 <__swbuf_r+0x1e>
 800c2cc:	4b08      	ldr	r3, [pc, #32]	; (800c2f0 <__swbuf_r+0xa8>)
 800c2ce:	429c      	cmp	r4, r3
 800c2d0:	d1c9      	bne.n	800c266 <__swbuf_r+0x1e>
 800c2d2:	68ec      	ldr	r4, [r5, #12]
 800c2d4:	e7c7      	b.n	800c266 <__swbuf_r+0x1e>
 800c2d6:	0021      	movs	r1, r4
 800c2d8:	0028      	movs	r0, r5
 800c2da:	f000 f819 	bl	800c310 <__swsetup_r>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d0c9      	beq.n	800c276 <__swbuf_r+0x2e>
 800c2e2:	2601      	movs	r6, #1
 800c2e4:	4276      	negs	r6, r6
 800c2e6:	e7ea      	b.n	800c2be <__swbuf_r+0x76>
 800c2e8:	0800dd54 	.word	0x0800dd54
 800c2ec:	0800dd74 	.word	0x0800dd74
 800c2f0:	0800dd34 	.word	0x0800dd34

0800c2f4 <__ascii_wctomb>:
 800c2f4:	0003      	movs	r3, r0
 800c2f6:	1e08      	subs	r0, r1, #0
 800c2f8:	d005      	beq.n	800c306 <__ascii_wctomb+0x12>
 800c2fa:	2aff      	cmp	r2, #255	; 0xff
 800c2fc:	d904      	bls.n	800c308 <__ascii_wctomb+0x14>
 800c2fe:	228a      	movs	r2, #138	; 0x8a
 800c300:	2001      	movs	r0, #1
 800c302:	601a      	str	r2, [r3, #0]
 800c304:	4240      	negs	r0, r0
 800c306:	4770      	bx	lr
 800c308:	2001      	movs	r0, #1
 800c30a:	700a      	strb	r2, [r1, #0]
 800c30c:	e7fb      	b.n	800c306 <__ascii_wctomb+0x12>
	...

0800c310 <__swsetup_r>:
 800c310:	4b37      	ldr	r3, [pc, #220]	; (800c3f0 <__swsetup_r+0xe0>)
 800c312:	b570      	push	{r4, r5, r6, lr}
 800c314:	681d      	ldr	r5, [r3, #0]
 800c316:	0006      	movs	r6, r0
 800c318:	000c      	movs	r4, r1
 800c31a:	2d00      	cmp	r5, #0
 800c31c:	d005      	beq.n	800c32a <__swsetup_r+0x1a>
 800c31e:	69ab      	ldr	r3, [r5, #24]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d102      	bne.n	800c32a <__swsetup_r+0x1a>
 800c324:	0028      	movs	r0, r5
 800c326:	f000 f9a1 	bl	800c66c <__sinit>
 800c32a:	4b32      	ldr	r3, [pc, #200]	; (800c3f4 <__swsetup_r+0xe4>)
 800c32c:	429c      	cmp	r4, r3
 800c32e:	d10f      	bne.n	800c350 <__swsetup_r+0x40>
 800c330:	686c      	ldr	r4, [r5, #4]
 800c332:	230c      	movs	r3, #12
 800c334:	5ee2      	ldrsh	r2, [r4, r3]
 800c336:	b293      	uxth	r3, r2
 800c338:	0711      	lsls	r1, r2, #28
 800c33a:	d42d      	bmi.n	800c398 <__swsetup_r+0x88>
 800c33c:	06d9      	lsls	r1, r3, #27
 800c33e:	d411      	bmi.n	800c364 <__swsetup_r+0x54>
 800c340:	2309      	movs	r3, #9
 800c342:	2001      	movs	r0, #1
 800c344:	6033      	str	r3, [r6, #0]
 800c346:	3337      	adds	r3, #55	; 0x37
 800c348:	4313      	orrs	r3, r2
 800c34a:	81a3      	strh	r3, [r4, #12]
 800c34c:	4240      	negs	r0, r0
 800c34e:	bd70      	pop	{r4, r5, r6, pc}
 800c350:	4b29      	ldr	r3, [pc, #164]	; (800c3f8 <__swsetup_r+0xe8>)
 800c352:	429c      	cmp	r4, r3
 800c354:	d101      	bne.n	800c35a <__swsetup_r+0x4a>
 800c356:	68ac      	ldr	r4, [r5, #8]
 800c358:	e7eb      	b.n	800c332 <__swsetup_r+0x22>
 800c35a:	4b28      	ldr	r3, [pc, #160]	; (800c3fc <__swsetup_r+0xec>)
 800c35c:	429c      	cmp	r4, r3
 800c35e:	d1e8      	bne.n	800c332 <__swsetup_r+0x22>
 800c360:	68ec      	ldr	r4, [r5, #12]
 800c362:	e7e6      	b.n	800c332 <__swsetup_r+0x22>
 800c364:	075b      	lsls	r3, r3, #29
 800c366:	d513      	bpl.n	800c390 <__swsetup_r+0x80>
 800c368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c36a:	2900      	cmp	r1, #0
 800c36c:	d008      	beq.n	800c380 <__swsetup_r+0x70>
 800c36e:	0023      	movs	r3, r4
 800c370:	3344      	adds	r3, #68	; 0x44
 800c372:	4299      	cmp	r1, r3
 800c374:	d002      	beq.n	800c37c <__swsetup_r+0x6c>
 800c376:	0030      	movs	r0, r6
 800c378:	f7ff fb5e 	bl	800ba38 <_free_r>
 800c37c:	2300      	movs	r3, #0
 800c37e:	6363      	str	r3, [r4, #52]	; 0x34
 800c380:	2224      	movs	r2, #36	; 0x24
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	4393      	bics	r3, r2
 800c386:	81a3      	strh	r3, [r4, #12]
 800c388:	2300      	movs	r3, #0
 800c38a:	6063      	str	r3, [r4, #4]
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	6023      	str	r3, [r4, #0]
 800c390:	2308      	movs	r3, #8
 800c392:	89a2      	ldrh	r2, [r4, #12]
 800c394:	4313      	orrs	r3, r2
 800c396:	81a3      	strh	r3, [r4, #12]
 800c398:	6923      	ldr	r3, [r4, #16]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d10b      	bne.n	800c3b6 <__swsetup_r+0xa6>
 800c39e:	21a0      	movs	r1, #160	; 0xa0
 800c3a0:	2280      	movs	r2, #128	; 0x80
 800c3a2:	89a3      	ldrh	r3, [r4, #12]
 800c3a4:	0089      	lsls	r1, r1, #2
 800c3a6:	0092      	lsls	r2, r2, #2
 800c3a8:	400b      	ands	r3, r1
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d003      	beq.n	800c3b6 <__swsetup_r+0xa6>
 800c3ae:	0021      	movs	r1, r4
 800c3b0:	0030      	movs	r0, r6
 800c3b2:	f000 fa27 	bl	800c804 <__smakebuf_r>
 800c3b6:	220c      	movs	r2, #12
 800c3b8:	5ea3      	ldrsh	r3, [r4, r2]
 800c3ba:	2001      	movs	r0, #1
 800c3bc:	001a      	movs	r2, r3
 800c3be:	b299      	uxth	r1, r3
 800c3c0:	4002      	ands	r2, r0
 800c3c2:	4203      	tst	r3, r0
 800c3c4:	d00f      	beq.n	800c3e6 <__swsetup_r+0xd6>
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	60a2      	str	r2, [r4, #8]
 800c3ca:	6962      	ldr	r2, [r4, #20]
 800c3cc:	4252      	negs	r2, r2
 800c3ce:	61a2      	str	r2, [r4, #24]
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	6922      	ldr	r2, [r4, #16]
 800c3d4:	4282      	cmp	r2, r0
 800c3d6:	d1ba      	bne.n	800c34e <__swsetup_r+0x3e>
 800c3d8:	060a      	lsls	r2, r1, #24
 800c3da:	d5b8      	bpl.n	800c34e <__swsetup_r+0x3e>
 800c3dc:	2240      	movs	r2, #64	; 0x40
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	81a3      	strh	r3, [r4, #12]
 800c3e2:	3801      	subs	r0, #1
 800c3e4:	e7b3      	b.n	800c34e <__swsetup_r+0x3e>
 800c3e6:	0788      	lsls	r0, r1, #30
 800c3e8:	d400      	bmi.n	800c3ec <__swsetup_r+0xdc>
 800c3ea:	6962      	ldr	r2, [r4, #20]
 800c3ec:	60a2      	str	r2, [r4, #8]
 800c3ee:	e7ef      	b.n	800c3d0 <__swsetup_r+0xc0>
 800c3f0:	2000003c 	.word	0x2000003c
 800c3f4:	0800dd54 	.word	0x0800dd54
 800c3f8:	0800dd74 	.word	0x0800dd74
 800c3fc:	0800dd34 	.word	0x0800dd34

0800c400 <abort>:
 800c400:	2006      	movs	r0, #6
 800c402:	b510      	push	{r4, lr}
 800c404:	f000 fa74 	bl	800c8f0 <raise>
 800c408:	2001      	movs	r0, #1
 800c40a:	f7fd fab3 	bl	8009974 <_exit>
	...

0800c410 <__sflush_r>:
 800c410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c412:	898b      	ldrh	r3, [r1, #12]
 800c414:	0005      	movs	r5, r0
 800c416:	000c      	movs	r4, r1
 800c418:	071a      	lsls	r2, r3, #28
 800c41a:	d45f      	bmi.n	800c4dc <__sflush_r+0xcc>
 800c41c:	684a      	ldr	r2, [r1, #4]
 800c41e:	2a00      	cmp	r2, #0
 800c420:	dc04      	bgt.n	800c42c <__sflush_r+0x1c>
 800c422:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c424:	2a00      	cmp	r2, #0
 800c426:	dc01      	bgt.n	800c42c <__sflush_r+0x1c>
 800c428:	2000      	movs	r0, #0
 800c42a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c42c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c42e:	2f00      	cmp	r7, #0
 800c430:	d0fa      	beq.n	800c428 <__sflush_r+0x18>
 800c432:	2200      	movs	r2, #0
 800c434:	2180      	movs	r1, #128	; 0x80
 800c436:	682e      	ldr	r6, [r5, #0]
 800c438:	602a      	str	r2, [r5, #0]
 800c43a:	001a      	movs	r2, r3
 800c43c:	0149      	lsls	r1, r1, #5
 800c43e:	400a      	ands	r2, r1
 800c440:	420b      	tst	r3, r1
 800c442:	d034      	beq.n	800c4ae <__sflush_r+0x9e>
 800c444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c446:	89a3      	ldrh	r3, [r4, #12]
 800c448:	075b      	lsls	r3, r3, #29
 800c44a:	d506      	bpl.n	800c45a <__sflush_r+0x4a>
 800c44c:	6863      	ldr	r3, [r4, #4]
 800c44e:	1ac0      	subs	r0, r0, r3
 800c450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <__sflush_r+0x4a>
 800c456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c458:	1ac0      	subs	r0, r0, r3
 800c45a:	0002      	movs	r2, r0
 800c45c:	6a21      	ldr	r1, [r4, #32]
 800c45e:	2300      	movs	r3, #0
 800c460:	0028      	movs	r0, r5
 800c462:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c464:	47b8      	blx	r7
 800c466:	89a1      	ldrh	r1, [r4, #12]
 800c468:	1c43      	adds	r3, r0, #1
 800c46a:	d106      	bne.n	800c47a <__sflush_r+0x6a>
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	2b1d      	cmp	r3, #29
 800c470:	d831      	bhi.n	800c4d6 <__sflush_r+0xc6>
 800c472:	4a2c      	ldr	r2, [pc, #176]	; (800c524 <__sflush_r+0x114>)
 800c474:	40da      	lsrs	r2, r3
 800c476:	07d3      	lsls	r3, r2, #31
 800c478:	d52d      	bpl.n	800c4d6 <__sflush_r+0xc6>
 800c47a:	2300      	movs	r3, #0
 800c47c:	6063      	str	r3, [r4, #4]
 800c47e:	6923      	ldr	r3, [r4, #16]
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	04cb      	lsls	r3, r1, #19
 800c484:	d505      	bpl.n	800c492 <__sflush_r+0x82>
 800c486:	1c43      	adds	r3, r0, #1
 800c488:	d102      	bne.n	800c490 <__sflush_r+0x80>
 800c48a:	682b      	ldr	r3, [r5, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d100      	bne.n	800c492 <__sflush_r+0x82>
 800c490:	6560      	str	r0, [r4, #84]	; 0x54
 800c492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c494:	602e      	str	r6, [r5, #0]
 800c496:	2900      	cmp	r1, #0
 800c498:	d0c6      	beq.n	800c428 <__sflush_r+0x18>
 800c49a:	0023      	movs	r3, r4
 800c49c:	3344      	adds	r3, #68	; 0x44
 800c49e:	4299      	cmp	r1, r3
 800c4a0:	d002      	beq.n	800c4a8 <__sflush_r+0x98>
 800c4a2:	0028      	movs	r0, r5
 800c4a4:	f7ff fac8 	bl	800ba38 <_free_r>
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	6360      	str	r0, [r4, #52]	; 0x34
 800c4ac:	e7bd      	b.n	800c42a <__sflush_r+0x1a>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	0028      	movs	r0, r5
 800c4b2:	6a21      	ldr	r1, [r4, #32]
 800c4b4:	47b8      	blx	r7
 800c4b6:	1c43      	adds	r3, r0, #1
 800c4b8:	d1c5      	bne.n	800c446 <__sflush_r+0x36>
 800c4ba:	682b      	ldr	r3, [r5, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d0c2      	beq.n	800c446 <__sflush_r+0x36>
 800c4c0:	2b1d      	cmp	r3, #29
 800c4c2:	d001      	beq.n	800c4c8 <__sflush_r+0xb8>
 800c4c4:	2b16      	cmp	r3, #22
 800c4c6:	d101      	bne.n	800c4cc <__sflush_r+0xbc>
 800c4c8:	602e      	str	r6, [r5, #0]
 800c4ca:	e7ad      	b.n	800c428 <__sflush_r+0x18>
 800c4cc:	2340      	movs	r3, #64	; 0x40
 800c4ce:	89a2      	ldrh	r2, [r4, #12]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	81a3      	strh	r3, [r4, #12]
 800c4d4:	e7a9      	b.n	800c42a <__sflush_r+0x1a>
 800c4d6:	2340      	movs	r3, #64	; 0x40
 800c4d8:	430b      	orrs	r3, r1
 800c4da:	e7fa      	b.n	800c4d2 <__sflush_r+0xc2>
 800c4dc:	690f      	ldr	r7, [r1, #16]
 800c4de:	2f00      	cmp	r7, #0
 800c4e0:	d0a2      	beq.n	800c428 <__sflush_r+0x18>
 800c4e2:	680a      	ldr	r2, [r1, #0]
 800c4e4:	600f      	str	r7, [r1, #0]
 800c4e6:	1bd2      	subs	r2, r2, r7
 800c4e8:	9201      	str	r2, [sp, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	079b      	lsls	r3, r3, #30
 800c4ee:	d100      	bne.n	800c4f2 <__sflush_r+0xe2>
 800c4f0:	694a      	ldr	r2, [r1, #20]
 800c4f2:	60a2      	str	r2, [r4, #8]
 800c4f4:	9b01      	ldr	r3, [sp, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	dc00      	bgt.n	800c4fc <__sflush_r+0xec>
 800c4fa:	e795      	b.n	800c428 <__sflush_r+0x18>
 800c4fc:	003a      	movs	r2, r7
 800c4fe:	0028      	movs	r0, r5
 800c500:	9b01      	ldr	r3, [sp, #4]
 800c502:	6a21      	ldr	r1, [r4, #32]
 800c504:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c506:	47b0      	blx	r6
 800c508:	2800      	cmp	r0, #0
 800c50a:	dc06      	bgt.n	800c51a <__sflush_r+0x10a>
 800c50c:	2340      	movs	r3, #64	; 0x40
 800c50e:	2001      	movs	r0, #1
 800c510:	89a2      	ldrh	r2, [r4, #12]
 800c512:	4240      	negs	r0, r0
 800c514:	4313      	orrs	r3, r2
 800c516:	81a3      	strh	r3, [r4, #12]
 800c518:	e787      	b.n	800c42a <__sflush_r+0x1a>
 800c51a:	9b01      	ldr	r3, [sp, #4]
 800c51c:	183f      	adds	r7, r7, r0
 800c51e:	1a1b      	subs	r3, r3, r0
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	e7e7      	b.n	800c4f4 <__sflush_r+0xe4>
 800c524:	20400001 	.word	0x20400001

0800c528 <_fflush_r>:
 800c528:	690b      	ldr	r3, [r1, #16]
 800c52a:	b570      	push	{r4, r5, r6, lr}
 800c52c:	0005      	movs	r5, r0
 800c52e:	000c      	movs	r4, r1
 800c530:	2b00      	cmp	r3, #0
 800c532:	d102      	bne.n	800c53a <_fflush_r+0x12>
 800c534:	2500      	movs	r5, #0
 800c536:	0028      	movs	r0, r5
 800c538:	bd70      	pop	{r4, r5, r6, pc}
 800c53a:	2800      	cmp	r0, #0
 800c53c:	d004      	beq.n	800c548 <_fflush_r+0x20>
 800c53e:	6983      	ldr	r3, [r0, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <_fflush_r+0x20>
 800c544:	f000 f892 	bl	800c66c <__sinit>
 800c548:	4b14      	ldr	r3, [pc, #80]	; (800c59c <_fflush_r+0x74>)
 800c54a:	429c      	cmp	r4, r3
 800c54c:	d11b      	bne.n	800c586 <_fflush_r+0x5e>
 800c54e:	686c      	ldr	r4, [r5, #4]
 800c550:	220c      	movs	r2, #12
 800c552:	5ea3      	ldrsh	r3, [r4, r2]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d0ed      	beq.n	800c534 <_fflush_r+0xc>
 800c558:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c55a:	07d2      	lsls	r2, r2, #31
 800c55c:	d404      	bmi.n	800c568 <_fflush_r+0x40>
 800c55e:	059b      	lsls	r3, r3, #22
 800c560:	d402      	bmi.n	800c568 <_fflush_r+0x40>
 800c562:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c564:	f000 f923 	bl	800c7ae <__retarget_lock_acquire_recursive>
 800c568:	0028      	movs	r0, r5
 800c56a:	0021      	movs	r1, r4
 800c56c:	f7ff ff50 	bl	800c410 <__sflush_r>
 800c570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c572:	0005      	movs	r5, r0
 800c574:	07db      	lsls	r3, r3, #31
 800c576:	d4de      	bmi.n	800c536 <_fflush_r+0xe>
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	059b      	lsls	r3, r3, #22
 800c57c:	d4db      	bmi.n	800c536 <_fflush_r+0xe>
 800c57e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c580:	f000 f916 	bl	800c7b0 <__retarget_lock_release_recursive>
 800c584:	e7d7      	b.n	800c536 <_fflush_r+0xe>
 800c586:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <_fflush_r+0x78>)
 800c588:	429c      	cmp	r4, r3
 800c58a:	d101      	bne.n	800c590 <_fflush_r+0x68>
 800c58c:	68ac      	ldr	r4, [r5, #8]
 800c58e:	e7df      	b.n	800c550 <_fflush_r+0x28>
 800c590:	4b04      	ldr	r3, [pc, #16]	; (800c5a4 <_fflush_r+0x7c>)
 800c592:	429c      	cmp	r4, r3
 800c594:	d1dc      	bne.n	800c550 <_fflush_r+0x28>
 800c596:	68ec      	ldr	r4, [r5, #12]
 800c598:	e7da      	b.n	800c550 <_fflush_r+0x28>
 800c59a:	46c0      	nop			; (mov r8, r8)
 800c59c:	0800dd54 	.word	0x0800dd54
 800c5a0:	0800dd74 	.word	0x0800dd74
 800c5a4:	0800dd34 	.word	0x0800dd34

0800c5a8 <std>:
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	b510      	push	{r4, lr}
 800c5ac:	0004      	movs	r4, r0
 800c5ae:	6003      	str	r3, [r0, #0]
 800c5b0:	6043      	str	r3, [r0, #4]
 800c5b2:	6083      	str	r3, [r0, #8]
 800c5b4:	8181      	strh	r1, [r0, #12]
 800c5b6:	6643      	str	r3, [r0, #100]	; 0x64
 800c5b8:	0019      	movs	r1, r3
 800c5ba:	81c2      	strh	r2, [r0, #14]
 800c5bc:	6103      	str	r3, [r0, #16]
 800c5be:	6143      	str	r3, [r0, #20]
 800c5c0:	6183      	str	r3, [r0, #24]
 800c5c2:	2208      	movs	r2, #8
 800c5c4:	305c      	adds	r0, #92	; 0x5c
 800c5c6:	f7fd fb0e 	bl	8009be6 <memset>
 800c5ca:	4b05      	ldr	r3, [pc, #20]	; (800c5e0 <std+0x38>)
 800c5cc:	6263      	str	r3, [r4, #36]	; 0x24
 800c5ce:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <std+0x3c>)
 800c5d0:	6224      	str	r4, [r4, #32]
 800c5d2:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5d4:	4b04      	ldr	r3, [pc, #16]	; (800c5e8 <std+0x40>)
 800c5d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5d8:	4b04      	ldr	r3, [pc, #16]	; (800c5ec <std+0x44>)
 800c5da:	6323      	str	r3, [r4, #48]	; 0x30
 800c5dc:	bd10      	pop	{r4, pc}
 800c5de:	46c0      	nop			; (mov r8, r8)
 800c5e0:	0800c931 	.word	0x0800c931
 800c5e4:	0800c959 	.word	0x0800c959
 800c5e8:	0800c991 	.word	0x0800c991
 800c5ec:	0800c9bd 	.word	0x0800c9bd

0800c5f0 <_cleanup_r>:
 800c5f0:	b510      	push	{r4, lr}
 800c5f2:	4902      	ldr	r1, [pc, #8]	; (800c5fc <_cleanup_r+0xc>)
 800c5f4:	f000 f8ba 	bl	800c76c <_fwalk_reent>
 800c5f8:	bd10      	pop	{r4, pc}
 800c5fa:	46c0      	nop			; (mov r8, r8)
 800c5fc:	0800c529 	.word	0x0800c529

0800c600 <__sfmoreglue>:
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	2568      	movs	r5, #104	; 0x68
 800c604:	1e4a      	subs	r2, r1, #1
 800c606:	4355      	muls	r5, r2
 800c608:	000e      	movs	r6, r1
 800c60a:	0029      	movs	r1, r5
 800c60c:	3174      	adds	r1, #116	; 0x74
 800c60e:	f7ff fa5d 	bl	800bacc <_malloc_r>
 800c612:	1e04      	subs	r4, r0, #0
 800c614:	d008      	beq.n	800c628 <__sfmoreglue+0x28>
 800c616:	2100      	movs	r1, #0
 800c618:	002a      	movs	r2, r5
 800c61a:	6001      	str	r1, [r0, #0]
 800c61c:	6046      	str	r6, [r0, #4]
 800c61e:	300c      	adds	r0, #12
 800c620:	60a0      	str	r0, [r4, #8]
 800c622:	3268      	adds	r2, #104	; 0x68
 800c624:	f7fd fadf 	bl	8009be6 <memset>
 800c628:	0020      	movs	r0, r4
 800c62a:	bd70      	pop	{r4, r5, r6, pc}

0800c62c <__sfp_lock_acquire>:
 800c62c:	b510      	push	{r4, lr}
 800c62e:	4802      	ldr	r0, [pc, #8]	; (800c638 <__sfp_lock_acquire+0xc>)
 800c630:	f000 f8bd 	bl	800c7ae <__retarget_lock_acquire_recursive>
 800c634:	bd10      	pop	{r4, pc}
 800c636:	46c0      	nop			; (mov r8, r8)
 800c638:	20000fd8 	.word	0x20000fd8

0800c63c <__sfp_lock_release>:
 800c63c:	b510      	push	{r4, lr}
 800c63e:	4802      	ldr	r0, [pc, #8]	; (800c648 <__sfp_lock_release+0xc>)
 800c640:	f000 f8b6 	bl	800c7b0 <__retarget_lock_release_recursive>
 800c644:	bd10      	pop	{r4, pc}
 800c646:	46c0      	nop			; (mov r8, r8)
 800c648:	20000fd8 	.word	0x20000fd8

0800c64c <__sinit_lock_acquire>:
 800c64c:	b510      	push	{r4, lr}
 800c64e:	4802      	ldr	r0, [pc, #8]	; (800c658 <__sinit_lock_acquire+0xc>)
 800c650:	f000 f8ad 	bl	800c7ae <__retarget_lock_acquire_recursive>
 800c654:	bd10      	pop	{r4, pc}
 800c656:	46c0      	nop			; (mov r8, r8)
 800c658:	20000fd3 	.word	0x20000fd3

0800c65c <__sinit_lock_release>:
 800c65c:	b510      	push	{r4, lr}
 800c65e:	4802      	ldr	r0, [pc, #8]	; (800c668 <__sinit_lock_release+0xc>)
 800c660:	f000 f8a6 	bl	800c7b0 <__retarget_lock_release_recursive>
 800c664:	bd10      	pop	{r4, pc}
 800c666:	46c0      	nop			; (mov r8, r8)
 800c668:	20000fd3 	.word	0x20000fd3

0800c66c <__sinit>:
 800c66c:	b513      	push	{r0, r1, r4, lr}
 800c66e:	0004      	movs	r4, r0
 800c670:	f7ff ffec 	bl	800c64c <__sinit_lock_acquire>
 800c674:	69a3      	ldr	r3, [r4, #24]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d002      	beq.n	800c680 <__sinit+0x14>
 800c67a:	f7ff ffef 	bl	800c65c <__sinit_lock_release>
 800c67e:	bd13      	pop	{r0, r1, r4, pc}
 800c680:	64a3      	str	r3, [r4, #72]	; 0x48
 800c682:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c684:	6523      	str	r3, [r4, #80]	; 0x50
 800c686:	4b13      	ldr	r3, [pc, #76]	; (800c6d4 <__sinit+0x68>)
 800c688:	4a13      	ldr	r2, [pc, #76]	; (800c6d8 <__sinit+0x6c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c68e:	9301      	str	r3, [sp, #4]
 800c690:	42a3      	cmp	r3, r4
 800c692:	d101      	bne.n	800c698 <__sinit+0x2c>
 800c694:	2301      	movs	r3, #1
 800c696:	61a3      	str	r3, [r4, #24]
 800c698:	0020      	movs	r0, r4
 800c69a:	f000 f81f 	bl	800c6dc <__sfp>
 800c69e:	6060      	str	r0, [r4, #4]
 800c6a0:	0020      	movs	r0, r4
 800c6a2:	f000 f81b 	bl	800c6dc <__sfp>
 800c6a6:	60a0      	str	r0, [r4, #8]
 800c6a8:	0020      	movs	r0, r4
 800c6aa:	f000 f817 	bl	800c6dc <__sfp>
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	2104      	movs	r1, #4
 800c6b2:	60e0      	str	r0, [r4, #12]
 800c6b4:	6860      	ldr	r0, [r4, #4]
 800c6b6:	f7ff ff77 	bl	800c5a8 <std>
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	2109      	movs	r1, #9
 800c6be:	68a0      	ldr	r0, [r4, #8]
 800c6c0:	f7ff ff72 	bl	800c5a8 <std>
 800c6c4:	2202      	movs	r2, #2
 800c6c6:	2112      	movs	r1, #18
 800c6c8:	68e0      	ldr	r0, [r4, #12]
 800c6ca:	f7ff ff6d 	bl	800c5a8 <std>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	61a3      	str	r3, [r4, #24]
 800c6d2:	e7d2      	b.n	800c67a <__sinit+0xe>
 800c6d4:	0800d9b4 	.word	0x0800d9b4
 800c6d8:	0800c5f1 	.word	0x0800c5f1

0800c6dc <__sfp>:
 800c6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6de:	0007      	movs	r7, r0
 800c6e0:	f7ff ffa4 	bl	800c62c <__sfp_lock_acquire>
 800c6e4:	4b1f      	ldr	r3, [pc, #124]	; (800c764 <__sfp+0x88>)
 800c6e6:	681e      	ldr	r6, [r3, #0]
 800c6e8:	69b3      	ldr	r3, [r6, #24]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d102      	bne.n	800c6f4 <__sfp+0x18>
 800c6ee:	0030      	movs	r0, r6
 800c6f0:	f7ff ffbc 	bl	800c66c <__sinit>
 800c6f4:	3648      	adds	r6, #72	; 0x48
 800c6f6:	68b4      	ldr	r4, [r6, #8]
 800c6f8:	6873      	ldr	r3, [r6, #4]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	d504      	bpl.n	800c708 <__sfp+0x2c>
 800c6fe:	6833      	ldr	r3, [r6, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d022      	beq.n	800c74a <__sfp+0x6e>
 800c704:	6836      	ldr	r6, [r6, #0]
 800c706:	e7f6      	b.n	800c6f6 <__sfp+0x1a>
 800c708:	220c      	movs	r2, #12
 800c70a:	5ea5      	ldrsh	r5, [r4, r2]
 800c70c:	2d00      	cmp	r5, #0
 800c70e:	d11a      	bne.n	800c746 <__sfp+0x6a>
 800c710:	0020      	movs	r0, r4
 800c712:	4b15      	ldr	r3, [pc, #84]	; (800c768 <__sfp+0x8c>)
 800c714:	3058      	adds	r0, #88	; 0x58
 800c716:	60e3      	str	r3, [r4, #12]
 800c718:	6665      	str	r5, [r4, #100]	; 0x64
 800c71a:	f000 f847 	bl	800c7ac <__retarget_lock_init_recursive>
 800c71e:	f7ff ff8d 	bl	800c63c <__sfp_lock_release>
 800c722:	0020      	movs	r0, r4
 800c724:	2208      	movs	r2, #8
 800c726:	0029      	movs	r1, r5
 800c728:	6025      	str	r5, [r4, #0]
 800c72a:	60a5      	str	r5, [r4, #8]
 800c72c:	6065      	str	r5, [r4, #4]
 800c72e:	6125      	str	r5, [r4, #16]
 800c730:	6165      	str	r5, [r4, #20]
 800c732:	61a5      	str	r5, [r4, #24]
 800c734:	305c      	adds	r0, #92	; 0x5c
 800c736:	f7fd fa56 	bl	8009be6 <memset>
 800c73a:	6365      	str	r5, [r4, #52]	; 0x34
 800c73c:	63a5      	str	r5, [r4, #56]	; 0x38
 800c73e:	64a5      	str	r5, [r4, #72]	; 0x48
 800c740:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c742:	0020      	movs	r0, r4
 800c744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c746:	3468      	adds	r4, #104	; 0x68
 800c748:	e7d7      	b.n	800c6fa <__sfp+0x1e>
 800c74a:	2104      	movs	r1, #4
 800c74c:	0038      	movs	r0, r7
 800c74e:	f7ff ff57 	bl	800c600 <__sfmoreglue>
 800c752:	1e04      	subs	r4, r0, #0
 800c754:	6030      	str	r0, [r6, #0]
 800c756:	d1d5      	bne.n	800c704 <__sfp+0x28>
 800c758:	f7ff ff70 	bl	800c63c <__sfp_lock_release>
 800c75c:	230c      	movs	r3, #12
 800c75e:	603b      	str	r3, [r7, #0]
 800c760:	e7ef      	b.n	800c742 <__sfp+0x66>
 800c762:	46c0      	nop			; (mov r8, r8)
 800c764:	0800d9b4 	.word	0x0800d9b4
 800c768:	ffff0001 	.word	0xffff0001

0800c76c <_fwalk_reent>:
 800c76c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c76e:	0004      	movs	r4, r0
 800c770:	0006      	movs	r6, r0
 800c772:	2700      	movs	r7, #0
 800c774:	9101      	str	r1, [sp, #4]
 800c776:	3448      	adds	r4, #72	; 0x48
 800c778:	6863      	ldr	r3, [r4, #4]
 800c77a:	68a5      	ldr	r5, [r4, #8]
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	9b00      	ldr	r3, [sp, #0]
 800c780:	3b01      	subs	r3, #1
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	d504      	bpl.n	800c790 <_fwalk_reent+0x24>
 800c786:	6824      	ldr	r4, [r4, #0]
 800c788:	2c00      	cmp	r4, #0
 800c78a:	d1f5      	bne.n	800c778 <_fwalk_reent+0xc>
 800c78c:	0038      	movs	r0, r7
 800c78e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c790:	89ab      	ldrh	r3, [r5, #12]
 800c792:	2b01      	cmp	r3, #1
 800c794:	d908      	bls.n	800c7a8 <_fwalk_reent+0x3c>
 800c796:	220e      	movs	r2, #14
 800c798:	5eab      	ldrsh	r3, [r5, r2]
 800c79a:	3301      	adds	r3, #1
 800c79c:	d004      	beq.n	800c7a8 <_fwalk_reent+0x3c>
 800c79e:	0029      	movs	r1, r5
 800c7a0:	0030      	movs	r0, r6
 800c7a2:	9b01      	ldr	r3, [sp, #4]
 800c7a4:	4798      	blx	r3
 800c7a6:	4307      	orrs	r7, r0
 800c7a8:	3568      	adds	r5, #104	; 0x68
 800c7aa:	e7e8      	b.n	800c77e <_fwalk_reent+0x12>

0800c7ac <__retarget_lock_init_recursive>:
 800c7ac:	4770      	bx	lr

0800c7ae <__retarget_lock_acquire_recursive>:
 800c7ae:	4770      	bx	lr

0800c7b0 <__retarget_lock_release_recursive>:
 800c7b0:	4770      	bx	lr
	...

0800c7b4 <__swhatbuf_r>:
 800c7b4:	b570      	push	{r4, r5, r6, lr}
 800c7b6:	000e      	movs	r6, r1
 800c7b8:	001d      	movs	r5, r3
 800c7ba:	230e      	movs	r3, #14
 800c7bc:	5ec9      	ldrsh	r1, [r1, r3]
 800c7be:	0014      	movs	r4, r2
 800c7c0:	b096      	sub	sp, #88	; 0x58
 800c7c2:	2900      	cmp	r1, #0
 800c7c4:	da07      	bge.n	800c7d6 <__swhatbuf_r+0x22>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	602b      	str	r3, [r5, #0]
 800c7ca:	89b3      	ldrh	r3, [r6, #12]
 800c7cc:	061b      	lsls	r3, r3, #24
 800c7ce:	d411      	bmi.n	800c7f4 <__swhatbuf_r+0x40>
 800c7d0:	2380      	movs	r3, #128	; 0x80
 800c7d2:	00db      	lsls	r3, r3, #3
 800c7d4:	e00f      	b.n	800c7f6 <__swhatbuf_r+0x42>
 800c7d6:	466a      	mov	r2, sp
 800c7d8:	f000 f91c 	bl	800ca14 <_fstat_r>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	dbf2      	blt.n	800c7c6 <__swhatbuf_r+0x12>
 800c7e0:	23f0      	movs	r3, #240	; 0xf0
 800c7e2:	9901      	ldr	r1, [sp, #4]
 800c7e4:	021b      	lsls	r3, r3, #8
 800c7e6:	4019      	ands	r1, r3
 800c7e8:	4b05      	ldr	r3, [pc, #20]	; (800c800 <__swhatbuf_r+0x4c>)
 800c7ea:	18c9      	adds	r1, r1, r3
 800c7ec:	424b      	negs	r3, r1
 800c7ee:	4159      	adcs	r1, r3
 800c7f0:	6029      	str	r1, [r5, #0]
 800c7f2:	e7ed      	b.n	800c7d0 <__swhatbuf_r+0x1c>
 800c7f4:	2340      	movs	r3, #64	; 0x40
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	b016      	add	sp, #88	; 0x58
 800c7fc:	bd70      	pop	{r4, r5, r6, pc}
 800c7fe:	46c0      	nop			; (mov r8, r8)
 800c800:	ffffe000 	.word	0xffffe000

0800c804 <__smakebuf_r>:
 800c804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c806:	2602      	movs	r6, #2
 800c808:	898b      	ldrh	r3, [r1, #12]
 800c80a:	0005      	movs	r5, r0
 800c80c:	000c      	movs	r4, r1
 800c80e:	4233      	tst	r3, r6
 800c810:	d006      	beq.n	800c820 <__smakebuf_r+0x1c>
 800c812:	0023      	movs	r3, r4
 800c814:	3347      	adds	r3, #71	; 0x47
 800c816:	6023      	str	r3, [r4, #0]
 800c818:	6123      	str	r3, [r4, #16]
 800c81a:	2301      	movs	r3, #1
 800c81c:	6163      	str	r3, [r4, #20]
 800c81e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c820:	466a      	mov	r2, sp
 800c822:	ab01      	add	r3, sp, #4
 800c824:	f7ff ffc6 	bl	800c7b4 <__swhatbuf_r>
 800c828:	9900      	ldr	r1, [sp, #0]
 800c82a:	0007      	movs	r7, r0
 800c82c:	0028      	movs	r0, r5
 800c82e:	f7ff f94d 	bl	800bacc <_malloc_r>
 800c832:	2800      	cmp	r0, #0
 800c834:	d108      	bne.n	800c848 <__smakebuf_r+0x44>
 800c836:	220c      	movs	r2, #12
 800c838:	5ea3      	ldrsh	r3, [r4, r2]
 800c83a:	059a      	lsls	r2, r3, #22
 800c83c:	d4ef      	bmi.n	800c81e <__smakebuf_r+0x1a>
 800c83e:	2203      	movs	r2, #3
 800c840:	4393      	bics	r3, r2
 800c842:	431e      	orrs	r6, r3
 800c844:	81a6      	strh	r6, [r4, #12]
 800c846:	e7e4      	b.n	800c812 <__smakebuf_r+0xe>
 800c848:	4b0f      	ldr	r3, [pc, #60]	; (800c888 <__smakebuf_r+0x84>)
 800c84a:	62ab      	str	r3, [r5, #40]	; 0x28
 800c84c:	2380      	movs	r3, #128	; 0x80
 800c84e:	89a2      	ldrh	r2, [r4, #12]
 800c850:	6020      	str	r0, [r4, #0]
 800c852:	4313      	orrs	r3, r2
 800c854:	81a3      	strh	r3, [r4, #12]
 800c856:	9b00      	ldr	r3, [sp, #0]
 800c858:	6120      	str	r0, [r4, #16]
 800c85a:	6163      	str	r3, [r4, #20]
 800c85c:	9b01      	ldr	r3, [sp, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00d      	beq.n	800c87e <__smakebuf_r+0x7a>
 800c862:	0028      	movs	r0, r5
 800c864:	230e      	movs	r3, #14
 800c866:	5ee1      	ldrsh	r1, [r4, r3]
 800c868:	f000 f8e6 	bl	800ca38 <_isatty_r>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d006      	beq.n	800c87e <__smakebuf_r+0x7a>
 800c870:	2203      	movs	r2, #3
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	4393      	bics	r3, r2
 800c876:	001a      	movs	r2, r3
 800c878:	2301      	movs	r3, #1
 800c87a:	4313      	orrs	r3, r2
 800c87c:	81a3      	strh	r3, [r4, #12]
 800c87e:	89a0      	ldrh	r0, [r4, #12]
 800c880:	4307      	orrs	r7, r0
 800c882:	81a7      	strh	r7, [r4, #12]
 800c884:	e7cb      	b.n	800c81e <__smakebuf_r+0x1a>
 800c886:	46c0      	nop			; (mov r8, r8)
 800c888:	0800c5f1 	.word	0x0800c5f1

0800c88c <_malloc_usable_size_r>:
 800c88c:	1f0b      	subs	r3, r1, #4
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	1f18      	subs	r0, r3, #4
 800c892:	2b00      	cmp	r3, #0
 800c894:	da01      	bge.n	800c89a <_malloc_usable_size_r+0xe>
 800c896:	580b      	ldr	r3, [r1, r0]
 800c898:	18c0      	adds	r0, r0, r3
 800c89a:	4770      	bx	lr

0800c89c <_raise_r>:
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	0004      	movs	r4, r0
 800c8a0:	000d      	movs	r5, r1
 800c8a2:	291f      	cmp	r1, #31
 800c8a4:	d904      	bls.n	800c8b0 <_raise_r+0x14>
 800c8a6:	2316      	movs	r3, #22
 800c8a8:	6003      	str	r3, [r0, #0]
 800c8aa:	2001      	movs	r0, #1
 800c8ac:	4240      	negs	r0, r0
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
 800c8b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d004      	beq.n	800c8c0 <_raise_r+0x24>
 800c8b6:	008a      	lsls	r2, r1, #2
 800c8b8:	189b      	adds	r3, r3, r2
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	2a00      	cmp	r2, #0
 800c8be:	d108      	bne.n	800c8d2 <_raise_r+0x36>
 800c8c0:	0020      	movs	r0, r4
 800c8c2:	f000 f831 	bl	800c928 <_getpid_r>
 800c8c6:	002a      	movs	r2, r5
 800c8c8:	0001      	movs	r1, r0
 800c8ca:	0020      	movs	r0, r4
 800c8cc:	f000 f81a 	bl	800c904 <_kill_r>
 800c8d0:	e7ed      	b.n	800c8ae <_raise_r+0x12>
 800c8d2:	2000      	movs	r0, #0
 800c8d4:	2a01      	cmp	r2, #1
 800c8d6:	d0ea      	beq.n	800c8ae <_raise_r+0x12>
 800c8d8:	1c51      	adds	r1, r2, #1
 800c8da:	d103      	bne.n	800c8e4 <_raise_r+0x48>
 800c8dc:	2316      	movs	r3, #22
 800c8de:	3001      	adds	r0, #1
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	e7e4      	b.n	800c8ae <_raise_r+0x12>
 800c8e4:	2400      	movs	r4, #0
 800c8e6:	0028      	movs	r0, r5
 800c8e8:	601c      	str	r4, [r3, #0]
 800c8ea:	4790      	blx	r2
 800c8ec:	0020      	movs	r0, r4
 800c8ee:	e7de      	b.n	800c8ae <_raise_r+0x12>

0800c8f0 <raise>:
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	4b03      	ldr	r3, [pc, #12]	; (800c900 <raise+0x10>)
 800c8f4:	0001      	movs	r1, r0
 800c8f6:	6818      	ldr	r0, [r3, #0]
 800c8f8:	f7ff ffd0 	bl	800c89c <_raise_r>
 800c8fc:	bd10      	pop	{r4, pc}
 800c8fe:	46c0      	nop			; (mov r8, r8)
 800c900:	2000003c 	.word	0x2000003c

0800c904 <_kill_r>:
 800c904:	2300      	movs	r3, #0
 800c906:	b570      	push	{r4, r5, r6, lr}
 800c908:	4d06      	ldr	r5, [pc, #24]	; (800c924 <_kill_r+0x20>)
 800c90a:	0004      	movs	r4, r0
 800c90c:	0008      	movs	r0, r1
 800c90e:	0011      	movs	r1, r2
 800c910:	602b      	str	r3, [r5, #0]
 800c912:	f7fd f81f 	bl	8009954 <_kill>
 800c916:	1c43      	adds	r3, r0, #1
 800c918:	d103      	bne.n	800c922 <_kill_r+0x1e>
 800c91a:	682b      	ldr	r3, [r5, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d000      	beq.n	800c922 <_kill_r+0x1e>
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	bd70      	pop	{r4, r5, r6, pc}
 800c924:	20000fcc 	.word	0x20000fcc

0800c928 <_getpid_r>:
 800c928:	b510      	push	{r4, lr}
 800c92a:	f7fd f80d 	bl	8009948 <_getpid>
 800c92e:	bd10      	pop	{r4, pc}

0800c930 <__sread>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	000c      	movs	r4, r1
 800c934:	250e      	movs	r5, #14
 800c936:	5f49      	ldrsh	r1, [r1, r5]
 800c938:	f000 f8a4 	bl	800ca84 <_read_r>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	db03      	blt.n	800c948 <__sread+0x18>
 800c940:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c942:	181b      	adds	r3, r3, r0
 800c944:	6563      	str	r3, [r4, #84]	; 0x54
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	89a3      	ldrh	r3, [r4, #12]
 800c94a:	4a02      	ldr	r2, [pc, #8]	; (800c954 <__sread+0x24>)
 800c94c:	4013      	ands	r3, r2
 800c94e:	81a3      	strh	r3, [r4, #12]
 800c950:	e7f9      	b.n	800c946 <__sread+0x16>
 800c952:	46c0      	nop			; (mov r8, r8)
 800c954:	ffffefff 	.word	0xffffefff

0800c958 <__swrite>:
 800c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95a:	001f      	movs	r7, r3
 800c95c:	898b      	ldrh	r3, [r1, #12]
 800c95e:	0005      	movs	r5, r0
 800c960:	000c      	movs	r4, r1
 800c962:	0016      	movs	r6, r2
 800c964:	05db      	lsls	r3, r3, #23
 800c966:	d505      	bpl.n	800c974 <__swrite+0x1c>
 800c968:	230e      	movs	r3, #14
 800c96a:	5ec9      	ldrsh	r1, [r1, r3]
 800c96c:	2200      	movs	r2, #0
 800c96e:	2302      	movs	r3, #2
 800c970:	f000 f874 	bl	800ca5c <_lseek_r>
 800c974:	89a3      	ldrh	r3, [r4, #12]
 800c976:	4a05      	ldr	r2, [pc, #20]	; (800c98c <__swrite+0x34>)
 800c978:	0028      	movs	r0, r5
 800c97a:	4013      	ands	r3, r2
 800c97c:	81a3      	strh	r3, [r4, #12]
 800c97e:	0032      	movs	r2, r6
 800c980:	230e      	movs	r3, #14
 800c982:	5ee1      	ldrsh	r1, [r4, r3]
 800c984:	003b      	movs	r3, r7
 800c986:	f000 f81f 	bl	800c9c8 <_write_r>
 800c98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c98c:	ffffefff 	.word	0xffffefff

0800c990 <__sseek>:
 800c990:	b570      	push	{r4, r5, r6, lr}
 800c992:	000c      	movs	r4, r1
 800c994:	250e      	movs	r5, #14
 800c996:	5f49      	ldrsh	r1, [r1, r5]
 800c998:	f000 f860 	bl	800ca5c <_lseek_r>
 800c99c:	89a3      	ldrh	r3, [r4, #12]
 800c99e:	1c42      	adds	r2, r0, #1
 800c9a0:	d103      	bne.n	800c9aa <__sseek+0x1a>
 800c9a2:	4a05      	ldr	r2, [pc, #20]	; (800c9b8 <__sseek+0x28>)
 800c9a4:	4013      	ands	r3, r2
 800c9a6:	81a3      	strh	r3, [r4, #12]
 800c9a8:	bd70      	pop	{r4, r5, r6, pc}
 800c9aa:	2280      	movs	r2, #128	; 0x80
 800c9ac:	0152      	lsls	r2, r2, #5
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	81a3      	strh	r3, [r4, #12]
 800c9b2:	6560      	str	r0, [r4, #84]	; 0x54
 800c9b4:	e7f8      	b.n	800c9a8 <__sseek+0x18>
 800c9b6:	46c0      	nop			; (mov r8, r8)
 800c9b8:	ffffefff 	.word	0xffffefff

0800c9bc <__sclose>:
 800c9bc:	b510      	push	{r4, lr}
 800c9be:	230e      	movs	r3, #14
 800c9c0:	5ec9      	ldrsh	r1, [r1, r3]
 800c9c2:	f000 f815 	bl	800c9f0 <_close_r>
 800c9c6:	bd10      	pop	{r4, pc}

0800c9c8 <_write_r>:
 800c9c8:	b570      	push	{r4, r5, r6, lr}
 800c9ca:	0004      	movs	r4, r0
 800c9cc:	0008      	movs	r0, r1
 800c9ce:	0011      	movs	r1, r2
 800c9d0:	001a      	movs	r2, r3
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	4d05      	ldr	r5, [pc, #20]	; (800c9ec <_write_r+0x24>)
 800c9d6:	602b      	str	r3, [r5, #0]
 800c9d8:	f7fc fff5 	bl	80099c6 <_write>
 800c9dc:	1c43      	adds	r3, r0, #1
 800c9de:	d103      	bne.n	800c9e8 <_write_r+0x20>
 800c9e0:	682b      	ldr	r3, [r5, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d000      	beq.n	800c9e8 <_write_r+0x20>
 800c9e6:	6023      	str	r3, [r4, #0]
 800c9e8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ea:	46c0      	nop			; (mov r8, r8)
 800c9ec:	20000fcc 	.word	0x20000fcc

0800c9f0 <_close_r>:
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	b570      	push	{r4, r5, r6, lr}
 800c9f4:	4d06      	ldr	r5, [pc, #24]	; (800ca10 <_close_r+0x20>)
 800c9f6:	0004      	movs	r4, r0
 800c9f8:	0008      	movs	r0, r1
 800c9fa:	602b      	str	r3, [r5, #0]
 800c9fc:	f7fc ffff 	bl	80099fe <_close>
 800ca00:	1c43      	adds	r3, r0, #1
 800ca02:	d103      	bne.n	800ca0c <_close_r+0x1c>
 800ca04:	682b      	ldr	r3, [r5, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d000      	beq.n	800ca0c <_close_r+0x1c>
 800ca0a:	6023      	str	r3, [r4, #0]
 800ca0c:	bd70      	pop	{r4, r5, r6, pc}
 800ca0e:	46c0      	nop			; (mov r8, r8)
 800ca10:	20000fcc 	.word	0x20000fcc

0800ca14 <_fstat_r>:
 800ca14:	2300      	movs	r3, #0
 800ca16:	b570      	push	{r4, r5, r6, lr}
 800ca18:	4d06      	ldr	r5, [pc, #24]	; (800ca34 <_fstat_r+0x20>)
 800ca1a:	0004      	movs	r4, r0
 800ca1c:	0008      	movs	r0, r1
 800ca1e:	0011      	movs	r1, r2
 800ca20:	602b      	str	r3, [r5, #0]
 800ca22:	f7fc fff6 	bl	8009a12 <_fstat>
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	d103      	bne.n	800ca32 <_fstat_r+0x1e>
 800ca2a:	682b      	ldr	r3, [r5, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d000      	beq.n	800ca32 <_fstat_r+0x1e>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	bd70      	pop	{r4, r5, r6, pc}
 800ca34:	20000fcc 	.word	0x20000fcc

0800ca38 <_isatty_r>:
 800ca38:	2300      	movs	r3, #0
 800ca3a:	b570      	push	{r4, r5, r6, lr}
 800ca3c:	4d06      	ldr	r5, [pc, #24]	; (800ca58 <_isatty_r+0x20>)
 800ca3e:	0004      	movs	r4, r0
 800ca40:	0008      	movs	r0, r1
 800ca42:	602b      	str	r3, [r5, #0]
 800ca44:	f7fc fff3 	bl	8009a2e <_isatty>
 800ca48:	1c43      	adds	r3, r0, #1
 800ca4a:	d103      	bne.n	800ca54 <_isatty_r+0x1c>
 800ca4c:	682b      	ldr	r3, [r5, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d000      	beq.n	800ca54 <_isatty_r+0x1c>
 800ca52:	6023      	str	r3, [r4, #0]
 800ca54:	bd70      	pop	{r4, r5, r6, pc}
 800ca56:	46c0      	nop			; (mov r8, r8)
 800ca58:	20000fcc 	.word	0x20000fcc

0800ca5c <_lseek_r>:
 800ca5c:	b570      	push	{r4, r5, r6, lr}
 800ca5e:	0004      	movs	r4, r0
 800ca60:	0008      	movs	r0, r1
 800ca62:	0011      	movs	r1, r2
 800ca64:	001a      	movs	r2, r3
 800ca66:	2300      	movs	r3, #0
 800ca68:	4d05      	ldr	r5, [pc, #20]	; (800ca80 <_lseek_r+0x24>)
 800ca6a:	602b      	str	r3, [r5, #0]
 800ca6c:	f7fc ffe8 	bl	8009a40 <_lseek>
 800ca70:	1c43      	adds	r3, r0, #1
 800ca72:	d103      	bne.n	800ca7c <_lseek_r+0x20>
 800ca74:	682b      	ldr	r3, [r5, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d000      	beq.n	800ca7c <_lseek_r+0x20>
 800ca7a:	6023      	str	r3, [r4, #0]
 800ca7c:	bd70      	pop	{r4, r5, r6, pc}
 800ca7e:	46c0      	nop			; (mov r8, r8)
 800ca80:	20000fcc 	.word	0x20000fcc

0800ca84 <_read_r>:
 800ca84:	b570      	push	{r4, r5, r6, lr}
 800ca86:	0004      	movs	r4, r0
 800ca88:	0008      	movs	r0, r1
 800ca8a:	0011      	movs	r1, r2
 800ca8c:	001a      	movs	r2, r3
 800ca8e:	2300      	movs	r3, #0
 800ca90:	4d05      	ldr	r5, [pc, #20]	; (800caa8 <_read_r+0x24>)
 800ca92:	602b      	str	r3, [r5, #0]
 800ca94:	f7fc ff7a 	bl	800998c <_read>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d103      	bne.n	800caa4 <_read_r+0x20>
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d000      	beq.n	800caa4 <_read_r+0x20>
 800caa2:	6023      	str	r3, [r4, #0]
 800caa4:	bd70      	pop	{r4, r5, r6, pc}
 800caa6:	46c0      	nop			; (mov r8, r8)
 800caa8:	20000fcc 	.word	0x20000fcc

0800caac <atan2>:
 800caac:	b510      	push	{r4, lr}
 800caae:	f000 f801 	bl	800cab4 <__ieee754_atan2>
 800cab2:	bd10      	pop	{r4, pc}

0800cab4 <__ieee754_atan2>:
 800cab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cab6:	0016      	movs	r6, r2
 800cab8:	001d      	movs	r5, r3
 800caba:	005a      	lsls	r2, r3, #1
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	4273      	negs	r3, r6
 800cac0:	4333      	orrs	r3, r6
 800cac2:	4f46      	ldr	r7, [pc, #280]	; (800cbdc <__ieee754_atan2+0x128>)
 800cac4:	0852      	lsrs	r2, r2, #1
 800cac6:	0fdb      	lsrs	r3, r3, #31
 800cac8:	4313      	orrs	r3, r2
 800caca:	42bb      	cmp	r3, r7
 800cacc:	d809      	bhi.n	800cae2 <__ieee754_atan2+0x2e>
 800cace:	4244      	negs	r4, r0
 800cad0:	004b      	lsls	r3, r1, #1
 800cad2:	4304      	orrs	r4, r0
 800cad4:	085b      	lsrs	r3, r3, #1
 800cad6:	0fe4      	lsrs	r4, r4, #31
 800cad8:	9100      	str	r1, [sp, #0]
 800cada:	9001      	str	r0, [sp, #4]
 800cadc:	431c      	orrs	r4, r3
 800cade:	42bc      	cmp	r4, r7
 800cae0:	d905      	bls.n	800caee <__ieee754_atan2+0x3a>
 800cae2:	0032      	movs	r2, r6
 800cae4:	002b      	movs	r3, r5
 800cae6:	f7f4 f837 	bl	8000b58 <__aeabi_dadd>
 800caea:	b003      	add	sp, #12
 800caec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caee:	4c3c      	ldr	r4, [pc, #240]	; (800cbe0 <__ieee754_atan2+0x12c>)
 800caf0:	192c      	adds	r4, r5, r4
 800caf2:	4334      	orrs	r4, r6
 800caf4:	d102      	bne.n	800cafc <__ieee754_atan2+0x48>
 800caf6:	f000 f889 	bl	800cc0c <atan>
 800cafa:	e7f6      	b.n	800caea <__ieee754_atan2+0x36>
 800cafc:	17ac      	asrs	r4, r5, #30
 800cafe:	46a4      	mov	ip, r4
 800cb00:	2402      	movs	r4, #2
 800cb02:	4667      	mov	r7, ip
 800cb04:	403c      	ands	r4, r7
 800cb06:	9f00      	ldr	r7, [sp, #0]
 800cb08:	0fff      	lsrs	r7, r7, #31
 800cb0a:	433c      	orrs	r4, r7
 800cb0c:	9f01      	ldr	r7, [sp, #4]
 800cb0e:	431f      	orrs	r7, r3
 800cb10:	d106      	bne.n	800cb20 <__ieee754_atan2+0x6c>
 800cb12:	2c02      	cmp	r4, #2
 800cb14:	d056      	beq.n	800cbc4 <__ieee754_atan2+0x110>
 800cb16:	2c03      	cmp	r4, #3
 800cb18:	d1e7      	bne.n	800caea <__ieee754_atan2+0x36>
 800cb1a:	4832      	ldr	r0, [pc, #200]	; (800cbe4 <__ieee754_atan2+0x130>)
 800cb1c:	4932      	ldr	r1, [pc, #200]	; (800cbe8 <__ieee754_atan2+0x134>)
 800cb1e:	e7e4      	b.n	800caea <__ieee754_atan2+0x36>
 800cb20:	0017      	movs	r7, r2
 800cb22:	4337      	orrs	r7, r6
 800cb24:	d105      	bne.n	800cb32 <__ieee754_atan2+0x7e>
 800cb26:	9b00      	ldr	r3, [sp, #0]
 800cb28:	482e      	ldr	r0, [pc, #184]	; (800cbe4 <__ieee754_atan2+0x130>)
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	da53      	bge.n	800cbd6 <__ieee754_atan2+0x122>
 800cb2e:	492f      	ldr	r1, [pc, #188]	; (800cbec <__ieee754_atan2+0x138>)
 800cb30:	e7db      	b.n	800caea <__ieee754_atan2+0x36>
 800cb32:	4f2a      	ldr	r7, [pc, #168]	; (800cbdc <__ieee754_atan2+0x128>)
 800cb34:	42ba      	cmp	r2, r7
 800cb36:	d10f      	bne.n	800cb58 <__ieee754_atan2+0xa4>
 800cb38:	3c01      	subs	r4, #1
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d107      	bne.n	800cb4e <__ieee754_atan2+0x9a>
 800cb3e:	2c02      	cmp	r4, #2
 800cb40:	d843      	bhi.n	800cbca <__ieee754_atan2+0x116>
 800cb42:	4b2b      	ldr	r3, [pc, #172]	; (800cbf0 <__ieee754_atan2+0x13c>)
 800cb44:	00e4      	lsls	r4, r4, #3
 800cb46:	191c      	adds	r4, r3, r4
 800cb48:	6820      	ldr	r0, [r4, #0]
 800cb4a:	6861      	ldr	r1, [r4, #4]
 800cb4c:	e7cd      	b.n	800caea <__ieee754_atan2+0x36>
 800cb4e:	2c02      	cmp	r4, #2
 800cb50:	d83e      	bhi.n	800cbd0 <__ieee754_atan2+0x11c>
 800cb52:	4b28      	ldr	r3, [pc, #160]	; (800cbf4 <__ieee754_atan2+0x140>)
 800cb54:	00e4      	lsls	r4, r4, #3
 800cb56:	e7f6      	b.n	800cb46 <__ieee754_atan2+0x92>
 800cb58:	4f20      	ldr	r7, [pc, #128]	; (800cbdc <__ieee754_atan2+0x128>)
 800cb5a:	42bb      	cmp	r3, r7
 800cb5c:	d0e3      	beq.n	800cb26 <__ieee754_atan2+0x72>
 800cb5e:	1a9b      	subs	r3, r3, r2
 800cb60:	151b      	asrs	r3, r3, #20
 800cb62:	2b3c      	cmp	r3, #60	; 0x3c
 800cb64:	dc18      	bgt.n	800cb98 <__ieee754_atan2+0xe4>
 800cb66:	2d00      	cmp	r5, #0
 800cb68:	da01      	bge.n	800cb6e <__ieee754_atan2+0xba>
 800cb6a:	333c      	adds	r3, #60	; 0x3c
 800cb6c:	db17      	blt.n	800cb9e <__ieee754_atan2+0xea>
 800cb6e:	0032      	movs	r2, r6
 800cb70:	002b      	movs	r3, r5
 800cb72:	f7f4 fb5b 	bl	800122c <__aeabi_ddiv>
 800cb76:	f000 f9c9 	bl	800cf0c <fabs>
 800cb7a:	f000 f847 	bl	800cc0c <atan>
 800cb7e:	2c01      	cmp	r4, #1
 800cb80:	d010      	beq.n	800cba4 <__ieee754_atan2+0xf0>
 800cb82:	2c02      	cmp	r4, #2
 800cb84:	d013      	beq.n	800cbae <__ieee754_atan2+0xfa>
 800cb86:	2c00      	cmp	r4, #0
 800cb88:	d0af      	beq.n	800caea <__ieee754_atan2+0x36>
 800cb8a:	4a1b      	ldr	r2, [pc, #108]	; (800cbf8 <__ieee754_atan2+0x144>)
 800cb8c:	4b1b      	ldr	r3, [pc, #108]	; (800cbfc <__ieee754_atan2+0x148>)
 800cb8e:	f7f5 f9bf 	bl	8001f10 <__aeabi_dsub>
 800cb92:	4a14      	ldr	r2, [pc, #80]	; (800cbe4 <__ieee754_atan2+0x130>)
 800cb94:	4b1a      	ldr	r3, [pc, #104]	; (800cc00 <__ieee754_atan2+0x14c>)
 800cb96:	e012      	b.n	800cbbe <__ieee754_atan2+0x10a>
 800cb98:	4812      	ldr	r0, [pc, #72]	; (800cbe4 <__ieee754_atan2+0x130>)
 800cb9a:	491a      	ldr	r1, [pc, #104]	; (800cc04 <__ieee754_atan2+0x150>)
 800cb9c:	e7ef      	b.n	800cb7e <__ieee754_atan2+0xca>
 800cb9e:	2000      	movs	r0, #0
 800cba0:	2100      	movs	r1, #0
 800cba2:	e7ec      	b.n	800cb7e <__ieee754_atan2+0xca>
 800cba4:	2480      	movs	r4, #128	; 0x80
 800cba6:	0624      	lsls	r4, r4, #24
 800cba8:	190b      	adds	r3, r1, r4
 800cbaa:	0019      	movs	r1, r3
 800cbac:	e79d      	b.n	800caea <__ieee754_atan2+0x36>
 800cbae:	4a12      	ldr	r2, [pc, #72]	; (800cbf8 <__ieee754_atan2+0x144>)
 800cbb0:	4b12      	ldr	r3, [pc, #72]	; (800cbfc <__ieee754_atan2+0x148>)
 800cbb2:	f7f5 f9ad 	bl	8001f10 <__aeabi_dsub>
 800cbb6:	0002      	movs	r2, r0
 800cbb8:	000b      	movs	r3, r1
 800cbba:	480a      	ldr	r0, [pc, #40]	; (800cbe4 <__ieee754_atan2+0x130>)
 800cbbc:	4910      	ldr	r1, [pc, #64]	; (800cc00 <__ieee754_atan2+0x14c>)
 800cbbe:	f7f5 f9a7 	bl	8001f10 <__aeabi_dsub>
 800cbc2:	e792      	b.n	800caea <__ieee754_atan2+0x36>
 800cbc4:	4807      	ldr	r0, [pc, #28]	; (800cbe4 <__ieee754_atan2+0x130>)
 800cbc6:	490e      	ldr	r1, [pc, #56]	; (800cc00 <__ieee754_atan2+0x14c>)
 800cbc8:	e78f      	b.n	800caea <__ieee754_atan2+0x36>
 800cbca:	4806      	ldr	r0, [pc, #24]	; (800cbe4 <__ieee754_atan2+0x130>)
 800cbcc:	490e      	ldr	r1, [pc, #56]	; (800cc08 <__ieee754_atan2+0x154>)
 800cbce:	e78c      	b.n	800caea <__ieee754_atan2+0x36>
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	e789      	b.n	800caea <__ieee754_atan2+0x36>
 800cbd6:	490b      	ldr	r1, [pc, #44]	; (800cc04 <__ieee754_atan2+0x150>)
 800cbd8:	e787      	b.n	800caea <__ieee754_atan2+0x36>
 800cbda:	46c0      	nop			; (mov r8, r8)
 800cbdc:	7ff00000 	.word	0x7ff00000
 800cbe0:	c0100000 	.word	0xc0100000
 800cbe4:	54442d18 	.word	0x54442d18
 800cbe8:	c00921fb 	.word	0xc00921fb
 800cbec:	bff921fb 	.word	0xbff921fb
 800cbf0:	0800dd98 	.word	0x0800dd98
 800cbf4:	0800ddb0 	.word	0x0800ddb0
 800cbf8:	33145c07 	.word	0x33145c07
 800cbfc:	3ca1a626 	.word	0x3ca1a626
 800cc00:	400921fb 	.word	0x400921fb
 800cc04:	3ff921fb 	.word	0x3ff921fb
 800cc08:	3fe921fb 	.word	0x3fe921fb

0800cc0c <atan>:
 800cc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc0e:	4b98      	ldr	r3, [pc, #608]	; (800ce70 <atan+0x264>)
 800cc10:	b085      	sub	sp, #20
 800cc12:	004e      	lsls	r6, r1, #1
 800cc14:	0004      	movs	r4, r0
 800cc16:	000d      	movs	r5, r1
 800cc18:	9103      	str	r1, [sp, #12]
 800cc1a:	0876      	lsrs	r6, r6, #1
 800cc1c:	429e      	cmp	r6, r3
 800cc1e:	dd18      	ble.n	800cc52 <atan+0x46>
 800cc20:	4b94      	ldr	r3, [pc, #592]	; (800ce74 <atan+0x268>)
 800cc22:	429e      	cmp	r6, r3
 800cc24:	dc02      	bgt.n	800cc2c <atan+0x20>
 800cc26:	d10a      	bne.n	800cc3e <atan+0x32>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	d008      	beq.n	800cc3e <atan+0x32>
 800cc2c:	0022      	movs	r2, r4
 800cc2e:	002b      	movs	r3, r5
 800cc30:	0020      	movs	r0, r4
 800cc32:	0029      	movs	r1, r5
 800cc34:	f7f3 ff90 	bl	8000b58 <__aeabi_dadd>
 800cc38:	0004      	movs	r4, r0
 800cc3a:	000d      	movs	r5, r1
 800cc3c:	e005      	b.n	800cc4a <atan+0x3e>
 800cc3e:	9b03      	ldr	r3, [sp, #12]
 800cc40:	4c8d      	ldr	r4, [pc, #564]	; (800ce78 <atan+0x26c>)
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	dd00      	ble.n	800cc48 <atan+0x3c>
 800cc46:	e110      	b.n	800ce6a <atan+0x25e>
 800cc48:	4d8c      	ldr	r5, [pc, #560]	; (800ce7c <atan+0x270>)
 800cc4a:	0020      	movs	r0, r4
 800cc4c:	0029      	movs	r1, r5
 800cc4e:	b005      	add	sp, #20
 800cc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc52:	4b8b      	ldr	r3, [pc, #556]	; (800ce80 <atan+0x274>)
 800cc54:	429e      	cmp	r6, r3
 800cc56:	dc0f      	bgt.n	800cc78 <atan+0x6c>
 800cc58:	4b8a      	ldr	r3, [pc, #552]	; (800ce84 <atan+0x278>)
 800cc5a:	429e      	cmp	r6, r3
 800cc5c:	dc09      	bgt.n	800cc72 <atan+0x66>
 800cc5e:	4a8a      	ldr	r2, [pc, #552]	; (800ce88 <atan+0x27c>)
 800cc60:	4b8a      	ldr	r3, [pc, #552]	; (800ce8c <atan+0x280>)
 800cc62:	f7f3 ff79 	bl	8000b58 <__aeabi_dadd>
 800cc66:	2200      	movs	r2, #0
 800cc68:	4b89      	ldr	r3, [pc, #548]	; (800ce90 <atan+0x284>)
 800cc6a:	f7f3 fc09 	bl	8000480 <__aeabi_dcmpgt>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d1eb      	bne.n	800cc4a <atan+0x3e>
 800cc72:	2301      	movs	r3, #1
 800cc74:	425b      	negs	r3, r3
 800cc76:	e025      	b.n	800ccc4 <atan+0xb8>
 800cc78:	f000 f948 	bl	800cf0c <fabs>
 800cc7c:	4b85      	ldr	r3, [pc, #532]	; (800ce94 <atan+0x288>)
 800cc7e:	0004      	movs	r4, r0
 800cc80:	000d      	movs	r5, r1
 800cc82:	429e      	cmp	r6, r3
 800cc84:	dd00      	ble.n	800cc88 <atan+0x7c>
 800cc86:	e0aa      	b.n	800cdde <atan+0x1d2>
 800cc88:	4b83      	ldr	r3, [pc, #524]	; (800ce98 <atan+0x28c>)
 800cc8a:	429e      	cmp	r6, r3
 800cc8c:	dd00      	ble.n	800cc90 <atan+0x84>
 800cc8e:	e090      	b.n	800cdb2 <atan+0x1a6>
 800cc90:	0002      	movs	r2, r0
 800cc92:	000b      	movs	r3, r1
 800cc94:	f7f3 ff60 	bl	8000b58 <__aeabi_dadd>
 800cc98:	2200      	movs	r2, #0
 800cc9a:	4b7d      	ldr	r3, [pc, #500]	; (800ce90 <atan+0x284>)
 800cc9c:	f7f5 f938 	bl	8001f10 <__aeabi_dsub>
 800cca0:	2380      	movs	r3, #128	; 0x80
 800cca2:	0006      	movs	r6, r0
 800cca4:	000f      	movs	r7, r1
 800cca6:	2200      	movs	r2, #0
 800cca8:	0020      	movs	r0, r4
 800ccaa:	0029      	movs	r1, r5
 800ccac:	05db      	lsls	r3, r3, #23
 800ccae:	f7f3 ff53 	bl	8000b58 <__aeabi_dadd>
 800ccb2:	000b      	movs	r3, r1
 800ccb4:	0002      	movs	r2, r0
 800ccb6:	0039      	movs	r1, r7
 800ccb8:	0030      	movs	r0, r6
 800ccba:	f7f4 fab7 	bl	800122c <__aeabi_ddiv>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	0004      	movs	r4, r0
 800ccc2:	000d      	movs	r5, r1
 800ccc4:	0022      	movs	r2, r4
 800ccc6:	9302      	str	r3, [sp, #8]
 800ccc8:	0020      	movs	r0, r4
 800ccca:	002b      	movs	r3, r5
 800cccc:	0029      	movs	r1, r5
 800ccce:	f7f4 feb3 	bl	8001a38 <__aeabi_dmul>
 800ccd2:	0002      	movs	r2, r0
 800ccd4:	000b      	movs	r3, r1
 800ccd6:	9000      	str	r0, [sp, #0]
 800ccd8:	9101      	str	r1, [sp, #4]
 800ccda:	f7f4 fead 	bl	8001a38 <__aeabi_dmul>
 800ccde:	0006      	movs	r6, r0
 800cce0:	000f      	movs	r7, r1
 800cce2:	4a6e      	ldr	r2, [pc, #440]	; (800ce9c <atan+0x290>)
 800cce4:	4b6e      	ldr	r3, [pc, #440]	; (800cea0 <atan+0x294>)
 800cce6:	f7f4 fea7 	bl	8001a38 <__aeabi_dmul>
 800ccea:	4a6e      	ldr	r2, [pc, #440]	; (800cea4 <atan+0x298>)
 800ccec:	4b6e      	ldr	r3, [pc, #440]	; (800cea8 <atan+0x29c>)
 800ccee:	f7f3 ff33 	bl	8000b58 <__aeabi_dadd>
 800ccf2:	0032      	movs	r2, r6
 800ccf4:	003b      	movs	r3, r7
 800ccf6:	f7f4 fe9f 	bl	8001a38 <__aeabi_dmul>
 800ccfa:	4a6c      	ldr	r2, [pc, #432]	; (800ceac <atan+0x2a0>)
 800ccfc:	4b6c      	ldr	r3, [pc, #432]	; (800ceb0 <atan+0x2a4>)
 800ccfe:	f7f3 ff2b 	bl	8000b58 <__aeabi_dadd>
 800cd02:	0032      	movs	r2, r6
 800cd04:	003b      	movs	r3, r7
 800cd06:	f7f4 fe97 	bl	8001a38 <__aeabi_dmul>
 800cd0a:	4a6a      	ldr	r2, [pc, #424]	; (800ceb4 <atan+0x2a8>)
 800cd0c:	4b6a      	ldr	r3, [pc, #424]	; (800ceb8 <atan+0x2ac>)
 800cd0e:	f7f3 ff23 	bl	8000b58 <__aeabi_dadd>
 800cd12:	0032      	movs	r2, r6
 800cd14:	003b      	movs	r3, r7
 800cd16:	f7f4 fe8f 	bl	8001a38 <__aeabi_dmul>
 800cd1a:	4a68      	ldr	r2, [pc, #416]	; (800cebc <atan+0x2b0>)
 800cd1c:	4b68      	ldr	r3, [pc, #416]	; (800cec0 <atan+0x2b4>)
 800cd1e:	f7f3 ff1b 	bl	8000b58 <__aeabi_dadd>
 800cd22:	0032      	movs	r2, r6
 800cd24:	003b      	movs	r3, r7
 800cd26:	f7f4 fe87 	bl	8001a38 <__aeabi_dmul>
 800cd2a:	4a66      	ldr	r2, [pc, #408]	; (800cec4 <atan+0x2b8>)
 800cd2c:	4b66      	ldr	r3, [pc, #408]	; (800cec8 <atan+0x2bc>)
 800cd2e:	f7f3 ff13 	bl	8000b58 <__aeabi_dadd>
 800cd32:	9a00      	ldr	r2, [sp, #0]
 800cd34:	9b01      	ldr	r3, [sp, #4]
 800cd36:	f7f4 fe7f 	bl	8001a38 <__aeabi_dmul>
 800cd3a:	4a64      	ldr	r2, [pc, #400]	; (800cecc <atan+0x2c0>)
 800cd3c:	9000      	str	r0, [sp, #0]
 800cd3e:	9101      	str	r1, [sp, #4]
 800cd40:	4b63      	ldr	r3, [pc, #396]	; (800ced0 <atan+0x2c4>)
 800cd42:	0030      	movs	r0, r6
 800cd44:	0039      	movs	r1, r7
 800cd46:	f7f4 fe77 	bl	8001a38 <__aeabi_dmul>
 800cd4a:	4a62      	ldr	r2, [pc, #392]	; (800ced4 <atan+0x2c8>)
 800cd4c:	4b62      	ldr	r3, [pc, #392]	; (800ced8 <atan+0x2cc>)
 800cd4e:	f7f5 f8df 	bl	8001f10 <__aeabi_dsub>
 800cd52:	0032      	movs	r2, r6
 800cd54:	003b      	movs	r3, r7
 800cd56:	f7f4 fe6f 	bl	8001a38 <__aeabi_dmul>
 800cd5a:	4a60      	ldr	r2, [pc, #384]	; (800cedc <atan+0x2d0>)
 800cd5c:	4b60      	ldr	r3, [pc, #384]	; (800cee0 <atan+0x2d4>)
 800cd5e:	f7f5 f8d7 	bl	8001f10 <__aeabi_dsub>
 800cd62:	0032      	movs	r2, r6
 800cd64:	003b      	movs	r3, r7
 800cd66:	f7f4 fe67 	bl	8001a38 <__aeabi_dmul>
 800cd6a:	4a5e      	ldr	r2, [pc, #376]	; (800cee4 <atan+0x2d8>)
 800cd6c:	4b5e      	ldr	r3, [pc, #376]	; (800cee8 <atan+0x2dc>)
 800cd6e:	f7f5 f8cf 	bl	8001f10 <__aeabi_dsub>
 800cd72:	0032      	movs	r2, r6
 800cd74:	003b      	movs	r3, r7
 800cd76:	f7f4 fe5f 	bl	8001a38 <__aeabi_dmul>
 800cd7a:	4a5c      	ldr	r2, [pc, #368]	; (800ceec <atan+0x2e0>)
 800cd7c:	4b5c      	ldr	r3, [pc, #368]	; (800cef0 <atan+0x2e4>)
 800cd7e:	f7f5 f8c7 	bl	8001f10 <__aeabi_dsub>
 800cd82:	0032      	movs	r2, r6
 800cd84:	003b      	movs	r3, r7
 800cd86:	f7f4 fe57 	bl	8001a38 <__aeabi_dmul>
 800cd8a:	0002      	movs	r2, r0
 800cd8c:	000b      	movs	r3, r1
 800cd8e:	9800      	ldr	r0, [sp, #0]
 800cd90:	9901      	ldr	r1, [sp, #4]
 800cd92:	f7f3 fee1 	bl	8000b58 <__aeabi_dadd>
 800cd96:	002b      	movs	r3, r5
 800cd98:	0022      	movs	r2, r4
 800cd9a:	f7f4 fe4d 	bl	8001a38 <__aeabi_dmul>
 800cd9e:	9b02      	ldr	r3, [sp, #8]
 800cda0:	3301      	adds	r3, #1
 800cda2:	d143      	bne.n	800ce2c <atan+0x220>
 800cda4:	0002      	movs	r2, r0
 800cda6:	000b      	movs	r3, r1
 800cda8:	0020      	movs	r0, r4
 800cdaa:	0029      	movs	r1, r5
 800cdac:	f7f5 f8b0 	bl	8001f10 <__aeabi_dsub>
 800cdb0:	e742      	b.n	800cc38 <atan+0x2c>
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	4b36      	ldr	r3, [pc, #216]	; (800ce90 <atan+0x284>)
 800cdb6:	f7f5 f8ab 	bl	8001f10 <__aeabi_dsub>
 800cdba:	2200      	movs	r2, #0
 800cdbc:	0006      	movs	r6, r0
 800cdbe:	000f      	movs	r7, r1
 800cdc0:	0020      	movs	r0, r4
 800cdc2:	0029      	movs	r1, r5
 800cdc4:	4b32      	ldr	r3, [pc, #200]	; (800ce90 <atan+0x284>)
 800cdc6:	f7f3 fec7 	bl	8000b58 <__aeabi_dadd>
 800cdca:	000b      	movs	r3, r1
 800cdcc:	0002      	movs	r2, r0
 800cdce:	0039      	movs	r1, r7
 800cdd0:	0030      	movs	r0, r6
 800cdd2:	f7f4 fa2b 	bl	800122c <__aeabi_ddiv>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	0004      	movs	r4, r0
 800cdda:	000d      	movs	r5, r1
 800cddc:	e772      	b.n	800ccc4 <atan+0xb8>
 800cdde:	4b45      	ldr	r3, [pc, #276]	; (800cef4 <atan+0x2e8>)
 800cde0:	429e      	cmp	r6, r3
 800cde2:	dc19      	bgt.n	800ce18 <atan+0x20c>
 800cde4:	2200      	movs	r2, #0
 800cde6:	4b44      	ldr	r3, [pc, #272]	; (800cef8 <atan+0x2ec>)
 800cde8:	f7f5 f892 	bl	8001f10 <__aeabi_dsub>
 800cdec:	2200      	movs	r2, #0
 800cdee:	0006      	movs	r6, r0
 800cdf0:	000f      	movs	r7, r1
 800cdf2:	0020      	movs	r0, r4
 800cdf4:	0029      	movs	r1, r5
 800cdf6:	4b40      	ldr	r3, [pc, #256]	; (800cef8 <atan+0x2ec>)
 800cdf8:	f7f4 fe1e 	bl	8001a38 <__aeabi_dmul>
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	4b24      	ldr	r3, [pc, #144]	; (800ce90 <atan+0x284>)
 800ce00:	f7f3 feaa 	bl	8000b58 <__aeabi_dadd>
 800ce04:	000b      	movs	r3, r1
 800ce06:	0002      	movs	r2, r0
 800ce08:	0039      	movs	r1, r7
 800ce0a:	0030      	movs	r0, r6
 800ce0c:	f7f4 fa0e 	bl	800122c <__aeabi_ddiv>
 800ce10:	2302      	movs	r3, #2
 800ce12:	0004      	movs	r4, r0
 800ce14:	000d      	movs	r5, r1
 800ce16:	e755      	b.n	800ccc4 <atan+0xb8>
 800ce18:	000b      	movs	r3, r1
 800ce1a:	0002      	movs	r2, r0
 800ce1c:	4937      	ldr	r1, [pc, #220]	; (800cefc <atan+0x2f0>)
 800ce1e:	2000      	movs	r0, #0
 800ce20:	f7f4 fa04 	bl	800122c <__aeabi_ddiv>
 800ce24:	2303      	movs	r3, #3
 800ce26:	0004      	movs	r4, r0
 800ce28:	000d      	movs	r5, r1
 800ce2a:	e74b      	b.n	800ccc4 <atan+0xb8>
 800ce2c:	9b02      	ldr	r3, [sp, #8]
 800ce2e:	4f34      	ldr	r7, [pc, #208]	; (800cf00 <atan+0x2f4>)
 800ce30:	00de      	lsls	r6, r3, #3
 800ce32:	4b34      	ldr	r3, [pc, #208]	; (800cf04 <atan+0x2f8>)
 800ce34:	19bf      	adds	r7, r7, r6
 800ce36:	199e      	adds	r6, r3, r6
 800ce38:	6832      	ldr	r2, [r6, #0]
 800ce3a:	6873      	ldr	r3, [r6, #4]
 800ce3c:	f7f5 f868 	bl	8001f10 <__aeabi_dsub>
 800ce40:	0022      	movs	r2, r4
 800ce42:	002b      	movs	r3, r5
 800ce44:	f7f5 f864 	bl	8001f10 <__aeabi_dsub>
 800ce48:	000b      	movs	r3, r1
 800ce4a:	0002      	movs	r2, r0
 800ce4c:	6838      	ldr	r0, [r7, #0]
 800ce4e:	6879      	ldr	r1, [r7, #4]
 800ce50:	f7f5 f85e 	bl	8001f10 <__aeabi_dsub>
 800ce54:	9b03      	ldr	r3, [sp, #12]
 800ce56:	0004      	movs	r4, r0
 800ce58:	000d      	movs	r5, r1
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	db00      	blt.n	800ce60 <atan+0x254>
 800ce5e:	e6f4      	b.n	800cc4a <atan+0x3e>
 800ce60:	2180      	movs	r1, #128	; 0x80
 800ce62:	0609      	lsls	r1, r1, #24
 800ce64:	186b      	adds	r3, r5, r1
 800ce66:	001d      	movs	r5, r3
 800ce68:	e6ef      	b.n	800cc4a <atan+0x3e>
 800ce6a:	4d27      	ldr	r5, [pc, #156]	; (800cf08 <atan+0x2fc>)
 800ce6c:	e6ed      	b.n	800cc4a <atan+0x3e>
 800ce6e:	46c0      	nop			; (mov r8, r8)
 800ce70:	440fffff 	.word	0x440fffff
 800ce74:	7ff00000 	.word	0x7ff00000
 800ce78:	54442d18 	.word	0x54442d18
 800ce7c:	bff921fb 	.word	0xbff921fb
 800ce80:	3fdbffff 	.word	0x3fdbffff
 800ce84:	3e1fffff 	.word	0x3e1fffff
 800ce88:	8800759c 	.word	0x8800759c
 800ce8c:	7e37e43c 	.word	0x7e37e43c
 800ce90:	3ff00000 	.word	0x3ff00000
 800ce94:	3ff2ffff 	.word	0x3ff2ffff
 800ce98:	3fe5ffff 	.word	0x3fe5ffff
 800ce9c:	e322da11 	.word	0xe322da11
 800cea0:	3f90ad3a 	.word	0x3f90ad3a
 800cea4:	24760deb 	.word	0x24760deb
 800cea8:	3fa97b4b 	.word	0x3fa97b4b
 800ceac:	a0d03d51 	.word	0xa0d03d51
 800ceb0:	3fb10d66 	.word	0x3fb10d66
 800ceb4:	c54c206e 	.word	0xc54c206e
 800ceb8:	3fb745cd 	.word	0x3fb745cd
 800cebc:	920083ff 	.word	0x920083ff
 800cec0:	3fc24924 	.word	0x3fc24924
 800cec4:	5555550d 	.word	0x5555550d
 800cec8:	3fd55555 	.word	0x3fd55555
 800cecc:	2c6a6c2f 	.word	0x2c6a6c2f
 800ced0:	bfa2b444 	.word	0xbfa2b444
 800ced4:	52defd9a 	.word	0x52defd9a
 800ced8:	3fadde2d 	.word	0x3fadde2d
 800cedc:	af749a6d 	.word	0xaf749a6d
 800cee0:	3fb3b0f2 	.word	0x3fb3b0f2
 800cee4:	fe231671 	.word	0xfe231671
 800cee8:	3fbc71c6 	.word	0x3fbc71c6
 800ceec:	9998ebc4 	.word	0x9998ebc4
 800cef0:	3fc99999 	.word	0x3fc99999
 800cef4:	40037fff 	.word	0x40037fff
 800cef8:	3ff80000 	.word	0x3ff80000
 800cefc:	bff00000 	.word	0xbff00000
 800cf00:	0800ddc8 	.word	0x0800ddc8
 800cf04:	0800dde8 	.word	0x0800dde8
 800cf08:	3ff921fb 	.word	0x3ff921fb

0800cf0c <fabs>:
 800cf0c:	004b      	lsls	r3, r1, #1
 800cf0e:	0859      	lsrs	r1, r3, #1
 800cf10:	4770      	bx	lr
	...

0800cf14 <_init>:
 800cf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf16:	46c0      	nop			; (mov r8, r8)
 800cf18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf1a:	bc08      	pop	{r3}
 800cf1c:	469e      	mov	lr, r3
 800cf1e:	4770      	bx	lr

0800cf20 <_fini>:
 800cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf22:	46c0      	nop			; (mov r8, r8)
 800cf24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf26:	bc08      	pop	{r3}
 800cf28:	469e      	mov	lr, r3
 800cf2a:	4770      	bx	lr
